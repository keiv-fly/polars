(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Freeze for Adler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Freeze for AHasher","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Freeze for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindIter&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Freeze for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Freeze for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]}];
implementors["alloc_no_stdlib"] = [{"text":"impl&lt;'a, T, U&gt; Freeze for StackAllocator&lt;'a, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for AllocatedStackMemory&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CallocBackingStore&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AllocatorC","synthetic":true,"types":[]}];
implementors["alloc_stdlib"] = [{"text":"impl&lt;T&gt; Freeze for WrapBox&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HeapAlloc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for HeapPrealloc&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StandardAlloc","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Freeze for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for Drain&lt;'a, A&gt;","synthetic":true,"types":[]}];
implementors["arrow"] = [{"text":"impl&lt;OffsetSize&gt; Freeze for GenericBinaryArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeBinaryArray","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalArray","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanArray","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for DictionaryArray&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; Freeze for GenericListArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeListArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PrimitiveArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; Freeze for GenericStringArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StructArray","synthetic":true,"types":[]},{"text":"impl Freeze for UnionArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BufferBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanBufferBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PrimitiveBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FixedSizeListBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeBinaryBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for StructBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UnionBuilder","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for PrimitiveDictionaryBuilder&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for StringDictionaryBuilder&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ArrayData","synthetic":true,"types":[]},{"text":"impl Freeze for ArrayDataBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for PrimitiveIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for GenericStringIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for GenericBinaryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NullArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MutableArrayData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Bitmap","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl Freeze for MutableBuffer","synthetic":true,"types":[]},{"text":"impl Freeze for Deallocation","synthetic":true,"types":[]},{"text":"impl Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl Freeze for SortOptions","synthetic":true,"types":[]},{"text":"impl Freeze for SortColumn","synthetic":true,"types":[]},{"text":"impl Freeze for TakeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WriterBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for DataType","synthetic":true,"types":[]},{"text":"impl Freeze for DateUnit","synthetic":true,"types":[]},{"text":"impl Freeze for TimeUnit","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalUnit","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanType","synthetic":true,"types":[]},{"text":"impl Freeze for Int8Type","synthetic":true,"types":[]},{"text":"impl Freeze for Int16Type","synthetic":true,"types":[]},{"text":"impl Freeze for Int32Type","synthetic":true,"types":[]},{"text":"impl Freeze for Int64Type","synthetic":true,"types":[]},{"text":"impl Freeze for UInt8Type","synthetic":true,"types":[]},{"text":"impl Freeze for UInt16Type","synthetic":true,"types":[]},{"text":"impl Freeze for UInt32Type","synthetic":true,"types":[]},{"text":"impl Freeze for UInt64Type","synthetic":true,"types":[]},{"text":"impl Freeze for Float32Type","synthetic":true,"types":[]},{"text":"impl Freeze for Float64Type","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampSecondType","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampMillisecondType","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampMicrosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampNanosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Date32Type","synthetic":true,"types":[]},{"text":"impl Freeze for Date64Type","synthetic":true,"types":[]},{"text":"impl Freeze for Time32SecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Time32MillisecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Time64MicrosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Time64NanosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalYearMonthType","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalDayTimeType","synthetic":true,"types":[]},{"text":"impl Freeze for DurationSecondType","synthetic":true,"types":[]},{"text":"impl Freeze for DurationMillisecondType","synthetic":true,"types":[]},{"text":"impl Freeze for DurationMicrosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for DurationNanosecondType","synthetic":true,"types":[]},{"text":"impl Freeze for Schema","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowError","synthetic":true,"types":[]},{"text":"impl Freeze for FFI_ArrowSchema","synthetic":true,"types":[]},{"text":"impl Freeze for FFI_ArrowArray","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowArray","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FileReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for StreamReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IpcWriteOptions","synthetic":true,"types":[]},{"text":"impl Freeze for IpcDataGenerator","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryTracker","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for FileWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for StreamWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EncodedData","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for FooterOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Footer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FooterArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FooterBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionType","synthetic":true,"types":[]},{"text":"impl Freeze for BodyCompressionMethod","synthetic":true,"types":[]},{"text":"impl Freeze for MessageHeader","synthetic":true,"types":[]},{"text":"impl Freeze for MessageHeaderUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Freeze for FieldNode","synthetic":true,"types":[]},{"text":"impl Freeze for BodyCompressionOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BodyCompression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BodyCompressionArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BodyCompressionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RecordBatchOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for RecordBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryBatchOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DictionaryBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DictionaryBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DictionaryBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MessageOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Message&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MessageArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for MessageBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MetadataVersion","synthetic":true,"types":[]},{"text":"impl Freeze for Feature","synthetic":true,"types":[]},{"text":"impl Freeze for UnionMode","synthetic":true,"types":[]},{"text":"impl Freeze for Precision","synthetic":true,"types":[]},{"text":"impl Freeze for DateUnit","synthetic":true,"types":[]},{"text":"impl Freeze for TimeUnit","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalUnit","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for TypeUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryKind","synthetic":true,"types":[]},{"text":"impl Freeze for Endianness","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl Freeze for NullOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Null&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NullArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for NullBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Struct_Offset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Struct_&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Struct_Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Struct_Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ListOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for List&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for ListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeListOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LargeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for LargeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeListOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FixedSizeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FixedSizeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MapOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Map&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MapArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for MapBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnionOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Union&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnionArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for UnionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Int&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for IntBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FloatingPointOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FloatingPoint&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FloatingPointArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FloatingPointBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Offset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for Utf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Binary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeUtf8Offset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LargeUtf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeUtf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for LargeUtf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeBinaryOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LargeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for LargeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeBinaryOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FixedSizeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FixedSizeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FixedSizeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BoolOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Bool&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BoolArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BoolBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Decimal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DecimalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DateOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Date&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DateArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DateBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TimeOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Time&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TimeArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for TimeBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Timestamp&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TimestampArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for TimestampBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Interval&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntervalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for IntervalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DurationOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Duration&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DurationArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DurationBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for KeyValueOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for KeyValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for KeyValueArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for KeyValueBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryEncodingOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DictionaryEncoding&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DictionaryEncodingArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for DictionaryEncodingBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FieldOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FieldArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for FieldBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SchemaOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Schema&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SchemaArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SchemaBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SparseMatrixCompressedAxis","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorIndex","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorIndexUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorIndexCOOOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorIndexCOO&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorIndexCOOArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SparseTensorIndexCOOBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SparseMatrixIndexCSXOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseMatrixIndexCSX&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseMatrixIndexCSXArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SparseMatrixIndexCSXBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorIndexCSFOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorIndexCSF&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorIndexCSFArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SparseTensorIndexCSFBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SparseTensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SparseTensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for SparseTensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TensorDimOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TensorDim&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TensorDimArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for TensorDimBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Tensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for TensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for ValueIter&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RecordBatch","synthetic":true,"types":[]},{"text":"impl Freeze for RecordBatchOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Tensor&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BitChunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BitChunkIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJson","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonSchema","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonField","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonFieldDictionary","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryIndexType","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonBatch","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonDictionaryBatch","synthetic":true,"types":[]},{"text":"impl Freeze for ArrowJsonColumn","synthetic":true,"types":[]},{"text":"impl Freeze for StringWriter","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Freeze for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for DecoderReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for EncoderWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for CharacterSet","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]}];
implementors["brotli"] = [{"text":"impl&lt;'a&gt; Freeze for InputReference&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InputReferenceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InputPair&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliDistanceParams","synthetic":true,"types":[]},{"text":"impl Freeze for Command","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Freeze for BlockSplit&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PrefixCodeRange","synthetic":true,"types":[]},{"text":"impl Freeze for SimpleSortHuffmanTree","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Freeze for MetaBlockSplit&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;HistogramCommand&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;HistogramDistance&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;HistogramLiteral&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BlockTypeCodeCalculator","synthetic":true,"types":[]},{"text":"impl Freeze for BlockSplitCode","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Freeze for BlockEncoder&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecoderState","synthetic":true,"types":[]},{"text":"impl Freeze for HuffmanTree","synthetic":true,"types":[]},{"text":"impl Freeze for SortHuffmanTree","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliDictionary","synthetic":true,"types":[]},{"text":"impl&lt;AllocU8, AllocU16, AllocI32, AllocU32, AllocU64, AllocCommand, AllocFloatX, AllocV8, AllocS16, AllocPDF, AllocStaticCommand, AllocHistogramLiteral, AllocHistogramCommand, AllocHistogramDistance, AllocHistogramPair, AllocContextType, AllocHuffmanTree, AllocZopfliNode&gt; Freeze for CombiningAllocator&lt;AllocU8, AllocU16, AllocI32, AllocU32, AllocU64, AllocCommand, AllocFloatX, AllocV8, AllocS16, AllocPDF, AllocStaticCommand, AllocHistogramLiteral, AllocHistogramCommand, AllocHistogramDistance, AllocHistogramPair, AllocContextType, AllocHuffmanTree, AllocZopfliNode&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocCommand: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocContextType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocFloatX: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramCommand: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramDistance: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramLiteral: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramPair: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHuffmanTree: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocI32: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocPDF: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocS16: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocStaticCommand: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU16: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU64: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocV8: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocZopfliNode: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DictWord","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramPair","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramLiteral","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramCommand","synthetic":true,"types":[]},{"text":"impl Freeze for HistogramDistance","synthetic":true,"types":[]},{"text":"impl Freeze for Array264i","synthetic":true,"types":[]},{"text":"impl Freeze for Array528i","synthetic":true,"types":[]},{"text":"impl Freeze for Array712i","synthetic":true,"types":[]},{"text":"impl Freeze for EmptyIVec","synthetic":true,"types":[]},{"text":"impl Freeze for ContextType","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Freeze for BlockSplitIterator&lt;'a, Alloc&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AllocF&gt; Freeze for ZopfliCostModel&lt;AllocF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocF as Allocator&lt;f32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PosData","synthetic":true,"types":[]},{"text":"impl Freeze for StartPosQueue","synthetic":true,"types":[]},{"text":"impl Freeze for Union1","synthetic":true,"types":[]},{"text":"impl Freeze for ZopfliNode","synthetic":true,"types":[]},{"text":"impl Freeze for H10DefaultParams","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Freeze for H10Buckets&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32, Buckets, Params&gt; Freeze for H10&lt;AllocU32, Buckets, Params&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buckets: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BackwardMatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BackwardMatchMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderMode","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliHasherParams","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderParams","synthetic":true,"types":[]},{"text":"impl Freeze for H9Opts","synthetic":true,"types":[]},{"text":"impl Freeze for HowPrepared","synthetic":true,"types":[]},{"text":"impl Freeze for Struct1","synthetic":true,"types":[]},{"text":"impl Freeze for HasherSearchResult","synthetic":true,"types":[]},{"text":"impl&lt;Buckets&gt; Freeze for BasicHasher&lt;Buckets&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buckets: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Freeze for H2Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Freeze for H3Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Freeze for H4Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Freeze for H54Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Specialization, Alloc&gt; Freeze for AdvHasher&lt;Specialization, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Specialization: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for HQ5Sub","synthetic":true,"types":[]},{"text":"impl Freeze for HQ7Sub","synthetic":true,"types":[]},{"text":"impl Freeze for H9Sub","synthetic":true,"types":[]},{"text":"impl Freeze for H5Sub","synthetic":true,"types":[]},{"text":"impl Freeze for H6Sub","synthetic":true,"types":[]},{"text":"impl Freeze for BankH40","synthetic":true,"types":[]},{"text":"impl Freeze for BankH41","synthetic":true,"types":[]},{"text":"impl Freeze for BankH42","synthetic":true,"types":[]},{"text":"impl Freeze for SlotH40","synthetic":true,"types":[]},{"text":"impl Freeze for SlotH41","synthetic":true,"types":[]},{"text":"impl Freeze for SlotH42","synthetic":true,"types":[]},{"text":"impl Freeze for H40","synthetic":true,"types":[]},{"text":"impl Freeze for H41","synthetic":true,"types":[]},{"text":"impl Freeze for H42","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Freeze for UnionHasher&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BlockSplitter","synthetic":true,"types":[]},{"text":"impl Freeze for ContextBlockSplitter","synthetic":true,"types":[]},{"text":"impl Freeze for CodeBlockState","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderParameter","synthetic":true,"types":[]},{"text":"impl&lt;AllocU8&gt; Freeze for RingBuffer&lt;AllocU8&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderStreamState","synthetic":true,"types":[]},{"text":"impl Freeze for IsFirst","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Freeze for BrotliEncoderStateStruct&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderOperation","synthetic":true,"types":[]},{"text":"impl&lt;R, BufferType, Alloc&gt; Freeze for CompressorReaderCustomAlloc&lt;R, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CompressorReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, R, BufferType, Alloc&gt; Freeze for CompressorReaderCustomIo&lt;ErrType, R, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, BufferType, Alloc&gt; Freeze for CompressorWriterCustomAlloc&lt;W, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for CompressorWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, W, BufferType, Alloc&gt; Freeze for CompressorWriterCustomIo&lt;ErrType, W, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Freeze for EntropyBucketPopulation&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BucketPopIndex","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Freeze for EntropyTally&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Freeze for EntropyPyramid&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BlockSwitch","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralBlockSwitch","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralPredictionModeNibble","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Freeze for PredictionModeContextMap&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CopyCommand","synthetic":true,"types":[]},{"text":"impl Freeze for DictCommand","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Freeze for FeatureFlagSliceType&lt;SliceType&gt;","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Freeze for LiteralCommand&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Freeze for Command&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SliceOffset","synthetic":true,"types":[]},{"text":"impl Freeze for WhichPrior","synthetic":true,"types":[]},{"text":"impl Freeze for Stride1Prior","synthetic":true,"types":[]},{"text":"impl Freeze for Stride2Prior","synthetic":true,"types":[]},{"text":"impl Freeze for Stride3Prior","synthetic":true,"types":[]},{"text":"impl Freeze for Stride4Prior","synthetic":true,"types":[]},{"text":"impl Freeze for CMPrior","synthetic":true,"types":[]},{"text":"impl Freeze for FastCMPrior","synthetic":true,"types":[]},{"text":"impl Freeze for SlowCMPrior","synthetic":true,"types":[]},{"text":"impl Freeze for AdvPrior","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CDF&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Freeze for PriorEval&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Compat16x16&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;CompatF8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Freeze for StrideEval&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;f32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SpeedAndMax","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Freeze for ContextMapEntropy&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PDF","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderThreadError","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Freeze for CompressedFileChunk&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Freeze for CompressionThreadResult&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ReturnVal, ExtraInput, Alloc, Join&gt; Freeze for InternalSendAlloc&lt;ReturnVal, ExtraInput, Alloc, Join&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraInput: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Join: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, Join&gt; Freeze for SendAlloc&lt;ReturnValue, ExtraInput, Alloc, Join&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraInput: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Join: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for InternalOwned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for SingleThreadedJoinable&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; !Freeze for SingleThreadedOwnedRetriever&lt;U&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SingleThreadedSpawner","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Freeze for WorkerPool&lt;A, B, C, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for MultiThreadedJoinable&lt;T, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; !Freeze for MultiThreadedOwnedRetriever&lt;U&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MultiThreadedSpawner","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FixedQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, U&gt; Freeze for GuardedQueue&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, U&gt; Freeze for WorkerPool&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, U&gt; Freeze for WorkerJoinable&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BroCatliResult","synthetic":true,"types":[]},{"text":"impl Freeze for BroCatli","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliSubclassableAllocator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendableMemoryBlock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderOperation","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderMode","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderState","synthetic":true,"types":[]},{"text":"impl Freeze for BroccoliState","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliEncoderWorkPool","synthetic":true,"types":[]}];
implementors["brotli_decompressor"] = [{"text":"impl Freeze for HuffmanCode","synthetic":true,"types":[]},{"text":"impl&lt;Alloc32, AllocHC&gt; Freeze for HuffmanTreeGroup&lt;Alloc32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliDecoderErrorCode","synthetic":true,"types":[]},{"text":"impl&lt;AllocU8, AllocU32, AllocHC&gt; Freeze for BrotliState&lt;AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Transform","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliResult","synthetic":true,"types":[]},{"text":"impl&lt;InputType&gt; Freeze for IntoIoReader&lt;InputType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InputType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;InputType&gt; Freeze for IntoIoWriter&lt;InputType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InputType: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, OutputType&gt; Freeze for IoWriterWrapper&lt;'a, OutputType&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, OutputType&gt; Freeze for IoReaderWrapper&lt;'a, OutputType&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, BufferType, AllocU8, AllocU32, AllocHC&gt; Freeze for DecompressorCustomAlloc&lt;R, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decompressor&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, R, BufferType, AllocU8, AllocU32, AllocHC&gt; Freeze for DecompressorCustomIo&lt;ErrType, R, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, BufferType, AllocU8, AllocU32, AllocHC&gt; Freeze for DecompressorWriterCustomAlloc&lt;W, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DecompressorWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, W, BufferType, AllocU8, AllocU32, AllocHC&gt; Freeze for DecompressorWriterCustomIo&lt;ErrType, W, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for c_void","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliDecoderParameter","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliDecoderResult","synthetic":true,"types":[]},{"text":"impl Freeze for CAllocator","synthetic":true,"types":[]},{"text":"impl&lt;Ty&gt; Freeze for MemoryBlock&lt;Ty&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SubclassableAllocator","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliDecoderState","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliDecoderReturnInfo","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Freeze for BStr","synthetic":true,"types":[]},{"text":"impl Freeze for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Freeze for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Freeze for FixedOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDate","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Freeze for IsoWeek","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveTime","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Freeze for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SecondsFormat","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Freeze for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Pad","synthetic":true,"types":[]},{"text":"impl Freeze for Numeric","synthetic":true,"types":[]},{"text":"impl Freeze for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Freeze for Fixed","synthetic":true,"types":[]},{"text":"impl Freeze for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RoundingError","synthetic":true,"types":[]},{"text":"impl Freeze for Weekday","synthetic":true,"types":[]},{"text":"impl Freeze for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Freeze for Month","synthetic":true,"types":[]},{"text":"impl Freeze for ParseMonthError","synthetic":true,"types":[]}];
implementors["comfy_table"] = [{"text":"impl Freeze for Cell","synthetic":true,"types":[]},{"text":"impl Freeze for Column","synthetic":true,"types":[]},{"text":"impl Freeze for Row","synthetic":true,"types":[]},{"text":"impl Freeze for ContentArrangement","synthetic":true,"types":[]},{"text":"impl Freeze for TableComponent","synthetic":true,"types":[]},{"text":"impl Freeze for CellAlignment","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnConstraint","synthetic":true,"types":[]},{"text":"impl Freeze for Table","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Freeze for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl Freeze for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TrySelectError","synthetic":true,"types":[]},{"text":"impl Freeze for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Freeze for TryReadyError","synthetic":true,"types":[]},{"text":"impl Freeze for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Freeze for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Stealer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Injector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; Freeze for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Atomic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Freeze for Owned&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; Freeze for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Collector","synthetic":true,"types":[]},{"text":"impl Freeze for LocalHandle","synthetic":true,"types":[]},{"text":"impl Freeze for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; !Freeze for ArrayQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SegQueue&lt;T&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T&gt; !Freeze for AtomicCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Freeze for Backoff","synthetic":true,"types":[]},{"text":"impl Freeze for Parker","synthetic":true,"types":[]},{"text":"impl Freeze for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ShardedLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Freeze for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Freeze for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; Freeze for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]}];
implementors["crossterm"] = [{"text":"impl Freeze for MoveTo","synthetic":true,"types":[]},{"text":"impl Freeze for MoveToNextLine","synthetic":true,"types":[]},{"text":"impl Freeze for MoveToPreviousLine","synthetic":true,"types":[]},{"text":"impl Freeze for MoveToColumn","synthetic":true,"types":[]},{"text":"impl Freeze for MoveUp","synthetic":true,"types":[]},{"text":"impl Freeze for MoveRight","synthetic":true,"types":[]},{"text":"impl Freeze for MoveDown","synthetic":true,"types":[]},{"text":"impl Freeze for MoveLeft","synthetic":true,"types":[]},{"text":"impl Freeze for SavePosition","synthetic":true,"types":[]},{"text":"impl Freeze for RestorePosition","synthetic":true,"types":[]},{"text":"impl Freeze for Hide","synthetic":true,"types":[]},{"text":"impl Freeze for Show","synthetic":true,"types":[]},{"text":"impl Freeze for EnableBlinking","synthetic":true,"types":[]},{"text":"impl Freeze for DisableBlinking","synthetic":true,"types":[]},{"text":"impl Freeze for EnableMouseCapture","synthetic":true,"types":[]},{"text":"impl Freeze for DisableMouseCapture","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for MouseEvent","synthetic":true,"types":[]},{"text":"impl Freeze for MouseEventKind","synthetic":true,"types":[]},{"text":"impl Freeze for MouseButton","synthetic":true,"types":[]},{"text":"impl Freeze for KeyModifiers","synthetic":true,"types":[]},{"text":"impl Freeze for KeyEvent","synthetic":true,"types":[]},{"text":"impl Freeze for KeyCode","synthetic":true,"types":[]},{"text":"impl Freeze for Attributes","synthetic":true,"types":[]},{"text":"impl Freeze for ContentStyle","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for StyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for Colored","synthetic":true,"types":[]},{"text":"impl Freeze for Colors","synthetic":true,"types":[]},{"text":"impl Freeze for SetForegroundColor","synthetic":true,"types":[]},{"text":"impl Freeze for SetBackgroundColor","synthetic":true,"types":[]},{"text":"impl Freeze for SetColors","synthetic":true,"types":[]},{"text":"impl Freeze for SetAttribute","synthetic":true,"types":[]},{"text":"impl Freeze for SetAttributes","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for PrintStyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ResetColor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Print&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DisableLineWrap","synthetic":true,"types":[]},{"text":"impl Freeze for EnableLineWrap","synthetic":true,"types":[]},{"text":"impl Freeze for EnterAlternateScreen","synthetic":true,"types":[]},{"text":"impl Freeze for LeaveAlternateScreen","synthetic":true,"types":[]},{"text":"impl Freeze for ClearType","synthetic":true,"types":[]},{"text":"impl Freeze for ScrollUp","synthetic":true,"types":[]},{"text":"impl Freeze for ScrollDown","synthetic":true,"types":[]},{"text":"impl Freeze for Clear","synthetic":true,"types":[]},{"text":"impl Freeze for SetSize","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetTitle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]}];
implementors["csv"] = [{"text":"impl Freeze for ByteRecord","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for ByteRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DeserializeError","synthetic":true,"types":[]},{"text":"impl Freeze for DeserializeErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Freeze for DeserializeRecordsIntoIter&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R, D&gt; Freeze for DeserializeRecordsIter&lt;'r, R, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for StringRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; Freeze for StringRecordsIter&lt;'r, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ByteRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; Freeze for ByteRecordsIter&lt;'r, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StringRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for StringRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for WriterBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Terminator","synthetic":true,"types":[]},{"text":"impl Freeze for Trim","synthetic":true,"types":[]}];
implementors["csv_core"] = [{"text":"impl Freeze for Reader","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ReadFieldResult","synthetic":true,"types":[]},{"text":"impl Freeze for ReadFieldNoCopyResult","synthetic":true,"types":[]},{"text":"impl Freeze for ReadRecordResult","synthetic":true,"types":[]},{"text":"impl Freeze for ReadRecordNoCopyResult","synthetic":true,"types":[]},{"text":"impl Freeze for WriterBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for WriteResult","synthetic":true,"types":[]},{"text":"impl Freeze for Writer","synthetic":true,"types":[]},{"text":"impl Freeze for Terminator","synthetic":true,"types":[]},{"text":"impl Freeze for QuoteStyle","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Freeze for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fast_float"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["flatbuffers"] = [{"text":"impl&lt;'fbb&gt; Freeze for FlatBufferBuilder&lt;'fbb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FollowStart&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TableFinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl Freeze for TableUnfinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl Freeze for UnionWIPOffset","synthetic":true,"types":[]},{"text":"impl Freeze for VTableWIPOffset","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for WIPOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ForwardsUOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ForwardsVOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BackwardsSOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SkipSizePrefix&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SkipRootOffset&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FileIdentifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SkipFileIdentifier&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Table&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Vector&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for VectorIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorTraceDetail","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidFlatbuffer","synthetic":true,"types":[]},{"text":"impl Freeze for VerifierOptions","synthetic":true,"types":[]},{"text":"impl&lt;'opts, 'buf&gt; Freeze for Verifier&lt;'opts, 'buf&gt;","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Freeze for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for GzHeader","synthetic":true,"types":[]},{"text":"impl Freeze for GzBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Compress","synthetic":true,"types":[]},{"text":"impl Freeze for Decompress","synthetic":true,"types":[]},{"text":"impl Freeze for FlushCompress","synthetic":true,"types":[]},{"text":"impl Freeze for FlushDecompress","synthetic":true,"types":[]},{"text":"impl Freeze for DecompressError","synthetic":true,"types":[]},{"text":"impl Freeze for CompressError","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Freeze for Bucket&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawTable&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for RawDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for RawIterHash&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawParIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RawIntoParIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for RawParDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for ParIter&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for ParKeys&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for ParValues&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for ParIterMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for ParValuesMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for IntoParIter&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for ParDrain&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for IntoParIter&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for ParDrain&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for ParIter&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for ParDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for ParSymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for ParIntersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for ParUnion&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Freeze for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawOccupiedEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Drain&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Freeze for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryReserveError","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Freeze for FromHexError","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Freeze for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Freeze for SymmetricDifference&lt;'a, T, S1, S2&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, Pred&gt; Freeze for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Freeze for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiProduct&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Freeze for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Freeze for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Freeze for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunk&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Freeze for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !Freeze for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Group&lt;'a, K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Freeze for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Freeze for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Freeze for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Freeze for ErrorCode","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Freeze for statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for max_align_t","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for statfs","synthetic":true,"types":[]},{"text":"impl Freeze for flock","synthetic":true,"types":[]},{"text":"impl Freeze for flock64","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for stack_t","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for stat64","synthetic":true,"types":[]},{"text":"impl Freeze for statfs64","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs64","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Freeze for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for user","synthetic":true,"types":[]},{"text":"impl Freeze for mcontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for ipc_perm","synthetic":true,"types":[]},{"text":"impl Freeze for shmid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for termios2","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Freeze for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for ucontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for sigset_t","synthetic":true,"types":[]},{"text":"impl Freeze for sysinfo","synthetic":true,"types":[]},{"text":"impl Freeze for msqid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for sem_t","synthetic":true,"types":[]},{"text":"impl Freeze for statx","synthetic":true,"types":[]},{"text":"impl Freeze for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for aiocb","synthetic":true,"types":[]},{"text":"impl Freeze for __exit_status","synthetic":true,"types":[]},{"text":"impl Freeze for __timeval","synthetic":true,"types":[]},{"text":"impl Freeze for glob64_t","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for termios","synthetic":true,"types":[]},{"text":"impl Freeze for mallinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Freeze for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlattr","synthetic":true,"types":[]},{"text":"impl Freeze for rtentry","synthetic":true,"types":[]},{"text":"impl Freeze for timex","synthetic":true,"types":[]},{"text":"impl Freeze for ntptimeval","synthetic":true,"types":[]},{"text":"impl Freeze for regex_t","synthetic":true,"types":[]},{"text":"impl Freeze for utmpx","synthetic":true,"types":[]},{"text":"impl Freeze for fpos64_t","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit64","synthetic":true,"types":[]},{"text":"impl Freeze for glob_t","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for spwd","synthetic":true,"types":[]},{"text":"impl Freeze for dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Freeze for itimerspec","synthetic":true,"types":[]},{"text":"impl Freeze for fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for packet_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Freeze for if_nameindex","synthetic":true,"types":[]},{"text":"impl Freeze for msginfo","synthetic":true,"types":[]},{"text":"impl Freeze for sembuf","synthetic":true,"types":[]},{"text":"impl Freeze for input_event","synthetic":true,"types":[]},{"text":"impl Freeze for input_id","synthetic":true,"types":[]},{"text":"impl Freeze for input_absinfo","synthetic":true,"types":[]},{"text":"impl Freeze for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Freeze for input_mask","synthetic":true,"types":[]},{"text":"impl Freeze for ff_replay","synthetic":true,"types":[]},{"text":"impl Freeze for ff_trigger","synthetic":true,"types":[]},{"text":"impl Freeze for ff_envelope","synthetic":true,"types":[]},{"text":"impl Freeze for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_effect","synthetic":true,"types":[]},{"text":"impl Freeze for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for ucred","synthetic":true,"types":[]},{"text":"impl Freeze for mntent","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for arpd_request","synthetic":true,"types":[]},{"text":"impl Freeze for inotify_event","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_response","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Freeze for regmatch_t","synthetic":true,"types":[]},{"text":"impl Freeze for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Freeze for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Freeze for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Freeze for can_filter","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for dirent64","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Freeze for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Freeze for mq_attr","synthetic":true,"types":[]},{"text":"impl Freeze for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for can_frame","synthetic":true,"types":[]},{"text":"impl Freeze for canfd_frame","synthetic":true,"types":[]},{"text":"impl Freeze for timezone","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for sched_param","synthetic":true,"types":[]},{"text":"impl Freeze for Dl_info","synthetic":true,"types":[]},{"text":"impl Freeze for lconv","synthetic":true,"types":[]},{"text":"impl Freeze for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for ifaddrs","synthetic":true,"types":[]},{"text":"impl Freeze for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq_old","synthetic":true,"types":[]},{"text":"impl Freeze for arphdr","synthetic":true,"types":[]},{"text":"impl Freeze for mmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for epoll_event","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for utsname","synthetic":true,"types":[]},{"text":"impl Freeze for sigevent","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]},{"text":"impl Freeze for group","synthetic":true,"types":[]},{"text":"impl Freeze for utimbuf","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit","synthetic":true,"types":[]},{"text":"impl Freeze for rusage","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for itimerval","synthetic":true,"types":[]},{"text":"impl Freeze for tms","synthetic":true,"types":[]},{"text":"impl Freeze for servent","synthetic":true,"types":[]},{"text":"impl Freeze for protoent","synthetic":true,"types":[]},{"text":"impl Freeze for FILE","synthetic":true,"types":[]},{"text":"impl Freeze for fpos_t","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;R, T&gt; !Freeze for Mutex&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G&gt; !Freeze for RawReentrantMutex&lt;R, G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G, T&gt; !Freeze for ReentrantMutex&lt;R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Freeze for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T&gt; !Freeze for RwLock&lt;R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Freeze for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GuardSend","synthetic":true,"types":[]},{"text":"impl Freeze for GuardNoSend","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]}];
implementors["lz4"] = [{"text":"impl Freeze for LZ4Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EncoderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionMode","synthetic":true,"types":[]}];
implementors["lz4_sys"] = [{"text":"impl Freeze for LZ4FCompressionContext","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FDecompressionContext","synthetic":true,"types":[]},{"text":"impl Freeze for BlockSize","synthetic":true,"types":[]},{"text":"impl Freeze for BlockMode","synthetic":true,"types":[]},{"text":"impl Freeze for ContentChecksum","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FFrameInfo","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FPreferences","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FCompressOptions","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4FDecompressOptions","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4StreamEncode","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4StreamDecode","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Freeze for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Freeze for MmapOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Mmap","synthetic":true,"types":[]},{"text":"impl Freeze for MmapMut","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Freeze for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Freeze for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Freeze for MinReset","synthetic":true,"types":[]},{"text":"impl Freeze for ZeroReset","synthetic":true,"types":[]},{"text":"impl Freeze for FullReset","synthetic":true,"types":[]},{"text":"impl Freeze for InflateState","synthetic":true,"types":[]},{"text":"impl Freeze for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for MZFlush","synthetic":true,"types":[]},{"text":"impl Freeze for MZStatus","synthetic":true,"types":[]},{"text":"impl Freeze for MZError","synthetic":true,"types":[]},{"text":"impl Freeze for DataFormat","synthetic":true,"types":[]},{"text":"impl Freeze for StreamResult","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Freeze for Interest","synthetic":true,"types":[]},{"text":"impl !Freeze for Poll","synthetic":true,"types":[]},{"text":"impl !Freeze for Registry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Sender","synthetic":true,"types":[]},{"text":"impl !Freeze for Receiver","synthetic":true,"types":[]},{"text":"impl Freeze for Token","synthetic":true,"types":[]},{"text":"impl Freeze for Waker","synthetic":true,"types":[]},{"text":"impl Freeze for Event","synthetic":true,"types":[]},{"text":"impl Freeze for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;A&gt; Freeze for OwnedRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, D&gt; Freeze for Axes&lt;'a, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for IndicesIter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for AxisChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for AxisChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for AxisIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for AxisIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for ExactChunks&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for ExactChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for ExactChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for ExactChunksMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for IndexedIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for IndexedIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for Iter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for IterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for Lanes&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for LanesIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for LanesIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for LanesMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Freeze for Windows&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ShapeError","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Slice","synthetic":true,"types":[]},{"text":"impl Freeze for SliceOrIndex","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, D&gt; Freeze for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Parts, D&gt; Freeze for Zip&lt;Parts, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parts: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AxisDescription","synthetic":true,"types":[]},{"text":"impl Freeze for Axis","synthetic":true,"types":[]},{"text":"impl&lt;I:&nbsp;?Sized&gt; Freeze for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IxDynImpl","synthetic":true,"types":[]},{"text":"impl&lt;S, D&gt; Freeze for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for OwnedArcRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RawViewRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for ViewRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Freeze for CowRepr&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Shape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for StrideShape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Freeze for Sign","synthetic":true,"types":[]},{"text":"impl Freeze for BigInt","synthetic":true,"types":[]},{"text":"impl Freeze for BigUint","synthetic":true,"types":[]},{"text":"impl Freeze for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Freeze for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Freeze for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Freeze for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Freeze for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Freeze for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ParseFloatError","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; Freeze for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["packed_simd_2"] = [{"text":"impl Freeze for m8","synthetic":true,"types":[]},{"text":"impl Freeze for m16","synthetic":true,"types":[]},{"text":"impl Freeze for m32","synthetic":true,"types":[]},{"text":"impl Freeze for m64","synthetic":true,"types":[]},{"text":"impl Freeze for m128","synthetic":true,"types":[]},{"text":"impl Freeze for msize","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Simd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as SimdArray&gt;::Tuple: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LexicographicallyOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Freeze for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl !Freeze for Condvar","synthetic":true,"types":[]},{"text":"impl Freeze for OnceState","synthetic":true,"types":[]},{"text":"impl !Freeze for Once","synthetic":true,"types":[]},{"text":"impl !Freeze for RawFairMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for RawMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for RawRwLock","synthetic":true,"types":[]},{"text":"impl Freeze for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Freeze for ParkResult","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkResult","synthetic":true,"types":[]},{"text":"impl Freeze for RequeueOp","synthetic":true,"types":[]},{"text":"impl Freeze for FilterOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnparkToken","synthetic":true,"types":[]},{"text":"impl Freeze for ParkToken","synthetic":true,"types":[]},{"text":"impl Freeze for SpinWait","synthetic":true,"types":[]}];
implementors["parquet"] = [{"text":"impl Freeze for ParquetError","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for LogicalType","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]},{"text":"impl Freeze for PageType","synthetic":true,"types":[]},{"text":"impl Freeze for SortOrder","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnOrder","synthetic":true,"types":[]},{"text":"impl Freeze for Int96","synthetic":true,"types":[]},{"text":"impl Freeze for ByteArray","synthetic":true,"types":[]},{"text":"impl Freeze for FixedLenByteArray","synthetic":true,"types":[]},{"text":"impl Freeze for Decimal","synthetic":true,"types":[]},{"text":"impl Freeze for BoolType","synthetic":true,"types":[]},{"text":"impl Freeze for Int32Type","synthetic":true,"types":[]},{"text":"impl Freeze for Int64Type","synthetic":true,"types":[]},{"text":"impl Freeze for Int96Type","synthetic":true,"types":[]},{"text":"impl Freeze for FloatType","synthetic":true,"types":[]},{"text":"impl Freeze for DoubleType","synthetic":true,"types":[]},{"text":"impl Freeze for ByteArrayType","synthetic":true,"types":[]},{"text":"impl Freeze for FixedLenByteArrayType","synthetic":true,"types":[]},{"text":"impl Freeze for PlainDecoderDetails","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PlainDecoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DictDecoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RleValueDecoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DeltaBitPackDecoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DeltaLengthByteArrayDecoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DeltaByteArrayDecoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PlainEncoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DictEncoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RleValueEncoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DeltaBitPackEncoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DeltaLengthByteArrayEncoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DeltaByteArrayEncoder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for MemTracker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Buffer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BufferPtr&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !Freeze for FileSource&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SliceableCursor","synthetic":true,"types":[]},{"text":"impl Freeze for InMemoryWriteableCursor","synthetic":true,"types":[]},{"text":"impl Freeze for ParquetFileArrowReader","synthetic":true,"types":[]},{"text":"impl Freeze for ParquetRecordBatchReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ArrowWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Page","synthetic":true,"types":[]},{"text":"impl Freeze for CompressedPage","synthetic":true,"types":[]},{"text":"impl Freeze for PageWriteSpec","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnReader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnReaderImpl&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnWriter","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ColumnWriterImpl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SnappyCodec","synthetic":true,"types":[]},{"text":"impl Freeze for GZipCodec","synthetic":true,"types":[]},{"text":"impl Freeze for BrotliCodec","synthetic":true,"types":[]},{"text":"impl Freeze for LZ4Codec","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTDCodec","synthetic":true,"types":[]},{"text":"impl Freeze for ParquetMetaData","synthetic":true,"types":[]},{"text":"impl Freeze for FileMetaData","synthetic":true,"types":[]},{"text":"impl Freeze for RowGroupMetaData","synthetic":true,"types":[]},{"text":"impl Freeze for RowGroupMetaDataBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnChunkMetaData","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnChunkMetaDataBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for WriterVersion","synthetic":true,"types":[]},{"text":"impl Freeze for WriterProperties","synthetic":true,"types":[]},{"text":"impl Freeze for WriterPropertiesBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for FilePageIterator","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for SerializedFileReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for SerializedRowGroupReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SerializedPageReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Statistics","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TypedStatistics&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for SerializedFileWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for SerializedRowGroupWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SerializedPageWriter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Row","synthetic":true,"types":[]},{"text":"impl Freeze for List","synthetic":true,"types":[]},{"text":"impl Freeze for Map","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for TreeBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Reader","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RowIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ReaderIter","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrimitiveTypeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for GroupTypeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BasicTypeInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnPath","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnDescriptor","synthetic":true,"types":[]},{"text":"impl Freeze for SchemaDescriptor","synthetic":true,"types":[]}];
implementors["parquet_format"] = [{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for ConvertedType","synthetic":true,"types":[]},{"text":"impl Freeze for FieldRepetitionType","synthetic":true,"types":[]},{"text":"impl Freeze for Encoding","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionCodec","synthetic":true,"types":[]},{"text":"impl Freeze for PageType","synthetic":true,"types":[]},{"text":"impl Freeze for BoundaryOrder","synthetic":true,"types":[]},{"text":"impl Freeze for Statistics","synthetic":true,"types":[]},{"text":"impl Freeze for StringType","synthetic":true,"types":[]},{"text":"impl Freeze for UUIDType","synthetic":true,"types":[]},{"text":"impl Freeze for MapType","synthetic":true,"types":[]},{"text":"impl Freeze for ListType","synthetic":true,"types":[]},{"text":"impl Freeze for EnumType","synthetic":true,"types":[]},{"text":"impl Freeze for DateType","synthetic":true,"types":[]},{"text":"impl Freeze for NullType","synthetic":true,"types":[]},{"text":"impl Freeze for DecimalType","synthetic":true,"types":[]},{"text":"impl Freeze for MilliSeconds","synthetic":true,"types":[]},{"text":"impl Freeze for MicroSeconds","synthetic":true,"types":[]},{"text":"impl Freeze for NanoSeconds","synthetic":true,"types":[]},{"text":"impl Freeze for TimeUnit","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampType","synthetic":true,"types":[]},{"text":"impl Freeze for TimeType","synthetic":true,"types":[]},{"text":"impl Freeze for IntType","synthetic":true,"types":[]},{"text":"impl Freeze for JsonType","synthetic":true,"types":[]},{"text":"impl Freeze for BsonType","synthetic":true,"types":[]},{"text":"impl Freeze for LogicalType","synthetic":true,"types":[]},{"text":"impl Freeze for SchemaElement","synthetic":true,"types":[]},{"text":"impl Freeze for DataPageHeader","synthetic":true,"types":[]},{"text":"impl Freeze for IndexPageHeader","synthetic":true,"types":[]},{"text":"impl Freeze for DictionaryPageHeader","synthetic":true,"types":[]},{"text":"impl Freeze for DataPageHeaderV2","synthetic":true,"types":[]},{"text":"impl Freeze for PageHeader","synthetic":true,"types":[]},{"text":"impl Freeze for KeyValue","synthetic":true,"types":[]},{"text":"impl Freeze for SortingColumn","synthetic":true,"types":[]},{"text":"impl Freeze for PageEncodingStats","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnMetaData","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnChunk","synthetic":true,"types":[]},{"text":"impl Freeze for RowGroup","synthetic":true,"types":[]},{"text":"impl Freeze for TypeDefinedOrder","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnOrder","synthetic":true,"types":[]},{"text":"impl Freeze for PageLocation","synthetic":true,"types":[]},{"text":"impl Freeze for OffsetIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnIndex","synthetic":true,"types":[]},{"text":"impl Freeze for FileMetaData","synthetic":true,"types":[]}];
implementors["polars_arrow"] = [{"text":"impl Freeze for BooleanBufferBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanArrayBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PrimitiveArrayBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for LargeStringBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for PolarsError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AlignedVec&lt;T&gt;","synthetic":true,"types":[]}];
implementors["polars_core"] = [{"text":"impl&lt;T&gt; Freeze for NoNull&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Node","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Arena&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DynamicZip&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumTakeRandomChunked&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumTakeRandomCont&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InitFold","synthetic":true,"types":[]},{"text":"impl Freeze for FillNoneStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for BooleanChunkedBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PrimitiveChunkedBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CategoricalChunkedBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8ChunkedBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8ChunkedBuilderCow","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ListPrimitiveChunkedBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ListUtf8ChunkedBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for ListBooleanChunkedBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanParIterManyChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanNoNullParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListParIterManyChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListNoNullParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumParIterSingleChunkReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumParIterSingleChunkNullCheckReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumParIterManyChunkReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumParIterManyChunkNullCheckReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumParIterSingleChunkReturnUnwrapped&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumParIterManyChunkReturnUnwrapped&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumParIterDispatcher&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumNoNullParIterDispatcher&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8ParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8ParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8ParIterManyChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8ParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8ParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8ParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8ParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8NoNullParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for SomeIterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumIterSingleChunk&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumIterSingleChunkNullCheck&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumIterManyChunk&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for NumIterManyChunkNullCheck&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8IterSingleChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8IterSingleChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8IterManyChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Utf8IterManyChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanIterSingleChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanIterSingleChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanIterManyChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BooleanIterManyChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListIterSingleChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListIterSingleChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListIterManyChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ListIterManyChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ObjectChunkedBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ObjectArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ChunkedArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for NoNull&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Type","synthetic":true,"types":[]},{"text":"impl Freeze for ListType","synthetic":true,"types":[]},{"text":"impl Freeze for CategoricalType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ObjectType&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for AnyValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DataType","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for Schema","synthetic":true,"types":[]},{"text":"impl Freeze for PolarsError","synthetic":true,"types":[]},{"text":"impl&lt;'df, 'selection_str&gt; Freeze for GroupBy&lt;'df, 'selection_str&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GroupByMethod","synthetic":true,"types":[]},{"text":"impl&lt;'df, 'selection_str&gt; Freeze for Pivot&lt;'df, 'selection_str&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PivotAgg","synthetic":true,"types":[]},{"text":"impl Freeze for JoinType","synthetic":true,"types":[]},{"text":"impl Freeze for SampleRule","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Row&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DataFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBatchIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Series","synthetic":true,"types":[]}];
implementors["polars_io"] = [{"text":"impl&lt;'a, W&gt; Freeze for CsvWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CsvEncoding","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for CsvReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for SequentialReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IPCReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for IPCWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for JsonReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ParquetReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ScanAggregation","synthetic":true,"types":[]}];
implementors["polars_lazy"] = [{"text":"impl Freeze for AggExpr","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for Operator","synthetic":true,"types":[]},{"text":"impl Freeze for When","synthetic":true,"types":[]},{"text":"impl Freeze for WhenThen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for LazyCsvReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for JoinOptions","synthetic":true,"types":[]},{"text":"impl Freeze for LazyFrame","synthetic":true,"types":[]},{"text":"impl Freeze for OptState","synthetic":true,"types":[]},{"text":"impl Freeze for LazyGroupBy","synthetic":true,"types":[]},{"text":"impl Freeze for PredicatePushDown","synthetic":true,"types":[]},{"text":"impl Freeze for ProjectionPushDown","synthetic":true,"types":[]},{"text":"impl Freeze for TypeCoercionRule","synthetic":true,"types":[]},{"text":"impl Freeze for StackOptimizer","synthetic":true,"types":[]},{"text":"impl Freeze for AAggExpr","synthetic":true,"types":[]},{"text":"impl Freeze for AExpr","synthetic":true,"types":[]},{"text":"impl Freeze for ALogicalPlan","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ALogicalPlanBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ScalarValue","synthetic":true,"types":[]},{"text":"impl Freeze for LogicalPlan","synthetic":true,"types":[]},{"text":"impl Freeze for LogicalPlanBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for CacheExec","synthetic":true,"types":[]},{"text":"impl Freeze for ParquetExec","synthetic":true,"types":[]},{"text":"impl Freeze for CsvExec","synthetic":true,"types":[]},{"text":"impl Freeze for FilterExec","synthetic":true,"types":[]},{"text":"impl Freeze for DataFrameExec","synthetic":true,"types":[]},{"text":"impl Freeze for StandardExec","synthetic":true,"types":[]},{"text":"impl Freeze for GroupByExec","synthetic":true,"types":[]},{"text":"impl Freeze for JoinExec","synthetic":true,"types":[]},{"text":"impl Freeze for StackExec","synthetic":true,"types":[]},{"text":"impl Freeze for SliceExec","synthetic":true,"types":[]},{"text":"impl Freeze for MeltExec","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralExpr","synthetic":true,"types":[]},{"text":"impl Freeze for BinaryExpr","synthetic":true,"types":[]},{"text":"impl Freeze for ColumnExpr","synthetic":true,"types":[]},{"text":"impl Freeze for SortExpr","synthetic":true,"types":[]},{"text":"impl Freeze for NotExpr","synthetic":true,"types":[]},{"text":"impl Freeze for AliasExpr","synthetic":true,"types":[]},{"text":"impl Freeze for IsNullExpr","synthetic":true,"types":[]},{"text":"impl Freeze for IsNotNullExpr","synthetic":true,"types":[]},{"text":"impl Freeze for AggQuantileExpr","synthetic":true,"types":[]},{"text":"impl Freeze for CastExpr","synthetic":true,"types":[]},{"text":"impl Freeze for TernaryExpr","synthetic":true,"types":[]},{"text":"impl Freeze for ApplyExpr","synthetic":true,"types":[]},{"text":"impl Freeze for WindowExpr","synthetic":true,"types":[]},{"text":"impl Freeze for SliceExpr","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultPlanner","synthetic":true,"types":[]},{"text":"impl Freeze for ExprVal","synthetic":true,"types":[]},{"text":"impl Freeze for PhysicalIOHelper","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Freeze for YesS3","synthetic":true,"types":[]},{"text":"impl Freeze for NoS3","synthetic":true,"types":[]},{"text":"impl Freeze for YesS4","synthetic":true,"types":[]},{"text":"impl Freeze for NoS4","synthetic":true,"types":[]},{"text":"impl Freeze for YesA1","synthetic":true,"types":[]},{"text":"impl Freeze for NoA1","synthetic":true,"types":[]},{"text":"impl Freeze for YesA2","synthetic":true,"types":[]},{"text":"impl Freeze for NoA2","synthetic":true,"types":[]},{"text":"impl Freeze for YesNI","synthetic":true,"types":[]},{"text":"impl Freeze for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Freeze for SseMachine&lt;S3, S4, NI&gt;","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Freeze for Avx2Machine&lt;NI&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for vec128_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec256_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl Freeze for TokenStream","synthetic":true,"types":[]},{"text":"impl Freeze for LexError","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for TokenTree","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Delimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Punct","synthetic":true,"types":[]},{"text":"impl Freeze for Spacing","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for BernoulliError","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Cauchy","synthetic":true,"types":[]},{"text":"impl Freeze for Dirichlet","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl Freeze for Exp","synthetic":true,"types":[]},{"text":"impl Freeze for Gamma","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquared","synthetic":true,"types":[]},{"text":"impl Freeze for FisherF","synthetic":true,"types":[]},{"text":"impl Freeze for StudentT","synthetic":true,"types":[]},{"text":"impl Freeze for Beta","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for LogNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Pareto","synthetic":true,"types":[]},{"text":"impl Freeze for Poisson","synthetic":true,"types":[]},{"text":"impl Freeze for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UniformDuration","synthetic":true,"types":[]},{"text":"impl Freeze for UnitCircle","synthetic":true,"types":[]},{"text":"impl Freeze for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Freeze for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WeightedError","synthetic":true,"types":[]},{"text":"impl Freeze for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Freeze for Open01","synthetic":true,"types":[]},{"text":"impl Freeze for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Freeze for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Freeze for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EntropyRng","synthetic":true,"types":[]},{"text":"impl Freeze for StepRng","synthetic":true,"types":[]},{"text":"impl Freeze for StdRng","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadRng","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Freeze for SliceChooseIter&lt;'a, S, T&gt;","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Freeze for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OsRng","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl&lt;W&gt; Freeze for WeightedAliasIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Cauchy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Dirichlet&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Exp&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Gamma&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for ChiSquared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for FisherF&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for FisherFError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for StudentT&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Beta&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BetaError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for InverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Normal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for LogNormal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for NormalInverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Pareto&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Pert&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PertError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Poisson&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Triangular&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TriangularError","synthetic":true,"types":[]},{"text":"impl Freeze for UnitBall","synthetic":true,"types":[]},{"text":"impl Freeze for UnitCircle","synthetic":true,"types":[]},{"text":"impl Freeze for UnitDisc","synthetic":true,"types":[]},{"text":"impl Freeze for UnitSphere","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Weibull&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Empty&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Freeze for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Freeze for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Freeze for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Freeze for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Freeze for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Freeze for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Freeze for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Freeze for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Freeze for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Freeze for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Freeze for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Freeze for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Freeze for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; !Freeze for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPool","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for ThreadPoolBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Configuration","synthetic":true,"types":[]},{"text":"impl Freeze for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;T, S&gt; Freeze for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Freeze for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for WithComments","synthetic":true,"types":[]},{"text":"impl Freeze for Comment","synthetic":true,"types":[]},{"text":"impl Freeze for Ast","synthetic":true,"types":[]},{"text":"impl Freeze for Alternation","synthetic":true,"types":[]},{"text":"impl Freeze for Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerl","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAscii","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSet","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for Assertion","synthetic":true,"types":[]},{"text":"impl Freeze for AssertionKind","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureName","synthetic":true,"types":[]},{"text":"impl Freeze for SetFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItem","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Literals","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Translator","synthetic":true,"types":[]},{"text":"impl Freeze for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Hir","synthetic":true,"types":[]},{"text":"impl Freeze for HirKind","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for WordBoundary","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Range","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequences","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Freeze for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Freeze for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UnitDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoolDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CharDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for StrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for StringDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for CowStrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Freeze for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Freeze for Impossible&lt;Ok, Error&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Freeze for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Freeze for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Freeze for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CharEscape","synthetic":true,"types":[]},{"text":"impl Freeze for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Serializer","synthetic":true,"types":[]},{"text":"impl Freeze for Number","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl Freeze for Signals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Pending&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Forever&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Freeze for SigId","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl Freeze for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["snap"] = [{"text":"impl Freeze for Encoder","synthetic":true,"types":[]},{"text":"impl Freeze for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FrameDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for FrameEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for FrameEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["strum"] = [{"text":"impl Freeze for ParseError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Freeze for Underscore","synthetic":true,"types":[]},{"text":"impl Freeze for Abstract","synthetic":true,"types":[]},{"text":"impl Freeze for As","synthetic":true,"types":[]},{"text":"impl Freeze for Async","synthetic":true,"types":[]},{"text":"impl Freeze for Auto","synthetic":true,"types":[]},{"text":"impl Freeze for Await","synthetic":true,"types":[]},{"text":"impl Freeze for Become","synthetic":true,"types":[]},{"text":"impl Freeze for Box","synthetic":true,"types":[]},{"text":"impl Freeze for Break","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for Continue","synthetic":true,"types":[]},{"text":"impl Freeze for Crate","synthetic":true,"types":[]},{"text":"impl Freeze for Default","synthetic":true,"types":[]},{"text":"impl Freeze for Do","synthetic":true,"types":[]},{"text":"impl Freeze for Dyn","synthetic":true,"types":[]},{"text":"impl Freeze for Else","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl Freeze for Extern","synthetic":true,"types":[]},{"text":"impl Freeze for Final","synthetic":true,"types":[]},{"text":"impl Freeze for Fn","synthetic":true,"types":[]},{"text":"impl Freeze for For","synthetic":true,"types":[]},{"text":"impl Freeze for If","synthetic":true,"types":[]},{"text":"impl Freeze for Impl","synthetic":true,"types":[]},{"text":"impl Freeze for In","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for Mod","synthetic":true,"types":[]},{"text":"impl Freeze for Move","synthetic":true,"types":[]},{"text":"impl Freeze for Mut","synthetic":true,"types":[]},{"text":"impl Freeze for Override","synthetic":true,"types":[]},{"text":"impl Freeze for Priv","synthetic":true,"types":[]},{"text":"impl Freeze for Pub","synthetic":true,"types":[]},{"text":"impl Freeze for Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Return","synthetic":true,"types":[]},{"text":"impl Freeze for SelfType","synthetic":true,"types":[]},{"text":"impl Freeze for SelfValue","synthetic":true,"types":[]},{"text":"impl Freeze for Static","synthetic":true,"types":[]},{"text":"impl Freeze for Struct","synthetic":true,"types":[]},{"text":"impl Freeze for Super","synthetic":true,"types":[]},{"text":"impl Freeze for Trait","synthetic":true,"types":[]},{"text":"impl Freeze for Try","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Typeof","synthetic":true,"types":[]},{"text":"impl Freeze for Union","synthetic":true,"types":[]},{"text":"impl Freeze for Unsafe","synthetic":true,"types":[]},{"text":"impl Freeze for Unsized","synthetic":true,"types":[]},{"text":"impl Freeze for Use","synthetic":true,"types":[]},{"text":"impl Freeze for Virtual","synthetic":true,"types":[]},{"text":"impl Freeze for Where","synthetic":true,"types":[]},{"text":"impl Freeze for While","synthetic":true,"types":[]},{"text":"impl Freeze for Yield","synthetic":true,"types":[]},{"text":"impl Freeze for Add","synthetic":true,"types":[]},{"text":"impl Freeze for AddEq","synthetic":true,"types":[]},{"text":"impl Freeze for And","synthetic":true,"types":[]},{"text":"impl Freeze for AndAnd","synthetic":true,"types":[]},{"text":"impl Freeze for AndEq","synthetic":true,"types":[]},{"text":"impl Freeze for At","synthetic":true,"types":[]},{"text":"impl Freeze for Bang","synthetic":true,"types":[]},{"text":"impl Freeze for Caret","synthetic":true,"types":[]},{"text":"impl Freeze for CaretEq","synthetic":true,"types":[]},{"text":"impl Freeze for Colon","synthetic":true,"types":[]},{"text":"impl Freeze for Colon2","synthetic":true,"types":[]},{"text":"impl Freeze for Comma","synthetic":true,"types":[]},{"text":"impl Freeze for Div","synthetic":true,"types":[]},{"text":"impl Freeze for DivEq","synthetic":true,"types":[]},{"text":"impl Freeze for Dollar","synthetic":true,"types":[]},{"text":"impl Freeze for Dot","synthetic":true,"types":[]},{"text":"impl Freeze for Dot2","synthetic":true,"types":[]},{"text":"impl Freeze for Dot3","synthetic":true,"types":[]},{"text":"impl Freeze for DotDotEq","synthetic":true,"types":[]},{"text":"impl Freeze for Eq","synthetic":true,"types":[]},{"text":"impl Freeze for EqEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ge","synthetic":true,"types":[]},{"text":"impl Freeze for Gt","synthetic":true,"types":[]},{"text":"impl Freeze for Le","synthetic":true,"types":[]},{"text":"impl Freeze for Lt","synthetic":true,"types":[]},{"text":"impl Freeze for MulEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ne","synthetic":true,"types":[]},{"text":"impl Freeze for Or","synthetic":true,"types":[]},{"text":"impl Freeze for OrEq","synthetic":true,"types":[]},{"text":"impl Freeze for OrOr","synthetic":true,"types":[]},{"text":"impl Freeze for Pound","synthetic":true,"types":[]},{"text":"impl Freeze for Question","synthetic":true,"types":[]},{"text":"impl Freeze for RArrow","synthetic":true,"types":[]},{"text":"impl Freeze for LArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Rem","synthetic":true,"types":[]},{"text":"impl Freeze for RemEq","synthetic":true,"types":[]},{"text":"impl Freeze for FatArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Semi","synthetic":true,"types":[]},{"text":"impl Freeze for Shl","synthetic":true,"types":[]},{"text":"impl Freeze for ShlEq","synthetic":true,"types":[]},{"text":"impl Freeze for Shr","synthetic":true,"types":[]},{"text":"impl Freeze for ShrEq","synthetic":true,"types":[]},{"text":"impl Freeze for Star","synthetic":true,"types":[]},{"text":"impl Freeze for Sub","synthetic":true,"types":[]},{"text":"impl Freeze for SubEq","synthetic":true,"types":[]},{"text":"impl Freeze for Tilde","synthetic":true,"types":[]},{"text":"impl Freeze for Brace","synthetic":true,"types":[]},{"text":"impl Freeze for Bracket","synthetic":true,"types":[]},{"text":"impl Freeze for Paren","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for AttrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Meta","synthetic":true,"types":[]},{"text":"impl Freeze for MetaList","synthetic":true,"types":[]},{"text":"impl Freeze for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Freeze for NestedMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for Fields","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for Visibility","synthetic":true,"types":[]},{"text":"impl Freeze for VisPublic","synthetic":true,"types":[]},{"text":"impl Freeze for VisCrate","synthetic":true,"types":[]},{"text":"impl Freeze for VisRestricted","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for ExprArray","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssign","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAsync","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAwait","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBinary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBox","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBreak","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCast","synthetic":true,"types":[]},{"text":"impl Freeze for ExprClosure","synthetic":true,"types":[]},{"text":"impl Freeze for ExprContinue","synthetic":true,"types":[]},{"text":"impl Freeze for ExprField","synthetic":true,"types":[]},{"text":"impl Freeze for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIf","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLet","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLit","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMatch","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprParen","synthetic":true,"types":[]},{"text":"impl Freeze for ExprPath","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRange","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReference","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ExprStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTry","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTuple","synthetic":true,"types":[]},{"text":"impl Freeze for ExprType","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Freeze for ExprWhile","synthetic":true,"types":[]},{"text":"impl Freeze for ExprYield","synthetic":true,"types":[]},{"text":"impl Freeze for Member","synthetic":true,"types":[]},{"text":"impl Freeze for Index","synthetic":true,"types":[]},{"text":"impl Freeze for Generics","synthetic":true,"types":[]},{"text":"impl Freeze for GenericParam","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParam","synthetic":true,"types":[]},{"text":"impl Freeze for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Freeze for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBound","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Freeze for WhereClause","synthetic":true,"types":[]},{"text":"impl Freeze for WherePredicate","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateType","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateEq","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for Lit","synthetic":true,"types":[]},{"text":"impl Freeze for LitStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitByteStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitByte","synthetic":true,"types":[]},{"text":"impl Freeze for LitChar","synthetic":true,"types":[]},{"text":"impl Freeze for LitInt","synthetic":true,"types":[]},{"text":"impl Freeze for LitFloat","synthetic":true,"types":[]},{"text":"impl Freeze for LitBool","synthetic":true,"types":[]},{"text":"impl Freeze for StrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveInput","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for DataStruct","synthetic":true,"types":[]},{"text":"impl Freeze for DataEnum","synthetic":true,"types":[]},{"text":"impl Freeze for DataUnion","synthetic":true,"types":[]},{"text":"impl Freeze for BinOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnOp","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for TypeArray","synthetic":true,"types":[]},{"text":"impl Freeze for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Freeze for TypeGroup","synthetic":true,"types":[]},{"text":"impl Freeze for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Freeze for TypeInfer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TypeNever","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParen","synthetic":true,"types":[]},{"text":"impl Freeze for TypePath","synthetic":true,"types":[]},{"text":"impl Freeze for TypePtr","synthetic":true,"types":[]},{"text":"impl Freeze for TypeReference","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSlice","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTuple","synthetic":true,"types":[]},{"text":"impl Freeze for Abi","synthetic":true,"types":[]},{"text":"impl Freeze for BareFnArg","synthetic":true,"types":[]},{"text":"impl Freeze for Variadic","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnType","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathSegment","synthetic":true,"types":[]},{"text":"impl Freeze for PathArguments","synthetic":true,"types":[]},{"text":"impl Freeze for GenericArgument","synthetic":true,"types":[]},{"text":"impl Freeze for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Binding","synthetic":true,"types":[]},{"text":"impl Freeze for Constraint","synthetic":true,"types":[]},{"text":"impl Freeze for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for QSelf","synthetic":true,"types":[]},{"text":"impl Freeze for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Punctuated&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Freeze for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nothing","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Freeze for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["threadpool"] = [{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl !Freeze for ThreadPool","synthetic":true,"types":[]}];
implementors["thrift"] = [{"text":"impl&lt;T&gt; Freeze for TBinaryInputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TBinaryInputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TBinaryOutputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TBinaryOutputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TCompactInputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TCompactInputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TCompactOutputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TCompactOutputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Freeze for TMultiplexedOutputProtocol&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TStoredInputProtocol&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TMessageIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for TStructIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for TFieldIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for TListIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for TSetIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for TMapIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for TMessageType","synthetic":true,"types":[]},{"text":"impl Freeze for TType","synthetic":true,"types":[]},{"text":"impl !Freeze for TMultiplexedProcessor","synthetic":true,"types":[]},{"text":"impl&lt;PRC, RTF, IPF, WTF, OPF&gt; !Freeze for TServer&lt;PRC, RTF, IPF, WTF, OPF&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for TBufferedReadTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TBufferedReadTransportFactory","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for TBufferedWriteTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TBufferedWriteTransportFactory","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for TFramedReadTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TFramedReadTransportFactory","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for TFramedWriteTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TFramedWriteTransportFactory","synthetic":true,"types":[]},{"text":"impl Freeze for TBufferChannel","synthetic":true,"types":[]},{"text":"impl Freeze for TTcpChannel","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for ReadHalf&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for WriteHalf&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for TransportError","synthetic":true,"types":[]},{"text":"impl Freeze for TransportErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolError","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for ApplicationError","synthetic":true,"types":[]},{"text":"impl Freeze for ApplicationErrorKind","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Freeze for Timespec","synthetic":true,"types":[]},{"text":"impl Freeze for PreciseTime","synthetic":true,"types":[]},{"text":"impl Freeze for SteadyTime","synthetic":true,"types":[]},{"text":"impl Freeze for Tm","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Freeze for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl Freeze for GraphemeIncomplete","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["zstd"] = [{"text":"impl Freeze for Compressor","synthetic":true,"types":[]},{"text":"impl Freeze for Decompressor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EncoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DecoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for Decoder&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for Encoder&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for Encoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for Decoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for AutoFinishEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Freeze for Reader&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, D&gt; Freeze for Writer&lt;W, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NoOp","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Decoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Encoder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl&lt;'a&gt; Freeze for CCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CDict&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DDict&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for InBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OutBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for FrameFormat","synthetic":true,"types":[]},{"text":"impl Freeze for CParameter","synthetic":true,"types":[]},{"text":"impl Freeze for DParameter","synthetic":true,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Freeze for ZSTD_CCtx_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_DCtx_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_strategy","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_cParameter","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_bounds","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_ResetDirective","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_dParameter","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_inBuffer_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_outBuffer_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_EndDirective","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_CDict_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_DDict_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_CCtx_params_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_Sequence","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_compressionParameters","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_frameParameters","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_parameters","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_dictContentType_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_dictLoadMethod_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_format_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_forceIgnoreChecksum_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_dictAttachPref_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_literalCompressionMode_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_sequenceFormat_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_customMem","synthetic":true,"types":[]},{"text":"impl Freeze for POOL_ctx_s","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_frameProgression","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_frameType_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_frameHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTD_nextInputType_e","synthetic":true,"types":[]},{"text":"impl Freeze for ZDICT_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for ZDICT_cover_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for ZDICT_fastCover_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for ZDICT_legacy_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for __locale_struct","synthetic":true,"types":[]},{"text":"impl Freeze for ZSTDMT_CCtx_s","synthetic":true,"types":[]},{"text":"impl Freeze for __locale_data","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()