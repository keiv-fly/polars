(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Copy for Adler32","synthetic":false,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl Copy for MatchKind","synthetic":false,"types":[]},{"text":"impl Copy for MatchKind","synthetic":false,"types":[]}];
implementors["alloc_stdlib"] = [{"text":"impl Copy for StandardAlloc","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = u8&gt; + Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Index: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CapacityError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["arrow"] = [{"text":"impl Copy for SortOptions","synthetic":false,"types":[]},{"text":"impl Copy for Block","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Footer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for CompressionType","synthetic":false,"types":[]},{"text":"impl Copy for BodyCompressionMethod","synthetic":false,"types":[]},{"text":"impl Copy for MessageHeader","synthetic":false,"types":[]},{"text":"impl Copy for FieldNode","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for BodyCompression&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for RecordBatch&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for DictionaryBatch&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Message&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for MetadataVersion","synthetic":false,"types":[]},{"text":"impl Copy for Feature","synthetic":false,"types":[]},{"text":"impl Copy for UnionMode","synthetic":false,"types":[]},{"text":"impl Copy for Precision","synthetic":false,"types":[]},{"text":"impl Copy for DateUnit","synthetic":false,"types":[]},{"text":"impl Copy for TimeUnit","synthetic":false,"types":[]},{"text":"impl Copy for IntervalUnit","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for DictionaryKind","synthetic":false,"types":[]},{"text":"impl Copy for Endianness","synthetic":false,"types":[]},{"text":"impl Copy for Buffer","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Null&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Struct_&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for List&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for LargeList&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for FixedSizeList&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Map&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Union&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Int&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for FloatingPoint&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Utf8&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Binary&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for LargeUtf8&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for LargeBinary&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for FixedSizeBinary&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Bool&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Decimal&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Date&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Time&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Timestamp&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Interval&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Duration&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for KeyValue&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for DictionaryEncoding&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Field&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Schema&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SparseMatrixCompressedAxis","synthetic":false,"types":[]},{"text":"impl Copy for SparseTensorIndex","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for SparseTensorIndexCOO&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for SparseMatrixIndexCSX&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for SparseTensorIndexCSF&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for SparseTensor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for TensorDim&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Tensor&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Copy for CharacterSet","synthetic":false,"types":[]},{"text":"impl Copy for Config","synthetic":false,"types":[]}];
implementors["brotli"] = [{"text":"impl&lt;'a&gt; Copy for InputReference&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for InputPair&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for BrotliDistanceParams","synthetic":false,"types":[]},{"text":"impl Copy for Command","synthetic":false,"types":[]},{"text":"impl Copy for BlockTypeCodeCalculator","synthetic":false,"types":[]},{"text":"impl Copy for RecoderState","synthetic":false,"types":[]},{"text":"impl Copy for HuffmanTree","synthetic":false,"types":[]},{"text":"impl&lt;AllocU8:&nbsp;Allocator&lt;u8&gt; + Copy, AllocU16:&nbsp;Allocator&lt;u16&gt; + Copy, AllocI32:&nbsp;Allocator&lt;i32&gt; + Copy, AllocU32:&nbsp;Allocator&lt;u32&gt; + Copy, AllocU64:&nbsp;Allocator&lt;u64&gt; + Copy, AllocCommand:&nbsp;Allocator&lt;Command&gt; + Copy, AllocFloatX:&nbsp;Allocator&lt;floatX&gt; + Copy, AllocV8:&nbsp;Allocator&lt;v8&gt; + Copy, AllocS16:&nbsp;Allocator&lt;s16&gt; + Copy, AllocPDF:&nbsp;Allocator&lt;PDF&gt; + Copy, AllocStaticCommand:&nbsp;Allocator&lt;StaticCommand&gt; + Copy, AllocHistogramLiteral:&nbsp;Allocator&lt;HistogramLiteral&gt; + Copy, AllocHistogramCommand:&nbsp;Allocator&lt;HistogramCommand&gt; + Copy, AllocHistogramDistance:&nbsp;Allocator&lt;HistogramDistance&gt; + Copy, AllocHistogramPair:&nbsp;Allocator&lt;HistogramPair&gt; + Copy, AllocContextType:&nbsp;Allocator&lt;ContextType&gt; + Copy, AllocHuffmanTree:&nbsp;Allocator&lt;HuffmanTree&gt; + Copy, AllocZopfliNode:&nbsp;Allocator&lt;ZopfliNode&gt; + Copy&gt; Copy for CombiningAllocator&lt;AllocU8, AllocU16, AllocI32, AllocU32, AllocU64, AllocCommand, AllocFloatX, AllocV8, AllocS16, AllocPDF, AllocStaticCommand, AllocHistogramLiteral, AllocHistogramCommand, AllocHistogramDistance, AllocHistogramPair, AllocContextType, AllocHuffmanTree, AllocZopfliNode&gt;","synthetic":false,"types":[]},{"text":"impl Copy for DictWord","synthetic":false,"types":[]},{"text":"impl Copy for HistogramPair","synthetic":false,"types":[]},{"text":"impl Copy for ContextType","synthetic":false,"types":[]},{"text":"impl Copy for PosData","synthetic":false,"types":[]},{"text":"impl Copy for StartPosQueue","synthetic":false,"types":[]},{"text":"impl Copy for Union1","synthetic":false,"types":[]},{"text":"impl Copy for ZopfliNode","synthetic":false,"types":[]},{"text":"impl Copy for BrotliEncoderMode","synthetic":false,"types":[]},{"text":"impl Copy for BrotliHasherParams","synthetic":false,"types":[]},{"text":"impl Copy for H9Opts","synthetic":false,"types":[]},{"text":"impl Copy for CodeBlockState","synthetic":false,"types":[]},{"text":"impl Copy for BrotliEncoderStreamState","synthetic":false,"types":[]},{"text":"impl Copy for IsFirst","synthetic":false,"types":[]},{"text":"impl Copy for BrotliEncoderOperation","synthetic":false,"types":[]},{"text":"impl Copy for BucketPopIndex","synthetic":false,"types":[]},{"text":"impl Copy for BlockSwitch","synthetic":false,"types":[]},{"text":"impl Copy for LiteralBlockSwitch","synthetic":false,"types":[]},{"text":"impl Copy for LiteralPredictionModeNibble","synthetic":false,"types":[]},{"text":"impl&lt;SliceType:&nbsp;SliceWrapper&lt;u8&gt; + Clone + Copy&gt; Copy for PredictionModeContextMap&lt;SliceType&gt;","synthetic":false,"types":[]},{"text":"impl Copy for CopyCommand","synthetic":false,"types":[]},{"text":"impl Copy for DictCommand","synthetic":false,"types":[]},{"text":"impl&lt;SliceType:&nbsp;SliceWrapper&lt;u8&gt; + Clone + Copy&gt; Copy for FeatureFlagSliceType&lt;SliceType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;SliceType:&nbsp;SliceWrapper&lt;u8&gt; + Clone + Copy&gt; Copy for LiteralCommand&lt;SliceType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;SliceType:&nbsp;SliceWrapper&lt;u8&gt; + Clone + Copy&gt; Copy for Command&lt;SliceType&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SliceOffset","synthetic":false,"types":[]},{"text":"impl Copy for SpeedAndMax","synthetic":false,"types":[]},{"text":"impl Copy for PDF","synthetic":false,"types":[]},{"text":"impl Copy for BrotliEncoderParameter","synthetic":false,"types":[]},{"text":"impl Copy for BroCatliResult","synthetic":false,"types":[]},{"text":"impl Copy for BroccoliState","synthetic":false,"types":[]}];
implementors["brotli_decompressor"] = [{"text":"impl Copy for HuffmanCode","synthetic":false,"types":[]},{"text":"impl Copy for BrotliDecoderErrorCode","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FixedOffset","synthetic":false,"types":[]},{"text":"impl Copy for Local","synthetic":false,"types":[]},{"text":"impl Copy for Utc","synthetic":false,"types":[]},{"text":"impl Copy for NaiveDate","synthetic":false,"types":[]},{"text":"impl Copy for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Copy for IsoWeek","synthetic":false,"types":[]},{"text":"impl Copy for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Copy for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Copy for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Pad","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]},{"text":"impl Copy for RoundingError","synthetic":false,"types":[]},{"text":"impl Copy for Weekday","synthetic":false,"types":[]},{"text":"impl Copy for Month","synthetic":false,"types":[]}];
implementors["comfy_table"] = [{"text":"impl Copy for CellAlignment","synthetic":false,"types":[]},{"text":"impl Copy for ColumnConstraint","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RecvError","synthetic":false,"types":[]},{"text":"impl Copy for TryRecvError","synthetic":false,"types":[]},{"text":"impl Copy for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Copy for TrySelectError","synthetic":false,"types":[]},{"text":"impl Copy for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Copy for TryReadyError","synthetic":false,"types":[]},{"text":"impl Copy for ReadyTimeoutError","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Copy for Shared&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CachePadded&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossterm"] = [{"text":"impl Copy for MoveTo","synthetic":false,"types":[]},{"text":"impl Copy for MoveToNextLine","synthetic":false,"types":[]},{"text":"impl Copy for MoveToPreviousLine","synthetic":false,"types":[]},{"text":"impl Copy for MoveToColumn","synthetic":false,"types":[]},{"text":"impl Copy for MoveUp","synthetic":false,"types":[]},{"text":"impl Copy for MoveRight","synthetic":false,"types":[]},{"text":"impl Copy for MoveDown","synthetic":false,"types":[]},{"text":"impl Copy for MoveLeft","synthetic":false,"types":[]},{"text":"impl Copy for SavePosition","synthetic":false,"types":[]},{"text":"impl Copy for RestorePosition","synthetic":false,"types":[]},{"text":"impl Copy for Hide","synthetic":false,"types":[]},{"text":"impl Copy for Show","synthetic":false,"types":[]},{"text":"impl Copy for EnableBlinking","synthetic":false,"types":[]},{"text":"impl Copy for DisableBlinking","synthetic":false,"types":[]},{"text":"impl Copy for EnableMouseCapture","synthetic":false,"types":[]},{"text":"impl Copy for DisableMouseCapture","synthetic":false,"types":[]},{"text":"impl Copy for Event","synthetic":false,"types":[]},{"text":"impl Copy for MouseEvent","synthetic":false,"types":[]},{"text":"impl Copy for MouseEventKind","synthetic":false,"types":[]},{"text":"impl Copy for MouseButton","synthetic":false,"types":[]},{"text":"impl Copy for KeyModifiers","synthetic":false,"types":[]},{"text":"impl Copy for KeyEvent","synthetic":false,"types":[]},{"text":"impl Copy for KeyCode","synthetic":false,"types":[]},{"text":"impl Copy for Attributes","synthetic":false,"types":[]},{"text":"impl Copy for ContentStyle","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Copy + Display&gt; Copy for StyledContent&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Attribute","synthetic":false,"types":[]},{"text":"impl Copy for Color","synthetic":false,"types":[]},{"text":"impl Copy for Colored","synthetic":false,"types":[]},{"text":"impl Copy for Colors","synthetic":false,"types":[]},{"text":"impl Copy for SetForegroundColor","synthetic":false,"types":[]},{"text":"impl Copy for SetBackgroundColor","synthetic":false,"types":[]},{"text":"impl Copy for SetColors","synthetic":false,"types":[]},{"text":"impl Copy for SetAttribute","synthetic":false,"types":[]},{"text":"impl Copy for SetAttributes","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Copy + Display&gt; Copy for PrintStyledContent&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ResetColor","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Display&gt; Copy for Print&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for DisableLineWrap","synthetic":false,"types":[]},{"text":"impl Copy for EnableLineWrap","synthetic":false,"types":[]},{"text":"impl Copy for EnterAlternateScreen","synthetic":false,"types":[]},{"text":"impl Copy for LeaveAlternateScreen","synthetic":false,"types":[]},{"text":"impl Copy for ClearType","synthetic":false,"types":[]},{"text":"impl Copy for ScrollUp","synthetic":false,"types":[]},{"text":"impl Copy for ScrollDown","synthetic":false,"types":[]},{"text":"impl Copy for Clear","synthetic":false,"types":[]},{"text":"impl Copy for SetSize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for SetTitle&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["csv"] = [{"text":"impl Copy for QuoteStyle","synthetic":false,"types":[]},{"text":"impl Copy for Terminator","synthetic":false,"types":[]},{"text":"impl Copy for Trim","synthetic":false,"types":[]}];
implementors["csv_core"] = [{"text":"impl Copy for Terminator","synthetic":false,"types":[]},{"text":"impl Copy for QuoteStyle","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Copy, R:&nbsp;Copy&gt; Copy for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["fast_float"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["flatbuffers"] = [{"text":"impl Copy for TableFinishedWIPOffset","synthetic":false,"types":[]},{"text":"impl Copy for TableUnfinishedWIPOffset","synthetic":false,"types":[]},{"text":"impl Copy for UnionWIPOffset","synthetic":false,"types":[]},{"text":"impl Copy for VTableWIPOffset","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Copy for WIPOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Copy for ForwardsUOffset&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Table&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Copy for Vector&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Copy for FlushCompress","synthetic":false,"types":[]},{"text":"impl Copy for FlushDecompress","synthetic":false,"types":[]},{"text":"impl Copy for Status","synthetic":false,"types":[]},{"text":"impl Copy for Compression","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Copy for FromHexError","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Copy for ErrorCode","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Copy for DIR","synthetic":false,"types":[]},{"text":"impl Copy for group","synthetic":false,"types":[]},{"text":"impl Copy for utimbuf","synthetic":false,"types":[]},{"text":"impl Copy for timeval","synthetic":false,"types":[]},{"text":"impl Copy for timespec","synthetic":false,"types":[]},{"text":"impl Copy for rlimit","synthetic":false,"types":[]},{"text":"impl Copy for rusage","synthetic":false,"types":[]},{"text":"impl Copy for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Copy for hostent","synthetic":false,"types":[]},{"text":"impl Copy for iovec","synthetic":false,"types":[]},{"text":"impl Copy for pollfd","synthetic":false,"types":[]},{"text":"impl Copy for winsize","synthetic":false,"types":[]},{"text":"impl Copy for linger","synthetic":false,"types":[]},{"text":"impl Copy for sigval","synthetic":false,"types":[]},{"text":"impl Copy for itimerval","synthetic":false,"types":[]},{"text":"impl Copy for tms","synthetic":false,"types":[]},{"text":"impl Copy for servent","synthetic":false,"types":[]},{"text":"impl Copy for protoent","synthetic":false,"types":[]},{"text":"impl Copy for FILE","synthetic":false,"types":[]},{"text":"impl Copy for fpos_t","synthetic":false,"types":[]},{"text":"impl Copy for timezone","synthetic":false,"types":[]},{"text":"impl Copy for in_addr","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Copy for addrinfo","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Copy for fd_set","synthetic":false,"types":[]},{"text":"impl Copy for tm","synthetic":false,"types":[]},{"text":"impl Copy for sched_param","synthetic":false,"types":[]},{"text":"impl Copy for Dl_info","synthetic":false,"types":[]},{"text":"impl Copy for lconv","synthetic":false,"types":[]},{"text":"impl Copy for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for ifaddrs","synthetic":false,"types":[]},{"text":"impl Copy for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Copy for arpreq","synthetic":false,"types":[]},{"text":"impl Copy for arpreq_old","synthetic":false,"types":[]},{"text":"impl Copy for arphdr","synthetic":false,"types":[]},{"text":"impl Copy for mmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for epoll_event","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Copy for utsname","synthetic":false,"types":[]},{"text":"impl Copy for sigevent","synthetic":false,"types":[]},{"text":"impl Copy for fpos64_t","synthetic":false,"types":[]},{"text":"impl Copy for rlimit64","synthetic":false,"types":[]},{"text":"impl Copy for glob_t","synthetic":false,"types":[]},{"text":"impl Copy for passwd","synthetic":false,"types":[]},{"text":"impl Copy for spwd","synthetic":false,"types":[]},{"text":"impl Copy for dqblk","synthetic":false,"types":[]},{"text":"impl Copy for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Copy for itimerspec","synthetic":false,"types":[]},{"text":"impl Copy for fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for packet_mreq","synthetic":false,"types":[]},{"text":"impl Copy for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Copy for if_nameindex","synthetic":false,"types":[]},{"text":"impl Copy for msginfo","synthetic":false,"types":[]},{"text":"impl Copy for sembuf","synthetic":false,"types":[]},{"text":"impl Copy for input_event","synthetic":false,"types":[]},{"text":"impl Copy for input_id","synthetic":false,"types":[]},{"text":"impl Copy for input_absinfo","synthetic":false,"types":[]},{"text":"impl Copy for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Copy for input_mask","synthetic":false,"types":[]},{"text":"impl Copy for ff_replay","synthetic":false,"types":[]},{"text":"impl Copy for ff_trigger","synthetic":false,"types":[]},{"text":"impl Copy for ff_envelope","synthetic":false,"types":[]},{"text":"impl Copy for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Copy for ff_effect","synthetic":false,"types":[]},{"text":"impl Copy for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Copy for ucred","synthetic":false,"types":[]},{"text":"impl Copy for mntent","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Copy for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Copy for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for arpd_request","synthetic":false,"types":[]},{"text":"impl Copy for inotify_event","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_response","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Copy for regmatch_t","synthetic":false,"types":[]},{"text":"impl Copy for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Copy for __c_anonymous_sockaddr_can_tp","synthetic":false,"types":[]},{"text":"impl Copy for __c_anonymous_sockaddr_can_j1939","synthetic":false,"types":[]},{"text":"impl Copy for can_filter","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Copy for dirent","synthetic":false,"types":[]},{"text":"impl Copy for dirent64","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Copy for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Copy for mq_attr","synthetic":false,"types":[]},{"text":"impl Copy for __c_anonymous_sockaddr_can_can_addr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_can","synthetic":false,"types":[]},{"text":"impl Copy for statx","synthetic":false,"types":[]},{"text":"impl Copy for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Copy for aiocb","synthetic":false,"types":[]},{"text":"impl Copy for __exit_status","synthetic":false,"types":[]},{"text":"impl Copy for __timeval","synthetic":false,"types":[]},{"text":"impl Copy for glob64_t","synthetic":false,"types":[]},{"text":"impl Copy for msghdr","synthetic":false,"types":[]},{"text":"impl Copy for cmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for termios","synthetic":false,"types":[]},{"text":"impl Copy for mallinfo","synthetic":false,"types":[]},{"text":"impl Copy for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Copy for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Copy for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Copy for nlattr","synthetic":false,"types":[]},{"text":"impl Copy for rtentry","synthetic":false,"types":[]},{"text":"impl Copy for timex","synthetic":false,"types":[]},{"text":"impl Copy for ntptimeval","synthetic":false,"types":[]},{"text":"impl Copy for regex_t","synthetic":false,"types":[]},{"text":"impl Copy for utmpx","synthetic":false,"types":[]},{"text":"impl Copy for sigset_t","synthetic":false,"types":[]},{"text":"impl Copy for sysinfo","synthetic":false,"types":[]},{"text":"impl Copy for msqid_ds","synthetic":false,"types":[]},{"text":"impl Copy for sigaction","synthetic":false,"types":[]},{"text":"impl Copy for statfs","synthetic":false,"types":[]},{"text":"impl Copy for flock","synthetic":false,"types":[]},{"text":"impl Copy for flock64","synthetic":false,"types":[]},{"text":"impl Copy for siginfo_t","synthetic":false,"types":[]},{"text":"impl Copy for stack_t","synthetic":false,"types":[]},{"text":"impl Copy for stat","synthetic":false,"types":[]},{"text":"impl Copy for stat64","synthetic":false,"types":[]},{"text":"impl Copy for statfs64","synthetic":false,"types":[]},{"text":"impl Copy for statvfs64","synthetic":false,"types":[]},{"text":"impl Copy for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Copy for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Copy for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Copy for user","synthetic":false,"types":[]},{"text":"impl Copy for mcontext_t","synthetic":false,"types":[]},{"text":"impl Copy for ipc_perm","synthetic":false,"types":[]},{"text":"impl Copy for shmid_ds","synthetic":false,"types":[]},{"text":"impl Copy for termios2","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Copy for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Copy for ucontext_t","synthetic":false,"types":[]},{"text":"impl Copy for statvfs","synthetic":false,"types":[]},{"text":"impl Copy for max_align_t","synthetic":false,"types":[]},{"text":"impl Copy for sem_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Copy for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Copy for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Copy for can_frame","synthetic":false,"types":[]},{"text":"impl Copy for canfd_frame","synthetic":false,"types":[]},{"text":"impl Copy for in6_addr","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Copy for Level","synthetic":false,"types":[]},{"text":"impl Copy for LevelFilter","synthetic":false,"types":[]}];
implementors["lz4_sys"] = [{"text":"impl Copy for LZ4FCompressionContext","synthetic":false,"types":[]},{"text":"impl Copy for LZ4FDecompressionContext","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Copy for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Copy for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZFlush","synthetic":false,"types":[]},{"text":"impl Copy for MZStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZError","synthetic":false,"types":[]},{"text":"impl Copy for DataFormat","synthetic":false,"types":[]},{"text":"impl Copy for StreamResult","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl Copy for Interest","synthetic":false,"types":[]},{"text":"impl Copy for Token","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl Copy for ErrorKind","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Copy&gt; Copy for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Slice","synthetic":false,"types":[]},{"text":"impl Copy for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Copy for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FoldWhile&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AxisDescription","synthetic":false,"types":[]},{"text":"impl&lt;'a, D&gt; Copy for Axes&lt;'a, D&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Axis","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy + ?Sized&gt; Copy for Dim&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for RawViewRepr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ViewRepr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;RawDataClone + Copy, D:&nbsp;Copy&gt; Copy for ArrayBase&lt;S, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Copy&gt; Copy for Shape&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Copy&gt; Copy for StrideShape&lt;D&gt;","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Copy for Sign","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for TryFromBigIntError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ParseRatioError","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Copy + Float&gt; Copy for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Float&gt; Copy for NotNan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for FloatIsNan","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Copy&gt; Copy for ParseNotNanError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["packed_simd_2"] = [{"text":"impl&lt;A:&nbsp;Copy + SimdArray&gt; Copy for Simd&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for LexicographicallyOrdered&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for m8","synthetic":false,"types":[]},{"text":"impl Copy for m16","synthetic":false,"types":[]},{"text":"impl Copy for m32","synthetic":false,"types":[]},{"text":"impl Copy for m64","synthetic":false,"types":[]},{"text":"impl Copy for m128","synthetic":false,"types":[]},{"text":"impl Copy for msize","synthetic":false,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Copy for WaitTimeoutResult","synthetic":false,"types":[]},{"text":"impl Copy for OnceState","synthetic":false,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Copy for ParkResult","synthetic":false,"types":[]},{"text":"impl Copy for UnparkResult","synthetic":false,"types":[]},{"text":"impl Copy for RequeueOp","synthetic":false,"types":[]},{"text":"impl Copy for FilterOp","synthetic":false,"types":[]},{"text":"impl Copy for UnparkToken","synthetic":false,"types":[]},{"text":"impl Copy for ParkToken","synthetic":false,"types":[]}];
implementors["parquet"] = [{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for LogicalType","synthetic":false,"types":[]},{"text":"impl Copy for Repetition","synthetic":false,"types":[]},{"text":"impl Copy for Encoding","synthetic":false,"types":[]},{"text":"impl Copy for Compression","synthetic":false,"types":[]},{"text":"impl Copy for PageType","synthetic":false,"types":[]},{"text":"impl Copy for SortOrder","synthetic":false,"types":[]},{"text":"impl Copy for ColumnOrder","synthetic":false,"types":[]},{"text":"impl Copy for WriterVersion","synthetic":false,"types":[]}];
implementors["parquet_format"] = [{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for ConvertedType","synthetic":false,"types":[]},{"text":"impl Copy for FieldRepetitionType","synthetic":false,"types":[]},{"text":"impl Copy for Encoding","synthetic":false,"types":[]},{"text":"impl Copy for CompressionCodec","synthetic":false,"types":[]},{"text":"impl Copy for PageType","synthetic":false,"types":[]},{"text":"impl Copy for BoundaryOrder","synthetic":false,"types":[]}];
implementors["polars_core"] = [{"text":"impl Copy for Node","synthetic":false,"types":[]},{"text":"impl Copy for InitFold","synthetic":false,"types":[]},{"text":"impl Copy for FillNoneStrategy","synthetic":false,"types":[]},{"text":"impl Copy for GroupByMethod","synthetic":false,"types":[]},{"text":"impl Copy for JoinType","synthetic":false,"types":[]}];
implementors["polars_io"] = [{"text":"impl Copy for CsvEncoding","synthetic":false,"types":[]}];
implementors["polars_lazy"] = [{"text":"impl Copy for Operator","synthetic":false,"types":[]},{"text":"impl Copy for JoinOptions","synthetic":false,"types":[]},{"text":"impl Copy for OptState","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Copy for YesS3","synthetic":false,"types":[]},{"text":"impl Copy for NoS3","synthetic":false,"types":[]},{"text":"impl Copy for YesS4","synthetic":false,"types":[]},{"text":"impl Copy for NoS4","synthetic":false,"types":[]},{"text":"impl Copy for YesA1","synthetic":false,"types":[]},{"text":"impl Copy for NoA1","synthetic":false,"types":[]},{"text":"impl Copy for YesA2","synthetic":false,"types":[]},{"text":"impl Copy for NoA2","synthetic":false,"types":[]},{"text":"impl Copy for YesNI","synthetic":false,"types":[]},{"text":"impl Copy for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Copy, S4:&nbsp;Copy, NI:&nbsp;Copy&gt; Copy for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Copy&gt; Copy for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Copy for vec128_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec256_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Delimiter","synthetic":false,"types":[]},{"text":"impl Copy for Spacing","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Copy for Bernoulli","synthetic":false,"types":[]},{"text":"impl Copy for BernoulliError","synthetic":false,"types":[]},{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Cauchy","synthetic":false,"types":[]},{"text":"impl Copy for Exp1","synthetic":false,"types":[]},{"text":"impl Copy for Exp","synthetic":false,"types":[]},{"text":"impl Copy for Gamma","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquared","synthetic":false,"types":[]},{"text":"impl Copy for FisherF","synthetic":false,"types":[]},{"text":"impl Copy for StudentT","synthetic":false,"types":[]},{"text":"impl Copy for Beta","synthetic":false,"types":[]},{"text":"impl Copy for StandardNormal","synthetic":false,"types":[]},{"text":"impl Copy for Normal","synthetic":false,"types":[]},{"text":"impl Copy for LogNormal","synthetic":false,"types":[]},{"text":"impl Copy for Pareto","synthetic":false,"types":[]},{"text":"impl Copy for Poisson","synthetic":false,"types":[]},{"text":"impl Copy for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy + SampleUniform&gt; Copy for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UniformDuration","synthetic":false,"types":[]},{"text":"impl Copy for UnitCircle","synthetic":false,"types":[]},{"text":"impl Copy for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Copy for Weibull","synthetic":false,"types":[]},{"text":"impl Copy for WeightedError","synthetic":false,"types":[]},{"text":"impl Copy for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Copy for Open01","synthetic":false,"types":[]},{"text":"impl Copy for Standard","synthetic":false,"types":[]},{"text":"impl Copy for ThreadRng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Copy for OsRng","synthetic":false,"types":[]}];
implementors["rand_distr"] = [{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Cauchy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float + FloatConst,<br>&nbsp;&nbsp;&nbsp;&nbsp;Standard: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Exp1","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Exp&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Gamma&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for ChiSquared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquaredError","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for FisherF&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for FisherFError","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for StudentT&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Beta&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for BetaError","synthetic":false,"types":[]},{"text":"impl Copy for StandardNormal","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Normal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for LogNormal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Pareto&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;OpenClosed01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Pert&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for PertError","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Poisson&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float + FloatConst,<br>&nbsp;&nbsp;&nbsp;&nbsp;Standard: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Triangular&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Standard: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for TriangularError","synthetic":false,"types":[]},{"text":"impl Copy for UnitBall","synthetic":false,"types":[]},{"text":"impl Copy for UnitCircle","synthetic":false,"types":[]},{"text":"impl Copy for UnitDisc","synthetic":false,"types":[]},{"text":"impl Copy for UnitSphere","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Weibull&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;OpenClosed01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl Copy for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Copy for Flag","synthetic":false,"types":[]},{"text":"impl Copy for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Copy for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Range","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl&lt;E&gt; Copy for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Copy for Category","synthetic":false,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Copy for SigId","synthetic":false,"types":[]}];
implementors["strum"] = [{"text":"impl Copy for ParseError","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Copy for Underscore","synthetic":false,"types":[]},{"text":"impl Copy for Abstract","synthetic":false,"types":[]},{"text":"impl Copy for As","synthetic":false,"types":[]},{"text":"impl Copy for Async","synthetic":false,"types":[]},{"text":"impl Copy for Auto","synthetic":false,"types":[]},{"text":"impl Copy for Await","synthetic":false,"types":[]},{"text":"impl Copy for Become","synthetic":false,"types":[]},{"text":"impl Copy for Box","synthetic":false,"types":[]},{"text":"impl Copy for Break","synthetic":false,"types":[]},{"text":"impl Copy for Const","synthetic":false,"types":[]},{"text":"impl Copy for Continue","synthetic":false,"types":[]},{"text":"impl Copy for Crate","synthetic":false,"types":[]},{"text":"impl Copy for Default","synthetic":false,"types":[]},{"text":"impl Copy for Do","synthetic":false,"types":[]},{"text":"impl Copy for Dyn","synthetic":false,"types":[]},{"text":"impl Copy for Else","synthetic":false,"types":[]},{"text":"impl Copy for Enum","synthetic":false,"types":[]},{"text":"impl Copy for Extern","synthetic":false,"types":[]},{"text":"impl Copy for Final","synthetic":false,"types":[]},{"text":"impl Copy for Fn","synthetic":false,"types":[]},{"text":"impl Copy for For","synthetic":false,"types":[]},{"text":"impl Copy for If","synthetic":false,"types":[]},{"text":"impl Copy for Impl","synthetic":false,"types":[]},{"text":"impl Copy for In","synthetic":false,"types":[]},{"text":"impl Copy for Let","synthetic":false,"types":[]},{"text":"impl Copy for Loop","synthetic":false,"types":[]},{"text":"impl Copy for Macro","synthetic":false,"types":[]},{"text":"impl Copy for Match","synthetic":false,"types":[]},{"text":"impl Copy for Mod","synthetic":false,"types":[]},{"text":"impl Copy for Move","synthetic":false,"types":[]},{"text":"impl Copy for Mut","synthetic":false,"types":[]},{"text":"impl Copy for Override","synthetic":false,"types":[]},{"text":"impl Copy for Priv","synthetic":false,"types":[]},{"text":"impl Copy for Pub","synthetic":false,"types":[]},{"text":"impl Copy for Ref","synthetic":false,"types":[]},{"text":"impl Copy for Return","synthetic":false,"types":[]},{"text":"impl Copy for SelfType","synthetic":false,"types":[]},{"text":"impl Copy for SelfValue","synthetic":false,"types":[]},{"text":"impl Copy for Static","synthetic":false,"types":[]},{"text":"impl Copy for Struct","synthetic":false,"types":[]},{"text":"impl Copy for Super","synthetic":false,"types":[]},{"text":"impl Copy for Trait","synthetic":false,"types":[]},{"text":"impl Copy for Try","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Typeof","synthetic":false,"types":[]},{"text":"impl Copy for Union","synthetic":false,"types":[]},{"text":"impl Copy for Unsafe","synthetic":false,"types":[]},{"text":"impl Copy for Unsized","synthetic":false,"types":[]},{"text":"impl Copy for Use","synthetic":false,"types":[]},{"text":"impl Copy for Virtual","synthetic":false,"types":[]},{"text":"impl Copy for Where","synthetic":false,"types":[]},{"text":"impl Copy for While","synthetic":false,"types":[]},{"text":"impl Copy for Yield","synthetic":false,"types":[]},{"text":"impl Copy for Add","synthetic":false,"types":[]},{"text":"impl Copy for AddEq","synthetic":false,"types":[]},{"text":"impl Copy for And","synthetic":false,"types":[]},{"text":"impl Copy for AndAnd","synthetic":false,"types":[]},{"text":"impl Copy for AndEq","synthetic":false,"types":[]},{"text":"impl Copy for At","synthetic":false,"types":[]},{"text":"impl Copy for Bang","synthetic":false,"types":[]},{"text":"impl Copy for Caret","synthetic":false,"types":[]},{"text":"impl Copy for CaretEq","synthetic":false,"types":[]},{"text":"impl Copy for Colon","synthetic":false,"types":[]},{"text":"impl Copy for Colon2","synthetic":false,"types":[]},{"text":"impl Copy for Comma","synthetic":false,"types":[]},{"text":"impl Copy for Div","synthetic":false,"types":[]},{"text":"impl Copy for DivEq","synthetic":false,"types":[]},{"text":"impl Copy for Dollar","synthetic":false,"types":[]},{"text":"impl Copy for Dot","synthetic":false,"types":[]},{"text":"impl Copy for Dot2","synthetic":false,"types":[]},{"text":"impl Copy for Dot3","synthetic":false,"types":[]},{"text":"impl Copy for DotDotEq","synthetic":false,"types":[]},{"text":"impl Copy for Eq","synthetic":false,"types":[]},{"text":"impl Copy for EqEq","synthetic":false,"types":[]},{"text":"impl Copy for Ge","synthetic":false,"types":[]},{"text":"impl Copy for Gt","synthetic":false,"types":[]},{"text":"impl Copy for Le","synthetic":false,"types":[]},{"text":"impl Copy for Lt","synthetic":false,"types":[]},{"text":"impl Copy for MulEq","synthetic":false,"types":[]},{"text":"impl Copy for Ne","synthetic":false,"types":[]},{"text":"impl Copy for Or","synthetic":false,"types":[]},{"text":"impl Copy for OrEq","synthetic":false,"types":[]},{"text":"impl Copy for OrOr","synthetic":false,"types":[]},{"text":"impl Copy for Pound","synthetic":false,"types":[]},{"text":"impl Copy for Question","synthetic":false,"types":[]},{"text":"impl Copy for RArrow","synthetic":false,"types":[]},{"text":"impl Copy for LArrow","synthetic":false,"types":[]},{"text":"impl Copy for Rem","synthetic":false,"types":[]},{"text":"impl Copy for RemEq","synthetic":false,"types":[]},{"text":"impl Copy for FatArrow","synthetic":false,"types":[]},{"text":"impl Copy for Semi","synthetic":false,"types":[]},{"text":"impl Copy for Shl","synthetic":false,"types":[]},{"text":"impl Copy for ShlEq","synthetic":false,"types":[]},{"text":"impl Copy for Shr","synthetic":false,"types":[]},{"text":"impl Copy for ShrEq","synthetic":false,"types":[]},{"text":"impl Copy for Star","synthetic":false,"types":[]},{"text":"impl Copy for Sub","synthetic":false,"types":[]},{"text":"impl Copy for SubEq","synthetic":false,"types":[]},{"text":"impl Copy for Tilde","synthetic":false,"types":[]},{"text":"impl Copy for Brace","synthetic":false,"types":[]},{"text":"impl Copy for Bracket","synthetic":false,"types":[]},{"text":"impl Copy for Paren","synthetic":false,"types":[]},{"text":"impl Copy for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AttrStyle","synthetic":false,"types":[]},{"text":"impl Copy for BinOp","synthetic":false,"types":[]},{"text":"impl Copy for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Copy for UnOp","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Copy for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
implementors["thrift"] = [{"text":"impl Copy for TMessageType","synthetic":false,"types":[]},{"text":"impl Copy for TType","synthetic":false,"types":[]},{"text":"impl Copy for TransportErrorKind","synthetic":false,"types":[]},{"text":"impl Copy for ProtocolErrorKind","synthetic":false,"types":[]},{"text":"impl Copy for ApplicationErrorKind","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Copy for Duration","synthetic":false,"types":[]},{"text":"impl Copy for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Copy for Timespec","synthetic":false,"types":[]},{"text":"impl Copy for PreciseTime","synthetic":false,"types":[]},{"text":"impl Copy for SteadyTime","synthetic":false,"types":[]},{"text":"impl Copy for Tm","synthetic":false,"types":[]},{"text":"impl Copy for ParseError","synthetic":false,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl Copy for FrameFormat","synthetic":false,"types":[]},{"text":"impl Copy for CParameter","synthetic":false,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Copy for ZSTD_CCtx_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_DCtx_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_strategy","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_cParameter","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_bounds","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_ResetDirective","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_dParameter","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_inBuffer_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_outBuffer_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_EndDirective","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_CDict_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_DDict_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_CCtx_params_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_Sequence","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_compressionParameters","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_frameParameters","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_parameters","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_dictContentType_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_dictLoadMethod_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_format_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_forceIgnoreChecksum_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_dictAttachPref_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_literalCompressionMode_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_sequenceFormat_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_customMem","synthetic":false,"types":[]},{"text":"impl Copy for POOL_ctx_s","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_frameProgression","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_frameType_e","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_frameHeader","synthetic":false,"types":[]},{"text":"impl Copy for ZSTD_nextInputType_e","synthetic":false,"types":[]},{"text":"impl Copy for ZDICT_params_t","synthetic":false,"types":[]},{"text":"impl Copy for ZDICT_cover_params_t","synthetic":false,"types":[]},{"text":"impl Copy for ZDICT_fastCover_params_t","synthetic":false,"types":[]},{"text":"impl Copy for ZDICT_legacy_params_t","synthetic":false,"types":[]},{"text":"impl Copy for __locale_struct","synthetic":false,"types":[]},{"text":"impl Copy for ZSTDMT_CCtx_s","synthetic":false,"types":[]},{"text":"impl Copy for __locale_data","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()