(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Unpin for Adler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Unpin for AHasher","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Unpin for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Unpin for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Unpin for FindIter&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Unpin for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Unpin for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for MatchKind","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for ErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for MatchKind","synthetic":true,"types":[]},{"text":"impl Unpin for Config","synthetic":true,"types":[]},{"text":"impl Unpin for Builder","synthetic":true,"types":[]},{"text":"impl Unpin for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Unpin for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Match","synthetic":true,"types":[]}];
implementors["alloc_no_stdlib"] = [{"text":"impl&lt;'a, T, U&gt; Unpin for StackAllocator&lt;'a, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for AllocatedStackMemory&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for CallocBackingStore&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for AllocatorC","synthetic":true,"types":[]}];
implementors["alloc_stdlib"] = [{"text":"impl&lt;T&gt; Unpin for WrapBox&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for HeapAlloc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for HeapPrealloc&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for StandardAlloc","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Unpin for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Unpin for Drain&lt;'a, A&gt;","synthetic":true,"types":[]}];
implementors["arrow"] = [{"text":"impl&lt;OffsetSize&gt; Unpin for GenericBinaryArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for FixedSizeBinaryArray","synthetic":true,"types":[]},{"text":"impl Unpin for DecimalArray","synthetic":true,"types":[]},{"text":"impl Unpin for BooleanArray","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Unpin for DictionaryArray&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; Unpin for GenericListArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for FixedSizeListArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for PrimitiveArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; Unpin for GenericStringArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for StructArray","synthetic":true,"types":[]},{"text":"impl Unpin for UnionArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for BufferBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BooleanBufferBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for BooleanBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for PrimitiveBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for FixedSizeListBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for FixedSizeBinaryBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for DecimalBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for StructBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for UnionBuilder","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for PrimitiveDictionaryBuilder&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as ArrowPrimitiveType&gt;::Native: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as ArrowPrimitiveType&gt;::Native: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Unpin for StringDictionaryBuilder&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as ArrowPrimitiveType&gt;::Native: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ArrayData","synthetic":true,"types":[]},{"text":"impl Unpin for ArrayDataBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for PrimitiveIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for GenericStringIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for GenericBinaryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for NullArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for MutableArrayData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Bitmap","synthetic":true,"types":[]},{"text":"impl Unpin for Buffer","synthetic":true,"types":[]},{"text":"impl Unpin for MutableBuffer","synthetic":true,"types":[]},{"text":"impl Unpin for Deallocation","synthetic":true,"types":[]},{"text":"impl Unpin for Bytes","synthetic":true,"types":[]},{"text":"impl Unpin for SortOptions","synthetic":true,"types":[]},{"text":"impl Unpin for SortColumn","synthetic":true,"types":[]},{"text":"impl Unpin for TakeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for WriterBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for DataType","synthetic":true,"types":[]},{"text":"impl Unpin for DateUnit","synthetic":true,"types":[]},{"text":"impl Unpin for TimeUnit","synthetic":true,"types":[]},{"text":"impl Unpin for IntervalUnit","synthetic":true,"types":[]},{"text":"impl Unpin for Field","synthetic":true,"types":[]},{"text":"impl Unpin for BooleanType","synthetic":true,"types":[]},{"text":"impl Unpin for Int8Type","synthetic":true,"types":[]},{"text":"impl Unpin for Int16Type","synthetic":true,"types":[]},{"text":"impl Unpin for Int32Type","synthetic":true,"types":[]},{"text":"impl Unpin for Int64Type","synthetic":true,"types":[]},{"text":"impl Unpin for UInt8Type","synthetic":true,"types":[]},{"text":"impl Unpin for UInt16Type","synthetic":true,"types":[]},{"text":"impl Unpin for UInt32Type","synthetic":true,"types":[]},{"text":"impl Unpin for UInt64Type","synthetic":true,"types":[]},{"text":"impl Unpin for Float32Type","synthetic":true,"types":[]},{"text":"impl Unpin for Float64Type","synthetic":true,"types":[]},{"text":"impl Unpin for TimestampSecondType","synthetic":true,"types":[]},{"text":"impl Unpin for TimestampMillisecondType","synthetic":true,"types":[]},{"text":"impl Unpin for TimestampMicrosecondType","synthetic":true,"types":[]},{"text":"impl Unpin for TimestampNanosecondType","synthetic":true,"types":[]},{"text":"impl Unpin for Date32Type","synthetic":true,"types":[]},{"text":"impl Unpin for Date64Type","synthetic":true,"types":[]},{"text":"impl Unpin for Time32SecondType","synthetic":true,"types":[]},{"text":"impl Unpin for Time32MillisecondType","synthetic":true,"types":[]},{"text":"impl Unpin for Time64MicrosecondType","synthetic":true,"types":[]},{"text":"impl Unpin for Time64NanosecondType","synthetic":true,"types":[]},{"text":"impl Unpin for IntervalYearMonthType","synthetic":true,"types":[]},{"text":"impl Unpin for IntervalDayTimeType","synthetic":true,"types":[]},{"text":"impl Unpin for DurationSecondType","synthetic":true,"types":[]},{"text":"impl Unpin for DurationMillisecondType","synthetic":true,"types":[]},{"text":"impl Unpin for DurationMicrosecondType","synthetic":true,"types":[]},{"text":"impl Unpin for DurationNanosecondType","synthetic":true,"types":[]},{"text":"impl Unpin for Schema","synthetic":true,"types":[]},{"text":"impl Unpin for ArrowError","synthetic":true,"types":[]},{"text":"impl Unpin for FFI_ArrowSchema","synthetic":true,"types":[]},{"text":"impl Unpin for FFI_ArrowArray","synthetic":true,"types":[]},{"text":"impl Unpin for ArrowArray","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for FileReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for StreamReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for IpcWriteOptions","synthetic":true,"types":[]},{"text":"impl Unpin for IpcDataGenerator","synthetic":true,"types":[]},{"text":"impl Unpin for DictionaryTracker","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for FileWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for StreamWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for EncodedData","synthetic":true,"types":[]},{"text":"impl Unpin for Block","synthetic":true,"types":[]},{"text":"impl Unpin for FooterOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Footer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for FooterArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for FooterBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CompressionType","synthetic":true,"types":[]},{"text":"impl Unpin for BodyCompressionMethod","synthetic":true,"types":[]},{"text":"impl Unpin for MessageHeader","synthetic":true,"types":[]},{"text":"impl Unpin for MessageHeaderUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Unpin for FieldNode","synthetic":true,"types":[]},{"text":"impl Unpin for BodyCompressionOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BodyCompression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BodyCompressionArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for BodyCompressionBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RecordBatchOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RecordBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RecordBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for RecordBatchBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DictionaryBatchOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for DictionaryBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for DictionaryBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for DictionaryBatchBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for MessageOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Message&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for MessageArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for MessageBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for MetadataVersion","synthetic":true,"types":[]},{"text":"impl Unpin for Feature","synthetic":true,"types":[]},{"text":"impl Unpin for UnionMode","synthetic":true,"types":[]},{"text":"impl Unpin for Precision","synthetic":true,"types":[]},{"text":"impl Unpin for DateUnit","synthetic":true,"types":[]},{"text":"impl Unpin for TimeUnit","synthetic":true,"types":[]},{"text":"impl Unpin for IntervalUnit","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for TypeUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Unpin for DictionaryKind","synthetic":true,"types":[]},{"text":"impl Unpin for Endianness","synthetic":true,"types":[]},{"text":"impl Unpin for Buffer","synthetic":true,"types":[]},{"text":"impl Unpin for NullOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Null&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for NullArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for NullBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Struct_Offset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Struct_&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Struct_Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for Struct_Builder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ListOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for List&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for ListBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for LargeListOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for LargeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for LargeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for LargeListBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for FixedSizeListOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for FixedSizeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for FixedSizeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for FixedSizeListBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for MapOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Map&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for MapArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for MapBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for UnionOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Union&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for UnionArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for UnionBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for IntOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Int&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for IntArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for IntBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for FloatingPointOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for FloatingPoint&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for FloatingPointArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for FloatingPointBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8Offset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for Utf8Builder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BinaryOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Binary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for BinaryBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for LargeUtf8Offset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for LargeUtf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for LargeUtf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for LargeUtf8Builder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for LargeBinaryOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for LargeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for LargeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for LargeBinaryBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for FixedSizeBinaryOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for FixedSizeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for FixedSizeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for FixedSizeBinaryBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BoolOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Bool&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BoolArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for BoolBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DecimalOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Decimal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DecimalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for DecimalBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DateOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Date&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DateArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for DateBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TimeOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Time&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for TimeArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for TimeBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TimestampOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Timestamp&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TimestampArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for TimestampBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for IntervalOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Interval&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for IntervalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for IntervalBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DurationOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Duration&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DurationArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for DurationBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for KeyValueOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for KeyValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for KeyValueArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for KeyValueBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DictionaryEncodingOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for DictionaryEncoding&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for DictionaryEncodingArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for DictionaryEncodingBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for FieldOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for FieldArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for FieldBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SchemaOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Schema&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SchemaArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for SchemaBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SparseMatrixCompressedAxis","synthetic":true,"types":[]},{"text":"impl Unpin for SparseTensorIndex","synthetic":true,"types":[]},{"text":"impl Unpin for SparseTensorIndexUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Unpin for SparseTensorIndexCOOOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SparseTensorIndexCOO&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SparseTensorIndexCOOArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for SparseTensorIndexCOOBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SparseMatrixIndexCSXOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SparseMatrixIndexCSX&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SparseMatrixIndexCSXArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for SparseMatrixIndexCSXBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SparseTensorIndexCSFOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SparseTensorIndexCSF&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SparseTensorIndexCSFArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for SparseTensorIndexCSFBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SparseTensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SparseTensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SparseTensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for SparseTensorBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TensorDimOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TensorDim&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TensorDimArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for TensorDimBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Tensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Unpin for TensorBuilder&lt;'a, 'b&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'a: 'b,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Unpin for ValueIter&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for RecordBatch","synthetic":true,"types":[]},{"text":"impl Unpin for RecordBatchOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Tensor&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BitChunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BitChunkIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ArrowJson","synthetic":true,"types":[]},{"text":"impl Unpin for ArrowJsonSchema","synthetic":true,"types":[]},{"text":"impl Unpin for ArrowJsonField","synthetic":true,"types":[]},{"text":"impl Unpin for ArrowJsonFieldDictionary","synthetic":true,"types":[]},{"text":"impl Unpin for DictionaryIndexType","synthetic":true,"types":[]},{"text":"impl Unpin for ArrowJsonBatch","synthetic":true,"types":[]},{"text":"impl Unpin for ArrowJsonDictionaryBatch","synthetic":true,"types":[]},{"text":"impl Unpin for ArrowJsonColumn","synthetic":true,"types":[]},{"text":"impl Unpin for StringWriter","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Unpin for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Unpin for DecoderReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for EncoderWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DecodeError","synthetic":true,"types":[]},{"text":"impl Unpin for CharacterSet","synthetic":true,"types":[]},{"text":"impl Unpin for Config","synthetic":true,"types":[]}];
implementors["brotli"] = [{"text":"impl&lt;'a&gt; Unpin for InputReference&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for InputReferenceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for InputPair&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliDistanceParams","synthetic":true,"types":[]},{"text":"impl Unpin for Command","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Unpin for BlockSplit&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for PrefixCodeRange","synthetic":true,"types":[]},{"text":"impl Unpin for SimpleSortHuffmanTree","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Unpin for MetaBlockSplit&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;HistogramCommand&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;HistogramDistance&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;HistogramLiteral&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BlockTypeCodeCalculator","synthetic":true,"types":[]},{"text":"impl Unpin for BlockSplitCode","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Unpin for BlockEncoder&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RecoderState","synthetic":true,"types":[]},{"text":"impl Unpin for HuffmanTree","synthetic":true,"types":[]},{"text":"impl Unpin for SortHuffmanTree","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliDictionary","synthetic":true,"types":[]},{"text":"impl&lt;AllocU8, AllocU16, AllocI32, AllocU32, AllocU64, AllocCommand, AllocFloatX, AllocV8, AllocS16, AllocPDF, AllocStaticCommand, AllocHistogramLiteral, AllocHistogramCommand, AllocHistogramDistance, AllocHistogramPair, AllocContextType, AllocHuffmanTree, AllocZopfliNode&gt; Unpin for CombiningAllocator&lt;AllocU8, AllocU16, AllocI32, AllocU32, AllocU64, AllocCommand, AllocFloatX, AllocV8, AllocS16, AllocPDF, AllocStaticCommand, AllocHistogramLiteral, AllocHistogramCommand, AllocHistogramDistance, AllocHistogramPair, AllocContextType, AllocHuffmanTree, AllocZopfliNode&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocCommand: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocContextType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocFloatX: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramCommand: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramDistance: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramLiteral: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramPair: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHuffmanTree: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocI32: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocPDF: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocS16: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocStaticCommand: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU16: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU64: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocV8: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocZopfliNode: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DictWord","synthetic":true,"types":[]},{"text":"impl Unpin for HistogramPair","synthetic":true,"types":[]},{"text":"impl Unpin for HistogramLiteral","synthetic":true,"types":[]},{"text":"impl Unpin for HistogramCommand","synthetic":true,"types":[]},{"text":"impl Unpin for HistogramDistance","synthetic":true,"types":[]},{"text":"impl Unpin for Array264i","synthetic":true,"types":[]},{"text":"impl Unpin for Array528i","synthetic":true,"types":[]},{"text":"impl Unpin for Array712i","synthetic":true,"types":[]},{"text":"impl Unpin for EmptyIVec","synthetic":true,"types":[]},{"text":"impl Unpin for ContextType","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Unpin for BlockSplitIterator&lt;'a, Alloc&gt;","synthetic":true,"types":[]},{"text":"impl&lt;AllocF&gt; Unpin for ZopfliCostModel&lt;AllocF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocF as Allocator&lt;f32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for PosData","synthetic":true,"types":[]},{"text":"impl Unpin for StartPosQueue","synthetic":true,"types":[]},{"text":"impl Unpin for Union1","synthetic":true,"types":[]},{"text":"impl Unpin for ZopfliNode","synthetic":true,"types":[]},{"text":"impl Unpin for H10DefaultParams","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Unpin for H10Buckets&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32, Buckets, Params&gt; Unpin for H10&lt;AllocU32, Buckets, Params&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buckets: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Params: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BackwardMatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BackwardMatchMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderMode","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliHasherParams","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderParams","synthetic":true,"types":[]},{"text":"impl Unpin for H9Opts","synthetic":true,"types":[]},{"text":"impl Unpin for HowPrepared","synthetic":true,"types":[]},{"text":"impl Unpin for Struct1","synthetic":true,"types":[]},{"text":"impl Unpin for HasherSearchResult","synthetic":true,"types":[]},{"text":"impl&lt;Buckets&gt; Unpin for BasicHasher&lt;Buckets&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buckets: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Unpin for H2Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Unpin for H3Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Unpin for H4Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Unpin for H54Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Specialization, Alloc&gt; Unpin for AdvHasher&lt;Specialization, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Specialization: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for HQ5Sub","synthetic":true,"types":[]},{"text":"impl Unpin for HQ7Sub","synthetic":true,"types":[]},{"text":"impl Unpin for H9Sub","synthetic":true,"types":[]},{"text":"impl Unpin for H5Sub","synthetic":true,"types":[]},{"text":"impl Unpin for H6Sub","synthetic":true,"types":[]},{"text":"impl Unpin for BankH40","synthetic":true,"types":[]},{"text":"impl Unpin for BankH41","synthetic":true,"types":[]},{"text":"impl Unpin for BankH42","synthetic":true,"types":[]},{"text":"impl Unpin for SlotH40","synthetic":true,"types":[]},{"text":"impl Unpin for SlotH41","synthetic":true,"types":[]},{"text":"impl Unpin for SlotH42","synthetic":true,"types":[]},{"text":"impl Unpin for H40","synthetic":true,"types":[]},{"text":"impl Unpin for H41","synthetic":true,"types":[]},{"text":"impl Unpin for H42","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Unpin for UnionHasher&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BlockSplitter","synthetic":true,"types":[]},{"text":"impl Unpin for ContextBlockSplitter","synthetic":true,"types":[]},{"text":"impl Unpin for CodeBlockState","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderParameter","synthetic":true,"types":[]},{"text":"impl&lt;AllocU8&gt; Unpin for RingBuffer&lt;AllocU8&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderStreamState","synthetic":true,"types":[]},{"text":"impl Unpin for IsFirst","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Unpin for BrotliEncoderStateStruct&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderOperation","synthetic":true,"types":[]},{"text":"impl&lt;R, BufferType, Alloc&gt; Unpin for CompressorReaderCustomAlloc&lt;R, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for CompressorReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, R, BufferType, Alloc&gt; Unpin for CompressorReaderCustomIo&lt;ErrType, R, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, BufferType, Alloc&gt; Unpin for CompressorWriterCustomAlloc&lt;W, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for CompressorWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, W, BufferType, Alloc&gt; Unpin for CompressorWriterCustomIo&lt;ErrType, W, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Unpin for EntropyBucketPopulation&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BucketPopIndex","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Unpin for EntropyTally&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Unpin for EntropyPyramid&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BlockSwitch","synthetic":true,"types":[]},{"text":"impl Unpin for LiteralBlockSwitch","synthetic":true,"types":[]},{"text":"impl Unpin for LiteralPredictionModeNibble","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Unpin for PredictionModeContextMap&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CopyCommand","synthetic":true,"types":[]},{"text":"impl Unpin for DictCommand","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Unpin for FeatureFlagSliceType&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Unpin for LiteralCommand&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Unpin for Command&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SliceOffset","synthetic":true,"types":[]},{"text":"impl Unpin for WhichPrior","synthetic":true,"types":[]},{"text":"impl Unpin for Stride1Prior","synthetic":true,"types":[]},{"text":"impl Unpin for Stride2Prior","synthetic":true,"types":[]},{"text":"impl Unpin for Stride3Prior","synthetic":true,"types":[]},{"text":"impl Unpin for Stride4Prior","synthetic":true,"types":[]},{"text":"impl Unpin for CMPrior","synthetic":true,"types":[]},{"text":"impl Unpin for FastCMPrior","synthetic":true,"types":[]},{"text":"impl Unpin for SlowCMPrior","synthetic":true,"types":[]},{"text":"impl Unpin for AdvPrior","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for CDF&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Unpin for PriorEval&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Compat16x16&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;CompatF8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Unpin for StrideEval&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;f32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SpeedAndMax","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Unpin for ContextMapEntropy&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for PDF","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderThreadError","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Unpin for CompressedFileChunk&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Unpin for CompressionThreadResult&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ReturnVal, ExtraInput, Alloc, Join&gt; Unpin for InternalSendAlloc&lt;ReturnVal, ExtraInput, Alloc, Join&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraInput: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Join: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ReturnVal: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, Join&gt; Unpin for SendAlloc&lt;ReturnValue, ExtraInput, Alloc, Join&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraInput: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Join: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ReturnValue: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for InternalOwned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Unpin for SingleThreadedJoinable&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Unpin for SingleThreadedOwnedRetriever&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SingleThreadedSpawner","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Unpin for WorkerPool&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Unpin for MultiThreadedJoinable&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Unpin for MultiThreadedOwnedRetriever&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for MultiThreadedSpawner","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for FixedQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, U&gt; Unpin for GuardedQueue&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, U&gt; Unpin for WorkerPool&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, U&gt; Unpin for WorkerJoinable&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BroCatliResult","synthetic":true,"types":[]},{"text":"impl Unpin for BroCatli","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliSubclassableAllocator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SendableMemoryBlock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderOperation","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderMode","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderState","synthetic":true,"types":[]},{"text":"impl Unpin for BroccoliState","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliEncoderWorkPool","synthetic":true,"types":[]}];
implementors["brotli_decompressor"] = [{"text":"impl Unpin for HuffmanCode","synthetic":true,"types":[]},{"text":"impl&lt;Alloc32, AllocHC&gt; Unpin for HuffmanTreeGroup&lt;Alloc32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliDecoderErrorCode","synthetic":true,"types":[]},{"text":"impl&lt;AllocU8, AllocU32, AllocHC&gt; Unpin for BrotliState&lt;AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Transform","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliResult","synthetic":true,"types":[]},{"text":"impl&lt;InputType&gt; Unpin for IntoIoReader&lt;InputType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InputType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;InputType&gt; Unpin for IntoIoWriter&lt;InputType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InputType: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, OutputType&gt; Unpin for IoWriterWrapper&lt;'a, OutputType&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, OutputType&gt; Unpin for IoReaderWrapper&lt;'a, OutputType&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, BufferType, AllocU8, AllocU32, AllocHC&gt; Unpin for DecompressorCustomAlloc&lt;R, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Decompressor&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, R, BufferType, AllocU8, AllocU32, AllocHC&gt; Unpin for DecompressorCustomIo&lt;ErrType, R, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, BufferType, AllocU8, AllocU32, AllocHC&gt; Unpin for DecompressorWriterCustomAlloc&lt;W, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for DecompressorWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, W, BufferType, AllocU8, AllocU32, AllocHC&gt; Unpin for DecompressorWriterCustomIo&lt;ErrType, W, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for c_void","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliDecoderParameter","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliDecoderResult","synthetic":true,"types":[]},{"text":"impl Unpin for CAllocator","synthetic":true,"types":[]},{"text":"impl&lt;Ty&gt; Unpin for MemoryBlock&lt;Ty&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for SubclassableAllocator","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliDecoderState","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliDecoderReturnInfo","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Unpin for BStr","synthetic":true,"types":[]},{"text":"impl Unpin for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Unpin for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Unpin for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Unpin for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Unpin for BigEndian","synthetic":true,"types":[]},{"text":"impl Unpin for LittleEndian","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Unpin for FixedOffset","synthetic":true,"types":[]},{"text":"impl Unpin for Local","synthetic":true,"types":[]},{"text":"impl Unpin for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for NaiveDate","synthetic":true,"types":[]},{"text":"impl Unpin for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Unpin for IsoWeek","synthetic":true,"types":[]},{"text":"impl Unpin for NaiveTime","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Unpin for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SecondsFormat","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Unpin for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Pad","synthetic":true,"types":[]},{"text":"impl Unpin for Numeric","synthetic":true,"types":[]},{"text":"impl Unpin for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Unpin for Fixed","synthetic":true,"types":[]},{"text":"impl Unpin for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RoundingError","synthetic":true,"types":[]},{"text":"impl Unpin for Weekday","synthetic":true,"types":[]},{"text":"impl Unpin for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Unpin for Month","synthetic":true,"types":[]},{"text":"impl Unpin for ParseMonthError","synthetic":true,"types":[]}];
implementors["comfy_table"] = [{"text":"impl Unpin for Cell","synthetic":true,"types":[]},{"text":"impl Unpin for Column","synthetic":true,"types":[]},{"text":"impl Unpin for Row","synthetic":true,"types":[]},{"text":"impl Unpin for ContentArrangement","synthetic":true,"types":[]},{"text":"impl Unpin for TableComponent","synthetic":true,"types":[]},{"text":"impl Unpin for CellAlignment","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnConstraint","synthetic":true,"types":[]},{"text":"impl Unpin for Table","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Unpin for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Unpin for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for RecvError","synthetic":true,"types":[]},{"text":"impl Unpin for TryRecvError","synthetic":true,"types":[]},{"text":"impl Unpin for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Unpin for TrySelectError","synthetic":true,"types":[]},{"text":"impl Unpin for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Unpin for TryReadyError","synthetic":true,"types":[]},{"text":"impl Unpin for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Select&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Unpin for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Stealer&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Injector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T:&nbsp;?Sized, P&gt; Unpin for CompareAndSetError&lt;'g, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for Atomic&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for Owned&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'g, T:&nbsp;?Sized&gt; Unpin for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Collector","synthetic":true,"types":[]},{"text":"impl Unpin for LocalHandle","synthetic":true,"types":[]},{"text":"impl Unpin for Guard","synthetic":true,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; Unpin for ArrayQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SegQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for AtomicCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Backoff","synthetic":true,"types":[]},{"text":"impl Unpin for Parker","synthetic":true,"types":[]},{"text":"impl Unpin for Unparker","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Unpin for ShardedLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for ShardedLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Unpin for ShardedLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'env&gt; Unpin for Scope&lt;'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Unpin for ScopedThreadBuilder&lt;'scope, 'env&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'env: 'scope,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; Unpin for ScopedJoinHandle&lt;'scope, T&gt;","synthetic":true,"types":[]}];
implementors["crossterm"] = [{"text":"impl Unpin for MoveTo","synthetic":true,"types":[]},{"text":"impl Unpin for MoveToNextLine","synthetic":true,"types":[]},{"text":"impl Unpin for MoveToPreviousLine","synthetic":true,"types":[]},{"text":"impl Unpin for MoveToColumn","synthetic":true,"types":[]},{"text":"impl Unpin for MoveUp","synthetic":true,"types":[]},{"text":"impl Unpin for MoveRight","synthetic":true,"types":[]},{"text":"impl Unpin for MoveDown","synthetic":true,"types":[]},{"text":"impl Unpin for MoveLeft","synthetic":true,"types":[]},{"text":"impl Unpin for SavePosition","synthetic":true,"types":[]},{"text":"impl Unpin for RestorePosition","synthetic":true,"types":[]},{"text":"impl Unpin for Hide","synthetic":true,"types":[]},{"text":"impl Unpin for Show","synthetic":true,"types":[]},{"text":"impl Unpin for EnableBlinking","synthetic":true,"types":[]},{"text":"impl Unpin for DisableBlinking","synthetic":true,"types":[]},{"text":"impl Unpin for EnableMouseCapture","synthetic":true,"types":[]},{"text":"impl Unpin for DisableMouseCapture","synthetic":true,"types":[]},{"text":"impl Unpin for Event","synthetic":true,"types":[]},{"text":"impl Unpin for MouseEvent","synthetic":true,"types":[]},{"text":"impl Unpin for MouseEventKind","synthetic":true,"types":[]},{"text":"impl Unpin for MouseButton","synthetic":true,"types":[]},{"text":"impl Unpin for KeyModifiers","synthetic":true,"types":[]},{"text":"impl Unpin for KeyEvent","synthetic":true,"types":[]},{"text":"impl Unpin for KeyCode","synthetic":true,"types":[]},{"text":"impl Unpin for Attributes","synthetic":true,"types":[]},{"text":"impl Unpin for ContentStyle","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Unpin for StyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Attribute","synthetic":true,"types":[]},{"text":"impl Unpin for Color","synthetic":true,"types":[]},{"text":"impl Unpin for Colored","synthetic":true,"types":[]},{"text":"impl Unpin for Colors","synthetic":true,"types":[]},{"text":"impl Unpin for SetForegroundColor","synthetic":true,"types":[]},{"text":"impl Unpin for SetBackgroundColor","synthetic":true,"types":[]},{"text":"impl Unpin for SetColors","synthetic":true,"types":[]},{"text":"impl Unpin for SetAttribute","synthetic":true,"types":[]},{"text":"impl Unpin for SetAttributes","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Unpin for PrintStyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ResetColor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Print&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for DisableLineWrap","synthetic":true,"types":[]},{"text":"impl Unpin for EnableLineWrap","synthetic":true,"types":[]},{"text":"impl Unpin for EnterAlternateScreen","synthetic":true,"types":[]},{"text":"impl Unpin for LeaveAlternateScreen","synthetic":true,"types":[]},{"text":"impl Unpin for ClearType","synthetic":true,"types":[]},{"text":"impl Unpin for ScrollUp","synthetic":true,"types":[]},{"text":"impl Unpin for ScrollDown","synthetic":true,"types":[]},{"text":"impl Unpin for Clear","synthetic":true,"types":[]},{"text":"impl Unpin for SetSize","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SetTitle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ErrorKind","synthetic":true,"types":[]}];
implementors["csv"] = [{"text":"impl Unpin for ByteRecord","synthetic":true,"types":[]},{"text":"impl Unpin for Position","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Unpin for ByteRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DeserializeError","synthetic":true,"types":[]},{"text":"impl Unpin for DeserializeErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for ErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Unpin for DeserializeRecordsIntoIter&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R, D&gt; Unpin for DeserializeRecordsIter&lt;'r, R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for StringRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; Unpin for StringRecordsIter&lt;'r, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for ByteRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; Unpin for ByteRecordsIter&lt;'r, R&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for StringRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Unpin for StringRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for WriterBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for QuoteStyle","synthetic":true,"types":[]},{"text":"impl Unpin for Terminator","synthetic":true,"types":[]},{"text":"impl Unpin for Trim","synthetic":true,"types":[]}];
implementors["csv_core"] = [{"text":"impl Unpin for Reader","synthetic":true,"types":[]},{"text":"impl Unpin for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for ReadFieldResult","synthetic":true,"types":[]},{"text":"impl Unpin for ReadFieldNoCopyResult","synthetic":true,"types":[]},{"text":"impl Unpin for ReadRecordResult","synthetic":true,"types":[]},{"text":"impl Unpin for ReadRecordNoCopyResult","synthetic":true,"types":[]},{"text":"impl Unpin for WriterBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for WriteResult","synthetic":true,"types":[]},{"text":"impl Unpin for Writer","synthetic":true,"types":[]},{"text":"impl Unpin for Terminator","synthetic":true,"types":[]},{"text":"impl Unpin for QuoteStyle","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Unpin for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fast_float"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["flatbuffers"] = [{"text":"impl&lt;'fbb&gt; Unpin for FlatBufferBuilder&lt;'fbb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for FollowStart&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TableFinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl Unpin for TableUnfinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl Unpin for UnionWIPOffset","synthetic":true,"types":[]},{"text":"impl Unpin for VTableWIPOffset","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for WIPOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ForwardsUOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ForwardsVOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for BackwardsSOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SkipSizePrefix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SkipRootOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for FileIdentifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SkipFileIdentifier&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Table&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Vector&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for VectorIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ErrorTraceDetail","synthetic":true,"types":[]},{"text":"impl Unpin for InvalidFlatbuffer","synthetic":true,"types":[]},{"text":"impl Unpin for VerifierOptions","synthetic":true,"types":[]},{"text":"impl&lt;'opts, 'buf&gt; Unpin for Verifier&lt;'opts, 'buf&gt;","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Unpin for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for GzHeader","synthetic":true,"types":[]},{"text":"impl Unpin for GzBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for Compress","synthetic":true,"types":[]},{"text":"impl Unpin for Decompress","synthetic":true,"types":[]},{"text":"impl Unpin for FlushCompress","synthetic":true,"types":[]},{"text":"impl Unpin for FlushDecompress","synthetic":true,"types":[]},{"text":"impl Unpin for DecompressError","synthetic":true,"types":[]},{"text":"impl Unpin for CompressError","synthetic":true,"types":[]},{"text":"impl Unpin for Status","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Compression","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Unpin for Bucket&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RawTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RawIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RawIntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for RawDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for RawIterHash&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RawParIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RawIntoParIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for RawParDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for ParIter&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for ParKeys&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for ParValues&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for ParIterMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for ParValuesMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Unpin for IntoParIter&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for ParDrain&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for IntoParIter&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for ParDrain&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for ParIter&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for ParDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for ParSymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for ParIntersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for ParUnion&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Unpin for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Unpin for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawOccupiedEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Unpin for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Unpin for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Unpin for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Unpin for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Unpin for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for TryReserveError","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Unpin for FromHexError","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Unpin for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Unpin for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Unpin for SymmetricDifference&lt;'a, T, S1, S2&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Unpin for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, Pred&gt; Unpin for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Unpin for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Unpin for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Unpin for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Unpin for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Unpin for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for IntoChunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for Chunk&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Unpin for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; Unpin for GroupBy&lt;K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Unpin for Group&lt;'a, K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; Unpin for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Unpin for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Unpin for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Unpin for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Unpin for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Unpin for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Unpin for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Unpin for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Unpin for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Unpin for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Unpin for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Unpin for Buffer","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Unpin for ErrorCode","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Unpin for statvfs","synthetic":true,"types":[]},{"text":"impl Unpin for max_align_t","synthetic":true,"types":[]},{"text":"impl Unpin for sigaction","synthetic":true,"types":[]},{"text":"impl Unpin for statfs","synthetic":true,"types":[]},{"text":"impl Unpin for flock","synthetic":true,"types":[]},{"text":"impl Unpin for flock64","synthetic":true,"types":[]},{"text":"impl Unpin for siginfo_t","synthetic":true,"types":[]},{"text":"impl Unpin for stack_t","synthetic":true,"types":[]},{"text":"impl Unpin for stat","synthetic":true,"types":[]},{"text":"impl Unpin for stat64","synthetic":true,"types":[]},{"text":"impl Unpin for statfs64","synthetic":true,"types":[]},{"text":"impl Unpin for statvfs64","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Unpin for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Unpin for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Unpin for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Unpin for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Unpin for user","synthetic":true,"types":[]},{"text":"impl Unpin for mcontext_t","synthetic":true,"types":[]},{"text":"impl Unpin for ipc_perm","synthetic":true,"types":[]},{"text":"impl Unpin for shmid_ds","synthetic":true,"types":[]},{"text":"impl Unpin for termios2","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Unpin for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Unpin for ucontext_t","synthetic":true,"types":[]},{"text":"impl Unpin for sigset_t","synthetic":true,"types":[]},{"text":"impl Unpin for sysinfo","synthetic":true,"types":[]},{"text":"impl Unpin for msqid_ds","synthetic":true,"types":[]},{"text":"impl Unpin for sem_t","synthetic":true,"types":[]},{"text":"impl Unpin for statx","synthetic":true,"types":[]},{"text":"impl Unpin for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Unpin for aiocb","synthetic":true,"types":[]},{"text":"impl Unpin for __exit_status","synthetic":true,"types":[]},{"text":"impl Unpin for __timeval","synthetic":true,"types":[]},{"text":"impl Unpin for glob64_t","synthetic":true,"types":[]},{"text":"impl Unpin for msghdr","synthetic":true,"types":[]},{"text":"impl Unpin for cmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for termios","synthetic":true,"types":[]},{"text":"impl Unpin for mallinfo","synthetic":true,"types":[]},{"text":"impl Unpin for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Unpin for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Unpin for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Unpin for nlattr","synthetic":true,"types":[]},{"text":"impl Unpin for rtentry","synthetic":true,"types":[]},{"text":"impl Unpin for timex","synthetic":true,"types":[]},{"text":"impl Unpin for ntptimeval","synthetic":true,"types":[]},{"text":"impl Unpin for regex_t","synthetic":true,"types":[]},{"text":"impl Unpin for utmpx","synthetic":true,"types":[]},{"text":"impl Unpin for fpos64_t","synthetic":true,"types":[]},{"text":"impl Unpin for rlimit64","synthetic":true,"types":[]},{"text":"impl Unpin for glob_t","synthetic":true,"types":[]},{"text":"impl Unpin for passwd","synthetic":true,"types":[]},{"text":"impl Unpin for spwd","synthetic":true,"types":[]},{"text":"impl Unpin for dqblk","synthetic":true,"types":[]},{"text":"impl Unpin for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Unpin for itimerspec","synthetic":true,"types":[]},{"text":"impl Unpin for fsid_t","synthetic":true,"types":[]},{"text":"impl Unpin for packet_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Unpin for if_nameindex","synthetic":true,"types":[]},{"text":"impl Unpin for msginfo","synthetic":true,"types":[]},{"text":"impl Unpin for sembuf","synthetic":true,"types":[]},{"text":"impl Unpin for input_event","synthetic":true,"types":[]},{"text":"impl Unpin for input_id","synthetic":true,"types":[]},{"text":"impl Unpin for input_absinfo","synthetic":true,"types":[]},{"text":"impl Unpin for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Unpin for input_mask","synthetic":true,"types":[]},{"text":"impl Unpin for ff_replay","synthetic":true,"types":[]},{"text":"impl Unpin for ff_trigger","synthetic":true,"types":[]},{"text":"impl Unpin for ff_envelope","synthetic":true,"types":[]},{"text":"impl Unpin for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Unpin for ff_effect","synthetic":true,"types":[]},{"text":"impl Unpin for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Unpin for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Unpin for ucred","synthetic":true,"types":[]},{"text":"impl Unpin for mntent","synthetic":true,"types":[]},{"text":"impl Unpin for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Unpin for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for arpd_request","synthetic":true,"types":[]},{"text":"impl Unpin for inotify_event","synthetic":true,"types":[]},{"text":"impl Unpin for fanotify_response","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Unpin for regmatch_t","synthetic":true,"types":[]},{"text":"impl Unpin for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Unpin for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Unpin for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Unpin for can_filter","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Unpin for dirent","synthetic":true,"types":[]},{"text":"impl Unpin for dirent64","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Unpin for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Unpin for mq_attr","synthetic":true,"types":[]},{"text":"impl Unpin for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Unpin for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Unpin for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Unpin for can_frame","synthetic":true,"types":[]},{"text":"impl Unpin for canfd_frame","synthetic":true,"types":[]},{"text":"impl Unpin for timezone","synthetic":true,"types":[]},{"text":"impl Unpin for in_addr","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Unpin for addrinfo","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Unpin for fd_set","synthetic":true,"types":[]},{"text":"impl Unpin for tm","synthetic":true,"types":[]},{"text":"impl Unpin for sched_param","synthetic":true,"types":[]},{"text":"impl Unpin for Dl_info","synthetic":true,"types":[]},{"text":"impl Unpin for lconv","synthetic":true,"types":[]},{"text":"impl Unpin for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Unpin for ifaddrs","synthetic":true,"types":[]},{"text":"impl Unpin for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Unpin for arpreq","synthetic":true,"types":[]},{"text":"impl Unpin for arpreq_old","synthetic":true,"types":[]},{"text":"impl Unpin for arphdr","synthetic":true,"types":[]},{"text":"impl Unpin for mmsghdr","synthetic":true,"types":[]},{"text":"impl Unpin for epoll_event","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Unpin for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Unpin for utsname","synthetic":true,"types":[]},{"text":"impl Unpin for sigevent","synthetic":true,"types":[]},{"text":"impl Unpin for in6_addr","synthetic":true,"types":[]},{"text":"impl Unpin for DIR","synthetic":true,"types":[]},{"text":"impl Unpin for group","synthetic":true,"types":[]},{"text":"impl Unpin for utimbuf","synthetic":true,"types":[]},{"text":"impl Unpin for timeval","synthetic":true,"types":[]},{"text":"impl Unpin for timespec","synthetic":true,"types":[]},{"text":"impl Unpin for rlimit","synthetic":true,"types":[]},{"text":"impl Unpin for rusage","synthetic":true,"types":[]},{"text":"impl Unpin for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Unpin for hostent","synthetic":true,"types":[]},{"text":"impl Unpin for iovec","synthetic":true,"types":[]},{"text":"impl Unpin for pollfd","synthetic":true,"types":[]},{"text":"impl Unpin for winsize","synthetic":true,"types":[]},{"text":"impl Unpin for linger","synthetic":true,"types":[]},{"text":"impl Unpin for sigval","synthetic":true,"types":[]},{"text":"impl Unpin for itimerval","synthetic":true,"types":[]},{"text":"impl Unpin for tms","synthetic":true,"types":[]},{"text":"impl Unpin for servent","synthetic":true,"types":[]},{"text":"impl Unpin for protoent","synthetic":true,"types":[]},{"text":"impl Unpin for FILE","synthetic":true,"types":[]},{"text":"impl Unpin for fpos_t","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;R, T:&nbsp;?Sized&gt; Unpin for Mutex&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Unpin for MutexGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawMutex&gt;::GuardMarker: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Unpin for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, G&gt; Unpin for RawReentrantMutex&lt;R, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, G, T:&nbsp;?Sized&gt; Unpin for ReentrantMutex&lt;R, G, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Unpin for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, G, T:&nbsp;?Sized&gt; Unpin for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, T:&nbsp;?Sized&gt; Unpin for RwLock&lt;R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Unpin for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Unpin for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Unpin for RwLockUpgradableReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Unpin for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Unpin for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for GuardSend","synthetic":true,"types":[]},{"text":"impl Unpin for GuardNoSend","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl Unpin for Level","synthetic":true,"types":[]},{"text":"impl Unpin for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Unpin for ParseLevelError","synthetic":true,"types":[]}];
implementors["lz4"] = [{"text":"impl Unpin for LZ4Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for EncoderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CompressionMode","synthetic":true,"types":[]}];
implementors["lz4_sys"] = [{"text":"impl Unpin for LZ4FCompressionContext","synthetic":true,"types":[]},{"text":"impl Unpin for LZ4FDecompressionContext","synthetic":true,"types":[]},{"text":"impl Unpin for BlockSize","synthetic":true,"types":[]},{"text":"impl Unpin for BlockMode","synthetic":true,"types":[]},{"text":"impl Unpin for ContentChecksum","synthetic":true,"types":[]},{"text":"impl Unpin for LZ4FFrameInfo","synthetic":true,"types":[]},{"text":"impl Unpin for LZ4FPreferences","synthetic":true,"types":[]},{"text":"impl Unpin for LZ4FCompressOptions","synthetic":true,"types":[]},{"text":"impl Unpin for LZ4FDecompressOptions","synthetic":true,"types":[]},{"text":"impl Unpin for LZ4StreamEncode","synthetic":true,"types":[]},{"text":"impl Unpin for LZ4StreamDecode","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Unpin for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Unpin for MmapOptions","synthetic":true,"types":[]},{"text":"impl Unpin for Mmap","synthetic":true,"types":[]},{"text":"impl Unpin for MmapMut","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Unpin for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Unpin for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Unpin for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Unpin for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Unpin for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Unpin for MinReset","synthetic":true,"types":[]},{"text":"impl Unpin for ZeroReset","synthetic":true,"types":[]},{"text":"impl Unpin for FullReset","synthetic":true,"types":[]},{"text":"impl Unpin for InflateState","synthetic":true,"types":[]},{"text":"impl Unpin for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Unpin for MZFlush","synthetic":true,"types":[]},{"text":"impl Unpin for MZStatus","synthetic":true,"types":[]},{"text":"impl Unpin for MZError","synthetic":true,"types":[]},{"text":"impl Unpin for DataFormat","synthetic":true,"types":[]},{"text":"impl Unpin for StreamResult","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Unpin for Interest","synthetic":true,"types":[]},{"text":"impl Unpin for Poll","synthetic":true,"types":[]},{"text":"impl Unpin for Registry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Sender","synthetic":true,"types":[]},{"text":"impl Unpin for Receiver","synthetic":true,"types":[]},{"text":"impl Unpin for Token","synthetic":true,"types":[]},{"text":"impl Unpin for Waker","synthetic":true,"types":[]},{"text":"impl Unpin for Event","synthetic":true,"types":[]},{"text":"impl Unpin for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Iter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;A&gt; Unpin for OwnedRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, D&gt; Unpin for Axes&lt;'a, D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Unpin for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Unpin for IndicesIter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for AxisChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for AxisChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for AxisIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for AxisIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for ExactChunks&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for ExactChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for ExactChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for ExactChunksMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for IndexedIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for IndexedIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for Iter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for IterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for Lanes&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for LanesIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for LanesIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for LanesMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Unpin for Windows&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ShapeError","synthetic":true,"types":[]},{"text":"impl Unpin for ErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for Slice","synthetic":true,"types":[]},{"text":"impl Unpin for SliceOrIndex","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, D&gt; Unpin for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Parts, D&gt; Unpin for Zip&lt;Parts, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parts: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for AxisDescription","synthetic":true,"types":[]},{"text":"impl Unpin for Axis","synthetic":true,"types":[]},{"text":"impl&lt;I:&nbsp;?Sized&gt; Unpin for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for IxDynImpl","synthetic":true,"types":[]},{"text":"impl&lt;S, D&gt; Unpin for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for OwnedArcRepr&lt;A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RawViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for ViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Unpin for CowRepr&lt;'a, A&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Unpin for Shape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Unpin for StrideShape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Unpin for Sign","synthetic":true,"types":[]},{"text":"impl Unpin for BigInt","synthetic":true,"types":[]},{"text":"impl Unpin for BigUint","synthetic":true,"types":[]},{"text":"impl Unpin for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Unpin for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Unpin for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Unpin for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Unpin for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Unpin for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for ParseFloatError","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; Unpin for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["packed_simd_2"] = [{"text":"impl Unpin for m8","synthetic":true,"types":[]},{"text":"impl Unpin for m16","synthetic":true,"types":[]},{"text":"impl Unpin for m32","synthetic":true,"types":[]},{"text":"impl Unpin for m64","synthetic":true,"types":[]},{"text":"impl Unpin for m128","synthetic":true,"types":[]},{"text":"impl Unpin for msize","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for Simd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as SimdArray&gt;::Tuple: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for LexicographicallyOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Unpin for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Unpin for Condvar","synthetic":true,"types":[]},{"text":"impl Unpin for OnceState","synthetic":true,"types":[]},{"text":"impl Unpin for Once","synthetic":true,"types":[]},{"text":"impl Unpin for RawFairMutex","synthetic":true,"types":[]},{"text":"impl Unpin for RawMutex","synthetic":true,"types":[]},{"text":"impl Unpin for RawRwLock","synthetic":true,"types":[]},{"text":"impl Unpin for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Unpin for ParkResult","synthetic":true,"types":[]},{"text":"impl Unpin for UnparkResult","synthetic":true,"types":[]},{"text":"impl Unpin for RequeueOp","synthetic":true,"types":[]},{"text":"impl Unpin for FilterOp","synthetic":true,"types":[]},{"text":"impl Unpin for UnparkToken","synthetic":true,"types":[]},{"text":"impl Unpin for ParkToken","synthetic":true,"types":[]},{"text":"impl Unpin for SpinWait","synthetic":true,"types":[]}];
implementors["parquet"] = [{"text":"impl Unpin for ParquetError","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for LogicalType","synthetic":true,"types":[]},{"text":"impl Unpin for Repetition","synthetic":true,"types":[]},{"text":"impl Unpin for Encoding","synthetic":true,"types":[]},{"text":"impl Unpin for Compression","synthetic":true,"types":[]},{"text":"impl Unpin for PageType","synthetic":true,"types":[]},{"text":"impl Unpin for SortOrder","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnOrder","synthetic":true,"types":[]},{"text":"impl Unpin for Int96","synthetic":true,"types":[]},{"text":"impl Unpin for ByteArray","synthetic":true,"types":[]},{"text":"impl Unpin for FixedLenByteArray","synthetic":true,"types":[]},{"text":"impl Unpin for Decimal","synthetic":true,"types":[]},{"text":"impl Unpin for BoolType","synthetic":true,"types":[]},{"text":"impl Unpin for Int32Type","synthetic":true,"types":[]},{"text":"impl Unpin for Int64Type","synthetic":true,"types":[]},{"text":"impl Unpin for Int96Type","synthetic":true,"types":[]},{"text":"impl Unpin for FloatType","synthetic":true,"types":[]},{"text":"impl Unpin for DoubleType","synthetic":true,"types":[]},{"text":"impl Unpin for ByteArrayType","synthetic":true,"types":[]},{"text":"impl Unpin for FixedLenByteArrayType","synthetic":true,"types":[]},{"text":"impl Unpin for PlainDecoderDetails","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for PlainDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DictDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RleValueDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DeltaBitPackDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DeltaLengthByteArrayDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DeltaByteArrayDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for PlainEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DictEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RleValueEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DeltaBitPackEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DeltaLengthByteArrayEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for DeltaByteArrayEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for MemTracker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Buffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for BufferPtr&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for FileSource&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SliceableCursor","synthetic":true,"types":[]},{"text":"impl Unpin for InMemoryWriteableCursor","synthetic":true,"types":[]},{"text":"impl Unpin for ParquetFileArrowReader","synthetic":true,"types":[]},{"text":"impl Unpin for ParquetRecordBatchReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for ArrowWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Page","synthetic":true,"types":[]},{"text":"impl Unpin for CompressedPage","synthetic":true,"types":[]},{"text":"impl Unpin for PageWriteSpec","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnReader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ColumnReaderImpl&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnWriter","synthetic":true,"types":[]},{"text":"impl Unpin for Level","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ColumnWriterImpl&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for SnappyCodec","synthetic":true,"types":[]},{"text":"impl Unpin for GZipCodec","synthetic":true,"types":[]},{"text":"impl Unpin for BrotliCodec","synthetic":true,"types":[]},{"text":"impl Unpin for LZ4Codec","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTDCodec","synthetic":true,"types":[]},{"text":"impl Unpin for ParquetMetaData","synthetic":true,"types":[]},{"text":"impl Unpin for FileMetaData","synthetic":true,"types":[]},{"text":"impl Unpin for RowGroupMetaData","synthetic":true,"types":[]},{"text":"impl Unpin for RowGroupMetaDataBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnChunkMetaData","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnChunkMetaDataBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for WriterVersion","synthetic":true,"types":[]},{"text":"impl Unpin for WriterProperties","synthetic":true,"types":[]},{"text":"impl Unpin for WriterPropertiesBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for FilePageIterator","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for SerializedFileReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Unpin for SerializedRowGroupReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SerializedPageReader&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Statistics","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TypedStatistics&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for SerializedFileWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for SerializedRowGroupWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for SerializedPageWriter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Row","synthetic":true,"types":[]},{"text":"impl Unpin for List","synthetic":true,"types":[]},{"text":"impl Unpin for Map","synthetic":true,"types":[]},{"text":"impl Unpin for Field","synthetic":true,"types":[]},{"text":"impl Unpin for TreeBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for Reader","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RowIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ReaderIter","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PrimitiveTypeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for GroupTypeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BasicTypeInfo","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnPath","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnDescriptor","synthetic":true,"types":[]},{"text":"impl Unpin for SchemaDescriptor","synthetic":true,"types":[]}];
implementors["parquet_format"] = [{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for ConvertedType","synthetic":true,"types":[]},{"text":"impl Unpin for FieldRepetitionType","synthetic":true,"types":[]},{"text":"impl Unpin for Encoding","synthetic":true,"types":[]},{"text":"impl Unpin for CompressionCodec","synthetic":true,"types":[]},{"text":"impl Unpin for PageType","synthetic":true,"types":[]},{"text":"impl Unpin for BoundaryOrder","synthetic":true,"types":[]},{"text":"impl Unpin for Statistics","synthetic":true,"types":[]},{"text":"impl Unpin for StringType","synthetic":true,"types":[]},{"text":"impl Unpin for UUIDType","synthetic":true,"types":[]},{"text":"impl Unpin for MapType","synthetic":true,"types":[]},{"text":"impl Unpin for ListType","synthetic":true,"types":[]},{"text":"impl Unpin for EnumType","synthetic":true,"types":[]},{"text":"impl Unpin for DateType","synthetic":true,"types":[]},{"text":"impl Unpin for NullType","synthetic":true,"types":[]},{"text":"impl Unpin for DecimalType","synthetic":true,"types":[]},{"text":"impl Unpin for MilliSeconds","synthetic":true,"types":[]},{"text":"impl Unpin for MicroSeconds","synthetic":true,"types":[]},{"text":"impl Unpin for NanoSeconds","synthetic":true,"types":[]},{"text":"impl Unpin for TimeUnit","synthetic":true,"types":[]},{"text":"impl Unpin for TimestampType","synthetic":true,"types":[]},{"text":"impl Unpin for TimeType","synthetic":true,"types":[]},{"text":"impl Unpin for IntType","synthetic":true,"types":[]},{"text":"impl Unpin for JsonType","synthetic":true,"types":[]},{"text":"impl Unpin for BsonType","synthetic":true,"types":[]},{"text":"impl Unpin for LogicalType","synthetic":true,"types":[]},{"text":"impl Unpin for SchemaElement","synthetic":true,"types":[]},{"text":"impl Unpin for DataPageHeader","synthetic":true,"types":[]},{"text":"impl Unpin for IndexPageHeader","synthetic":true,"types":[]},{"text":"impl Unpin for DictionaryPageHeader","synthetic":true,"types":[]},{"text":"impl Unpin for DataPageHeaderV2","synthetic":true,"types":[]},{"text":"impl Unpin for PageHeader","synthetic":true,"types":[]},{"text":"impl Unpin for KeyValue","synthetic":true,"types":[]},{"text":"impl Unpin for SortingColumn","synthetic":true,"types":[]},{"text":"impl Unpin for PageEncodingStats","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnMetaData","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnChunk","synthetic":true,"types":[]},{"text":"impl Unpin for RowGroup","synthetic":true,"types":[]},{"text":"impl Unpin for TypeDefinedOrder","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnOrder","synthetic":true,"types":[]},{"text":"impl Unpin for PageLocation","synthetic":true,"types":[]},{"text":"impl Unpin for OffsetIndex","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnIndex","synthetic":true,"types":[]},{"text":"impl Unpin for FileMetaData","synthetic":true,"types":[]}];
implementors["polars_arrow"] = [{"text":"impl Unpin for BooleanBufferBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for BooleanArrayBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for PrimitiveArrayBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for LargeStringBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for PolarsError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for AlignedVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["polars_core"] = [{"text":"impl&lt;T&gt; Unpin for NoNull&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Node","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Arena&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for DynamicZip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumTakeRandomChunked&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumTakeRandomCont&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for InitFold","synthetic":true,"types":[]},{"text":"impl Unpin for FillNoneStrategy","synthetic":true,"types":[]},{"text":"impl Unpin for BooleanChunkedBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for PrimitiveChunkedBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CategoricalChunkedBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8ChunkedBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8ChunkedBuilderCow","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ListPrimitiveChunkedBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ListUtf8ChunkedBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for ListBooleanChunkedBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanParIterManyChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanNoNullParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListParIterManyChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListNoNullParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumParIterSingleChunkReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumParIterSingleChunkNullCheckReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumParIterManyChunkReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumParIterManyChunkNullCheckReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumParIterSingleChunkReturnUnwrapped&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumParIterManyChunkReturnUnwrapped&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumParIterDispatcher&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumNoNullParIterDispatcher&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8ParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8ParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8ParIterManyChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8ParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8ParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8ParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8ParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8NoNullParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for SomeIterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumIterSingleChunk&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumIterSingleChunkNullCheck&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumIterManyChunk&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for NumIterManyChunkNullCheck&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8IterSingleChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8IterSingleChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8IterManyChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Utf8IterManyChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanIterSingleChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanIterSingleChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanIterManyChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for BooleanIterManyChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListIterSingleChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListIterSingleChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListIterManyChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ListIterManyChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ObjectChunkedBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ObjectArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ChunkedArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for NoNull&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8Type","synthetic":true,"types":[]},{"text":"impl Unpin for ListType","synthetic":true,"types":[]},{"text":"impl Unpin for CategoricalType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ObjectType&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for AnyValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DataType","synthetic":true,"types":[]},{"text":"impl Unpin for Field","synthetic":true,"types":[]},{"text":"impl Unpin for Schema","synthetic":true,"types":[]},{"text":"impl Unpin for PolarsError","synthetic":true,"types":[]},{"text":"impl&lt;'df, 'selection_str&gt; Unpin for GroupBy&lt;'df, 'selection_str&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for GroupByMethod","synthetic":true,"types":[]},{"text":"impl&lt;'df, 'selection_str&gt; Unpin for Pivot&lt;'df, 'selection_str&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'selection_str: 'df,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for PivotAgg","synthetic":true,"types":[]},{"text":"impl Unpin for JoinType","synthetic":true,"types":[]},{"text":"impl Unpin for SampleRule","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Row&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for DataFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for RecordBatchIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Series","synthetic":true,"types":[]}];
implementors["polars_io"] = [{"text":"impl&lt;'a, W&gt; Unpin for CsvWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CsvEncoding","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Unpin for CsvReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for SequentialReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for IPCReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for IPCWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for JsonReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for ParquetReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ScanAggregation","synthetic":true,"types":[]}];
implementors["polars_lazy"] = [{"text":"impl Unpin for AggExpr","synthetic":true,"types":[]},{"text":"impl Unpin for Expr","synthetic":true,"types":[]},{"text":"impl Unpin for Operator","synthetic":true,"types":[]},{"text":"impl Unpin for When","synthetic":true,"types":[]},{"text":"impl Unpin for WhenThen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for LazyCsvReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for JoinOptions","synthetic":true,"types":[]},{"text":"impl Unpin for LazyFrame","synthetic":true,"types":[]},{"text":"impl Unpin for OptState","synthetic":true,"types":[]},{"text":"impl Unpin for LazyGroupBy","synthetic":true,"types":[]},{"text":"impl Unpin for PredicatePushDown","synthetic":true,"types":[]},{"text":"impl Unpin for ProjectionPushDown","synthetic":true,"types":[]},{"text":"impl Unpin for TypeCoercionRule","synthetic":true,"types":[]},{"text":"impl Unpin for StackOptimizer","synthetic":true,"types":[]},{"text":"impl Unpin for AAggExpr","synthetic":true,"types":[]},{"text":"impl Unpin for AExpr","synthetic":true,"types":[]},{"text":"impl Unpin for ALogicalPlan","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ALogicalPlanBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ScalarValue","synthetic":true,"types":[]},{"text":"impl Unpin for LogicalPlan","synthetic":true,"types":[]},{"text":"impl Unpin for LogicalPlanBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for CacheExec","synthetic":true,"types":[]},{"text":"impl Unpin for ParquetExec","synthetic":true,"types":[]},{"text":"impl Unpin for CsvExec","synthetic":true,"types":[]},{"text":"impl Unpin for FilterExec","synthetic":true,"types":[]},{"text":"impl Unpin for DataFrameExec","synthetic":true,"types":[]},{"text":"impl Unpin for StandardExec","synthetic":true,"types":[]},{"text":"impl Unpin for GroupByExec","synthetic":true,"types":[]},{"text":"impl Unpin for JoinExec","synthetic":true,"types":[]},{"text":"impl Unpin for StackExec","synthetic":true,"types":[]},{"text":"impl Unpin for SliceExec","synthetic":true,"types":[]},{"text":"impl Unpin for MeltExec","synthetic":true,"types":[]},{"text":"impl Unpin for LiteralExpr","synthetic":true,"types":[]},{"text":"impl Unpin for BinaryExpr","synthetic":true,"types":[]},{"text":"impl Unpin for ColumnExpr","synthetic":true,"types":[]},{"text":"impl Unpin for SortExpr","synthetic":true,"types":[]},{"text":"impl Unpin for NotExpr","synthetic":true,"types":[]},{"text":"impl Unpin for AliasExpr","synthetic":true,"types":[]},{"text":"impl Unpin for IsNullExpr","synthetic":true,"types":[]},{"text":"impl Unpin for IsNotNullExpr","synthetic":true,"types":[]},{"text":"impl Unpin for AggQuantileExpr","synthetic":true,"types":[]},{"text":"impl Unpin for CastExpr","synthetic":true,"types":[]},{"text":"impl Unpin for TernaryExpr","synthetic":true,"types":[]},{"text":"impl Unpin for ApplyExpr","synthetic":true,"types":[]},{"text":"impl Unpin for WindowExpr","synthetic":true,"types":[]},{"text":"impl Unpin for SliceExpr","synthetic":true,"types":[]},{"text":"impl Unpin for DefaultPlanner","synthetic":true,"types":[]},{"text":"impl Unpin for ExprVal","synthetic":true,"types":[]},{"text":"impl Unpin for PhysicalIOHelper","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Unpin for YesS3","synthetic":true,"types":[]},{"text":"impl Unpin for NoS3","synthetic":true,"types":[]},{"text":"impl Unpin for YesS4","synthetic":true,"types":[]},{"text":"impl Unpin for NoS4","synthetic":true,"types":[]},{"text":"impl Unpin for YesA1","synthetic":true,"types":[]},{"text":"impl Unpin for NoA1","synthetic":true,"types":[]},{"text":"impl Unpin for YesA2","synthetic":true,"types":[]},{"text":"impl Unpin for NoA2","synthetic":true,"types":[]},{"text":"impl Unpin for YesNI","synthetic":true,"types":[]},{"text":"impl Unpin for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Unpin for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Unpin for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for vec128_storage","synthetic":true,"types":[]},{"text":"impl Unpin for vec256_storage","synthetic":true,"types":[]},{"text":"impl Unpin for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Unpin for IntoIter","synthetic":true,"types":[]},{"text":"impl Unpin for TokenStream","synthetic":true,"types":[]},{"text":"impl Unpin for LexError","synthetic":true,"types":[]},{"text":"impl Unpin for Span","synthetic":true,"types":[]},{"text":"impl Unpin for TokenTree","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for Delimiter","synthetic":true,"types":[]},{"text":"impl Unpin for Punct","synthetic":true,"types":[]},{"text":"impl Unpin for Spacing","synthetic":true,"types":[]},{"text":"impl Unpin for Ident","synthetic":true,"types":[]},{"text":"impl Unpin for Literal","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Unpin for Bernoulli","synthetic":true,"types":[]},{"text":"impl Unpin for BernoulliError","synthetic":true,"types":[]},{"text":"impl Unpin for Binomial","synthetic":true,"types":[]},{"text":"impl Unpin for Cauchy","synthetic":true,"types":[]},{"text":"impl Unpin for Dirichlet","synthetic":true,"types":[]},{"text":"impl Unpin for Exp1","synthetic":true,"types":[]},{"text":"impl Unpin for Exp","synthetic":true,"types":[]},{"text":"impl Unpin for Gamma","synthetic":true,"types":[]},{"text":"impl Unpin for ChiSquared","synthetic":true,"types":[]},{"text":"impl Unpin for FisherF","synthetic":true,"types":[]},{"text":"impl Unpin for StudentT","synthetic":true,"types":[]},{"text":"impl Unpin for Beta","synthetic":true,"types":[]},{"text":"impl Unpin for StandardNormal","synthetic":true,"types":[]},{"text":"impl Unpin for Normal","synthetic":true,"types":[]},{"text":"impl Unpin for LogNormal","synthetic":true,"types":[]},{"text":"impl Unpin for Pareto","synthetic":true,"types":[]},{"text":"impl Unpin for Poisson","synthetic":true,"types":[]},{"text":"impl Unpin for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Unpin for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Unpin for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Unpin for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for UniformDuration","synthetic":true,"types":[]},{"text":"impl Unpin for UnitCircle","synthetic":true,"types":[]},{"text":"impl Unpin for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Unpin for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Unpin for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for WeightedError","synthetic":true,"types":[]},{"text":"impl Unpin for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Unpin for Open01","synthetic":true,"types":[]},{"text":"impl Unpin for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Unpin for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Unpin for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for EntropyRng","synthetic":true,"types":[]},{"text":"impl Unpin for StepRng","synthetic":true,"types":[]},{"text":"impl Unpin for StdRng","synthetic":true,"types":[]},{"text":"impl Unpin for ThreadRng","synthetic":true,"types":[]},{"text":"impl Unpin for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Unpin for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Unpin for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Unpin for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Unpin for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Unpin for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for OsRng","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl&lt;W&gt; Unpin for WeightedAliasIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Binomial","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Cauchy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Dirichlet&lt;F&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Exp&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Gamma&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for ChiSquared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for FisherF&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for FisherFError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for StudentT&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Beta&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for BetaError","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for InverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Normal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for LogNormal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for NormalInverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Pareto&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Pert&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for PertError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Poisson&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Triangular&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TriangularError","synthetic":true,"types":[]},{"text":"impl Unpin for UnitBall","synthetic":true,"types":[]},{"text":"impl Unpin for UnitCircle","synthetic":true,"types":[]},{"text":"impl Unpin for UnitDisc","synthetic":true,"types":[]},{"text":"impl Unpin for UnitSphere","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Unpin for Weibull&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Unpin for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Unpin for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Unpin for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Unpin for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Unpin for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Unpin for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Unpin for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Unpin for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Unpin for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Unpin for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Unpin for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Unpin for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Unpin for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Unpin for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Unpin for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Unpin for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Unpin for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Unpin for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for IterMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for ChunksMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for ChunksExactMut&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Unpin for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Unpin for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Unpin for Split&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Unpin for SplitTerminator&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Unpin for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Unpin for Matches&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Unpin for MatchIndices&lt;'ch, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Unpin for Drain&lt;'data, T&gt;","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Unpin for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Unpin for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Unpin for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ThreadPool","synthetic":true,"types":[]},{"text":"impl Unpin for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for ThreadPoolBuilder&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Configuration","synthetic":true,"types":[]},{"text":"impl Unpin for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Unpin for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Unpin for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Unpin for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Unpin for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Unpin for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Unpin for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Unpin for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Unpin for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Unpin for SubCaptureMatches&lt;'c, 't&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'t: 'c,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Unpin for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Unpin for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for RegexSet","synthetic":true,"types":[]},{"text":"impl Unpin for SetMatches","synthetic":true,"types":[]},{"text":"impl Unpin for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for RegexSet","synthetic":true,"types":[]},{"text":"impl Unpin for SetMatches","synthetic":true,"types":[]},{"text":"impl Unpin for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Unpin for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Unpin for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Unpin for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Unpin for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Unpin for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Unpin for SubCaptureMatches&lt;'c, 't&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;'t: 'c,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Unpin for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Unpin for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Unpin for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Unpin for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;T, S&gt; Unpin for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Unpin for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Unpin for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Unpin for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for Parser","synthetic":true,"types":[]},{"text":"impl Unpin for Printer","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for ErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for Span","synthetic":true,"types":[]},{"text":"impl Unpin for Position","synthetic":true,"types":[]},{"text":"impl Unpin for WithComments","synthetic":true,"types":[]},{"text":"impl Unpin for Comment","synthetic":true,"types":[]},{"text":"impl Unpin for Ast","synthetic":true,"types":[]},{"text":"impl Unpin for Alternation","synthetic":true,"types":[]},{"text":"impl Unpin for Concat","synthetic":true,"types":[]},{"text":"impl Unpin for Literal","synthetic":true,"types":[]},{"text":"impl Unpin for LiteralKind","synthetic":true,"types":[]},{"text":"impl Unpin for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Unpin for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Unpin for Class","synthetic":true,"types":[]},{"text":"impl Unpin for ClassPerl","synthetic":true,"types":[]},{"text":"impl Unpin for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Unpin for ClassAscii","synthetic":true,"types":[]},{"text":"impl Unpin for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Unpin for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Unpin for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Unpin for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Unpin for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Unpin for ClassSet","synthetic":true,"types":[]},{"text":"impl Unpin for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Unpin for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Unpin for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Unpin for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Unpin for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Unpin for Assertion","synthetic":true,"types":[]},{"text":"impl Unpin for AssertionKind","synthetic":true,"types":[]},{"text":"impl Unpin for Repetition","synthetic":true,"types":[]},{"text":"impl Unpin for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Unpin for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Unpin for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for GroupKind","synthetic":true,"types":[]},{"text":"impl Unpin for CaptureName","synthetic":true,"types":[]},{"text":"impl Unpin for SetFlags","synthetic":true,"types":[]},{"text":"impl Unpin for Flags","synthetic":true,"types":[]},{"text":"impl Unpin for FlagsItem","synthetic":true,"types":[]},{"text":"impl Unpin for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Unpin for Flag","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Literals","synthetic":true,"types":[]},{"text":"impl Unpin for Literal","synthetic":true,"types":[]},{"text":"impl Unpin for Printer","synthetic":true,"types":[]},{"text":"impl Unpin for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for Translator","synthetic":true,"types":[]},{"text":"impl Unpin for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for ErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for Hir","synthetic":true,"types":[]},{"text":"impl Unpin for HirKind","synthetic":true,"types":[]},{"text":"impl Unpin for Literal","synthetic":true,"types":[]},{"text":"impl Unpin for Class","synthetic":true,"types":[]},{"text":"impl Unpin for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Unpin for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Unpin for Anchor","synthetic":true,"types":[]},{"text":"impl Unpin for WordBoundary","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for GroupKind","synthetic":true,"types":[]},{"text":"impl Unpin for Repetition","synthetic":true,"types":[]},{"text":"impl Unpin for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Unpin for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Unpin for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Unpin for Parser","synthetic":true,"types":[]},{"text":"impl Unpin for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8Range","synthetic":true,"types":[]},{"text":"impl Unpin for Utf8Sequences","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Unpin for Buffer","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Unpin for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Unpin for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Unpin for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Unpin for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Unpin for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Unpin for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Unpin for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Unpin for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Unpin for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Unpin for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Unpin for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Unpin for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Unpin for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Unpin for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for CharEscape","synthetic":true,"types":[]},{"text":"impl Unpin for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Serializer","synthetic":true,"types":[]},{"text":"impl Unpin for Number","synthetic":true,"types":[]},{"text":"impl Unpin for Value","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl Unpin for Signals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Pending&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Forever&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Unpin for SigId","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl Unpin for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Unpin for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["snap"] = [{"text":"impl Unpin for Encoder","synthetic":true,"types":[]},{"text":"impl Unpin for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for FrameDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Unpin for FrameEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Unpin for FrameEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["strum"] = [{"text":"impl Unpin for ParseError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Unpin for Underscore","synthetic":true,"types":[]},{"text":"impl Unpin for Abstract","synthetic":true,"types":[]},{"text":"impl Unpin for As","synthetic":true,"types":[]},{"text":"impl Unpin for Async","synthetic":true,"types":[]},{"text":"impl Unpin for Auto","synthetic":true,"types":[]},{"text":"impl Unpin for Await","synthetic":true,"types":[]},{"text":"impl Unpin for Become","synthetic":true,"types":[]},{"text":"impl Unpin for Box","synthetic":true,"types":[]},{"text":"impl Unpin for Break","synthetic":true,"types":[]},{"text":"impl Unpin for Const","synthetic":true,"types":[]},{"text":"impl Unpin for Continue","synthetic":true,"types":[]},{"text":"impl Unpin for Crate","synthetic":true,"types":[]},{"text":"impl Unpin for Default","synthetic":true,"types":[]},{"text":"impl Unpin for Do","synthetic":true,"types":[]},{"text":"impl Unpin for Dyn","synthetic":true,"types":[]},{"text":"impl Unpin for Else","synthetic":true,"types":[]},{"text":"impl Unpin for Enum","synthetic":true,"types":[]},{"text":"impl Unpin for Extern","synthetic":true,"types":[]},{"text":"impl Unpin for Final","synthetic":true,"types":[]},{"text":"impl Unpin for Fn","synthetic":true,"types":[]},{"text":"impl Unpin for For","synthetic":true,"types":[]},{"text":"impl Unpin for If","synthetic":true,"types":[]},{"text":"impl Unpin for Impl","synthetic":true,"types":[]},{"text":"impl Unpin for In","synthetic":true,"types":[]},{"text":"impl Unpin for Let","synthetic":true,"types":[]},{"text":"impl Unpin for Loop","synthetic":true,"types":[]},{"text":"impl Unpin for Macro","synthetic":true,"types":[]},{"text":"impl Unpin for Match","synthetic":true,"types":[]},{"text":"impl Unpin for Mod","synthetic":true,"types":[]},{"text":"impl Unpin for Move","synthetic":true,"types":[]},{"text":"impl Unpin for Mut","synthetic":true,"types":[]},{"text":"impl Unpin for Override","synthetic":true,"types":[]},{"text":"impl Unpin for Priv","synthetic":true,"types":[]},{"text":"impl Unpin for Pub","synthetic":true,"types":[]},{"text":"impl Unpin for Ref","synthetic":true,"types":[]},{"text":"impl Unpin for Return","synthetic":true,"types":[]},{"text":"impl Unpin for SelfType","synthetic":true,"types":[]},{"text":"impl Unpin for SelfValue","synthetic":true,"types":[]},{"text":"impl Unpin for Static","synthetic":true,"types":[]},{"text":"impl Unpin for Struct","synthetic":true,"types":[]},{"text":"impl Unpin for Super","synthetic":true,"types":[]},{"text":"impl Unpin for Trait","synthetic":true,"types":[]},{"text":"impl Unpin for Try","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for Typeof","synthetic":true,"types":[]},{"text":"impl Unpin for Union","synthetic":true,"types":[]},{"text":"impl Unpin for Unsafe","synthetic":true,"types":[]},{"text":"impl Unpin for Unsized","synthetic":true,"types":[]},{"text":"impl Unpin for Use","synthetic":true,"types":[]},{"text":"impl Unpin for Virtual","synthetic":true,"types":[]},{"text":"impl Unpin for Where","synthetic":true,"types":[]},{"text":"impl Unpin for While","synthetic":true,"types":[]},{"text":"impl Unpin for Yield","synthetic":true,"types":[]},{"text":"impl Unpin for Add","synthetic":true,"types":[]},{"text":"impl Unpin for AddEq","synthetic":true,"types":[]},{"text":"impl Unpin for And","synthetic":true,"types":[]},{"text":"impl Unpin for AndAnd","synthetic":true,"types":[]},{"text":"impl Unpin for AndEq","synthetic":true,"types":[]},{"text":"impl Unpin for At","synthetic":true,"types":[]},{"text":"impl Unpin for Bang","synthetic":true,"types":[]},{"text":"impl Unpin for Caret","synthetic":true,"types":[]},{"text":"impl Unpin for CaretEq","synthetic":true,"types":[]},{"text":"impl Unpin for Colon","synthetic":true,"types":[]},{"text":"impl Unpin for Colon2","synthetic":true,"types":[]},{"text":"impl Unpin for Comma","synthetic":true,"types":[]},{"text":"impl Unpin for Div","synthetic":true,"types":[]},{"text":"impl Unpin for DivEq","synthetic":true,"types":[]},{"text":"impl Unpin for Dollar","synthetic":true,"types":[]},{"text":"impl Unpin for Dot","synthetic":true,"types":[]},{"text":"impl Unpin for Dot2","synthetic":true,"types":[]},{"text":"impl Unpin for Dot3","synthetic":true,"types":[]},{"text":"impl Unpin for DotDotEq","synthetic":true,"types":[]},{"text":"impl Unpin for Eq","synthetic":true,"types":[]},{"text":"impl Unpin for EqEq","synthetic":true,"types":[]},{"text":"impl Unpin for Ge","synthetic":true,"types":[]},{"text":"impl Unpin for Gt","synthetic":true,"types":[]},{"text":"impl Unpin for Le","synthetic":true,"types":[]},{"text":"impl Unpin for Lt","synthetic":true,"types":[]},{"text":"impl Unpin for MulEq","synthetic":true,"types":[]},{"text":"impl Unpin for Ne","synthetic":true,"types":[]},{"text":"impl Unpin for Or","synthetic":true,"types":[]},{"text":"impl Unpin for OrEq","synthetic":true,"types":[]},{"text":"impl Unpin for OrOr","synthetic":true,"types":[]},{"text":"impl Unpin for Pound","synthetic":true,"types":[]},{"text":"impl Unpin for Question","synthetic":true,"types":[]},{"text":"impl Unpin for RArrow","synthetic":true,"types":[]},{"text":"impl Unpin for LArrow","synthetic":true,"types":[]},{"text":"impl Unpin for Rem","synthetic":true,"types":[]},{"text":"impl Unpin for RemEq","synthetic":true,"types":[]},{"text":"impl Unpin for FatArrow","synthetic":true,"types":[]},{"text":"impl Unpin for Semi","synthetic":true,"types":[]},{"text":"impl Unpin for Shl","synthetic":true,"types":[]},{"text":"impl Unpin for ShlEq","synthetic":true,"types":[]},{"text":"impl Unpin for Shr","synthetic":true,"types":[]},{"text":"impl Unpin for ShrEq","synthetic":true,"types":[]},{"text":"impl Unpin for Star","synthetic":true,"types":[]},{"text":"impl Unpin for Sub","synthetic":true,"types":[]},{"text":"impl Unpin for SubEq","synthetic":true,"types":[]},{"text":"impl Unpin for Tilde","synthetic":true,"types":[]},{"text":"impl Unpin for Brace","synthetic":true,"types":[]},{"text":"impl Unpin for Bracket","synthetic":true,"types":[]},{"text":"impl Unpin for Paren","synthetic":true,"types":[]},{"text":"impl Unpin for Group","synthetic":true,"types":[]},{"text":"impl Unpin for Attribute","synthetic":true,"types":[]},{"text":"impl Unpin for AttrStyle","synthetic":true,"types":[]},{"text":"impl Unpin for Meta","synthetic":true,"types":[]},{"text":"impl Unpin for MetaList","synthetic":true,"types":[]},{"text":"impl Unpin for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Unpin for NestedMeta","synthetic":true,"types":[]},{"text":"impl Unpin for Variant","synthetic":true,"types":[]},{"text":"impl Unpin for Fields","synthetic":true,"types":[]},{"text":"impl Unpin for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Unpin for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Unpin for Field","synthetic":true,"types":[]},{"text":"impl Unpin for Visibility","synthetic":true,"types":[]},{"text":"impl Unpin for VisPublic","synthetic":true,"types":[]},{"text":"impl Unpin for VisCrate","synthetic":true,"types":[]},{"text":"impl Unpin for VisRestricted","synthetic":true,"types":[]},{"text":"impl Unpin for Expr","synthetic":true,"types":[]},{"text":"impl Unpin for ExprArray","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAssign","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAsync","synthetic":true,"types":[]},{"text":"impl Unpin for ExprAwait","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBinary","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBlock","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBox","synthetic":true,"types":[]},{"text":"impl Unpin for ExprBreak","synthetic":true,"types":[]},{"text":"impl Unpin for ExprCall","synthetic":true,"types":[]},{"text":"impl Unpin for ExprCast","synthetic":true,"types":[]},{"text":"impl Unpin for ExprClosure","synthetic":true,"types":[]},{"text":"impl Unpin for ExprContinue","synthetic":true,"types":[]},{"text":"impl Unpin for ExprField","synthetic":true,"types":[]},{"text":"impl Unpin for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Unpin for ExprGroup","synthetic":true,"types":[]},{"text":"impl Unpin for ExprIf","synthetic":true,"types":[]},{"text":"impl Unpin for ExprIndex","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLet","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLit","synthetic":true,"types":[]},{"text":"impl Unpin for ExprLoop","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMacro","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMatch","synthetic":true,"types":[]},{"text":"impl Unpin for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Unpin for ExprParen","synthetic":true,"types":[]},{"text":"impl Unpin for ExprPath","synthetic":true,"types":[]},{"text":"impl Unpin for ExprRange","synthetic":true,"types":[]},{"text":"impl Unpin for ExprReference","synthetic":true,"types":[]},{"text":"impl Unpin for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Unpin for ExprReturn","synthetic":true,"types":[]},{"text":"impl Unpin for ExprStruct","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTry","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Unpin for ExprTuple","synthetic":true,"types":[]},{"text":"impl Unpin for ExprType","synthetic":true,"types":[]},{"text":"impl Unpin for ExprUnary","synthetic":true,"types":[]},{"text":"impl Unpin for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Unpin for ExprWhile","synthetic":true,"types":[]},{"text":"impl Unpin for ExprYield","synthetic":true,"types":[]},{"text":"impl Unpin for Member","synthetic":true,"types":[]},{"text":"impl Unpin for Index","synthetic":true,"types":[]},{"text":"impl Unpin for Generics","synthetic":true,"types":[]},{"text":"impl Unpin for GenericParam","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParam","synthetic":true,"types":[]},{"text":"impl Unpin for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Unpin for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Unpin for TraitBound","synthetic":true,"types":[]},{"text":"impl Unpin for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Unpin for WhereClause","synthetic":true,"types":[]},{"text":"impl Unpin for WherePredicate","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateType","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Unpin for PredicateEq","synthetic":true,"types":[]},{"text":"impl Unpin for Lifetime","synthetic":true,"types":[]},{"text":"impl Unpin for Lit","synthetic":true,"types":[]},{"text":"impl Unpin for LitStr","synthetic":true,"types":[]},{"text":"impl Unpin for LitByteStr","synthetic":true,"types":[]},{"text":"impl Unpin for LitByte","synthetic":true,"types":[]},{"text":"impl Unpin for LitChar","synthetic":true,"types":[]},{"text":"impl Unpin for LitInt","synthetic":true,"types":[]},{"text":"impl Unpin for LitFloat","synthetic":true,"types":[]},{"text":"impl Unpin for LitBool","synthetic":true,"types":[]},{"text":"impl Unpin for StrStyle","synthetic":true,"types":[]},{"text":"impl Unpin for Macro","synthetic":true,"types":[]},{"text":"impl Unpin for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Unpin for DeriveInput","synthetic":true,"types":[]},{"text":"impl Unpin for Data","synthetic":true,"types":[]},{"text":"impl Unpin for DataStruct","synthetic":true,"types":[]},{"text":"impl Unpin for DataEnum","synthetic":true,"types":[]},{"text":"impl Unpin for DataUnion","synthetic":true,"types":[]},{"text":"impl Unpin for BinOp","synthetic":true,"types":[]},{"text":"impl Unpin for UnOp","synthetic":true,"types":[]},{"text":"impl Unpin for Type","synthetic":true,"types":[]},{"text":"impl Unpin for TypeArray","synthetic":true,"types":[]},{"text":"impl Unpin for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Unpin for TypeGroup","synthetic":true,"types":[]},{"text":"impl Unpin for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Unpin for TypeInfer","synthetic":true,"types":[]},{"text":"impl Unpin for TypeMacro","synthetic":true,"types":[]},{"text":"impl Unpin for TypeNever","synthetic":true,"types":[]},{"text":"impl Unpin for TypeParen","synthetic":true,"types":[]},{"text":"impl Unpin for TypePath","synthetic":true,"types":[]},{"text":"impl Unpin for TypePtr","synthetic":true,"types":[]},{"text":"impl Unpin for TypeReference","synthetic":true,"types":[]},{"text":"impl Unpin for TypeSlice","synthetic":true,"types":[]},{"text":"impl Unpin for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Unpin for TypeTuple","synthetic":true,"types":[]},{"text":"impl Unpin for Abi","synthetic":true,"types":[]},{"text":"impl Unpin for BareFnArg","synthetic":true,"types":[]},{"text":"impl Unpin for Variadic","synthetic":true,"types":[]},{"text":"impl Unpin for ReturnType","synthetic":true,"types":[]},{"text":"impl Unpin for Path","synthetic":true,"types":[]},{"text":"impl Unpin for PathSegment","synthetic":true,"types":[]},{"text":"impl Unpin for PathArguments","synthetic":true,"types":[]},{"text":"impl Unpin for GenericArgument","synthetic":true,"types":[]},{"text":"impl Unpin for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Unpin for Binding","synthetic":true,"types":[]},{"text":"impl Unpin for Constraint","synthetic":true,"types":[]},{"text":"impl Unpin for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Unpin for QSelf","synthetic":true,"types":[]},{"text":"impl Unpin for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Unpin for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Unpin for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Unpin for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Unpin for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for Nothing","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; Unpin for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Unpin for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["threadpool"] = [{"text":"impl Unpin for Builder","synthetic":true,"types":[]},{"text":"impl Unpin for ThreadPool","synthetic":true,"types":[]}];
implementors["thrift"] = [{"text":"impl&lt;T&gt; Unpin for TBinaryInputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TBinaryInputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TBinaryOutputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TBinaryOutputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TCompactInputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TCompactInputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Unpin for TCompactOutputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TCompactOutputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Unpin for TMultiplexedOutputProtocol&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TStoredInputProtocol&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for TMessageIdentifier","synthetic":true,"types":[]},{"text":"impl Unpin for TStructIdentifier","synthetic":true,"types":[]},{"text":"impl Unpin for TFieldIdentifier","synthetic":true,"types":[]},{"text":"impl Unpin for TListIdentifier","synthetic":true,"types":[]},{"text":"impl Unpin for TSetIdentifier","synthetic":true,"types":[]},{"text":"impl Unpin for TMapIdentifier","synthetic":true,"types":[]},{"text":"impl Unpin for TMessageType","synthetic":true,"types":[]},{"text":"impl Unpin for TType","synthetic":true,"types":[]},{"text":"impl Unpin for TMultiplexedProcessor","synthetic":true,"types":[]},{"text":"impl&lt;PRC, RTF, IPF, WTF, OPF&gt; Unpin for TServer&lt;PRC, RTF, IPF, WTF, OPF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IPF: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;OPF: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;RTF: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;WTF: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Unpin for TBufferedReadTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TBufferedReadTransportFactory","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Unpin for TBufferedWriteTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TBufferedWriteTransportFactory","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Unpin for TFramedReadTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TFramedReadTransportFactory","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Unpin for TFramedWriteTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for TFramedWriteTransportFactory","synthetic":true,"types":[]},{"text":"impl Unpin for TBufferChannel","synthetic":true,"types":[]},{"text":"impl Unpin for TTcpChannel","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Unpin for ReadHalf&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Unpin for WriteHalf&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for Error","synthetic":true,"types":[]},{"text":"impl Unpin for TransportError","synthetic":true,"types":[]},{"text":"impl Unpin for TransportErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for ProtocolError","synthetic":true,"types":[]},{"text":"impl Unpin for ProtocolErrorKind","synthetic":true,"types":[]},{"text":"impl Unpin for ApplicationError","synthetic":true,"types":[]},{"text":"impl Unpin for ApplicationErrorKind","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Unpin for Duration","synthetic":true,"types":[]},{"text":"impl Unpin for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Unpin for Timespec","synthetic":true,"types":[]},{"text":"impl Unpin for PreciseTime","synthetic":true,"types":[]},{"text":"impl Unpin for SteadyTime","synthetic":true,"types":[]},{"text":"impl Unpin for Tm","synthetic":true,"types":[]},{"text":"impl Unpin for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Unpin for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl Unpin for GraphemeIncomplete","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["zstd"] = [{"text":"impl Unpin for Compressor","synthetic":true,"types":[]},{"text":"impl Unpin for Decompressor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for EncoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for DecoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Unpin for Decoder&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Unpin for Encoder&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for Encoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for Decoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Unpin for AutoFinishEncoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Unpin for Reader&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, D&gt; Unpin for Writer&lt;W, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for NoOp","synthetic":true,"types":[]},{"text":"impl Unpin for Status","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Decoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for Encoder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl&lt;'a&gt; Unpin for CCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for DCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for CDict&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for DDict&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for InBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Unpin for OutBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Unpin for FrameFormat","synthetic":true,"types":[]},{"text":"impl Unpin for CParameter","synthetic":true,"types":[]},{"text":"impl Unpin for DParameter","synthetic":true,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Unpin for ZSTD_CCtx_s","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_DCtx_s","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_strategy","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_cParameter","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_bounds","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_ResetDirective","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_dParameter","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_inBuffer_s","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_outBuffer_s","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_EndDirective","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_CDict_s","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_DDict_s","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_CCtx_params_s","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_Sequence","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_compressionParameters","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_frameParameters","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_parameters","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_dictContentType_e","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_dictLoadMethod_e","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_format_e","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_forceIgnoreChecksum_e","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_dictAttachPref_e","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_literalCompressionMode_e","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_sequenceFormat_e","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_customMem","synthetic":true,"types":[]},{"text":"impl Unpin for POOL_ctx_s","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_frameProgression","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_frameType_e","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_frameHeader","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTD_nextInputType_e","synthetic":true,"types":[]},{"text":"impl Unpin for ZDICT_params_t","synthetic":true,"types":[]},{"text":"impl Unpin for ZDICT_cover_params_t","synthetic":true,"types":[]},{"text":"impl Unpin for ZDICT_fastCover_params_t","synthetic":true,"types":[]},{"text":"impl Unpin for ZDICT_legacy_params_t","synthetic":true,"types":[]},{"text":"impl Unpin for __locale_struct","synthetic":true,"types":[]},{"text":"impl Unpin for ZSTDMT_CCtx_s","synthetic":true,"types":[]},{"text":"impl Unpin for __locale_data","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()