(function() {var implementors = {};
implementors["adler"] = [{"text":"impl Sync for Adler32","synthetic":true,"types":[]}];
implementors["ahash"] = [{"text":"impl Sync for AHasher","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RandomState","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Sync for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Sync for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Sync for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Sync for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl Sync for MatchKind","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for MatchKind","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]},{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl Sync for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Sync for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Match","synthetic":true,"types":[]}];
implementors["alloc_no_stdlib"] = [{"text":"impl&lt;'a, T, U&gt; Sync for StackAllocator&lt;'a, T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for AllocatedStackMemory&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for CallocBackingStore&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for AllocatorC","synthetic":true,"types":[]}];
implementors["alloc_stdlib"] = [{"text":"impl&lt;T&gt; Sync for WrapBox&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for HeapAlloc&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for HeapPrealloc&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StandardAlloc","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Sync for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array + Sync&gt; Sync for Drain&lt;'a, A&gt;","synthetic":false,"types":[]}];
implementors["arrow"] = [{"text":"impl&lt;OffsetSize&gt; Sync for GenericBinaryArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FixedSizeBinaryArray","synthetic":true,"types":[]},{"text":"impl Sync for DecimalArray","synthetic":true,"types":[]},{"text":"impl Sync for BooleanArray","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for DictionaryArray&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; Sync for GenericListArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FixedSizeListArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PrimitiveArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;OffsetSize&gt; Sync for GenericStringArray&lt;OffsetSize&gt;","synthetic":true,"types":[]},{"text":"impl Sync for StructArray","synthetic":true,"types":[]},{"text":"impl Sync for UnionArray","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BufferBuilder&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BooleanBufferBuilder","synthetic":true,"types":[]},{"text":"impl Sync for BooleanBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PrimitiveBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FixedSizeListBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FixedSizeBinaryBuilder","synthetic":true,"types":[]},{"text":"impl Sync for DecimalBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for StructBuilder","synthetic":true,"types":[]},{"text":"impl Sync for UnionBuilder","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for PrimitiveDictionaryBuilder&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as ArrowPrimitiveType&gt;::Native: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;V as ArrowPrimitiveType&gt;::Native: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for StringDictionaryBuilder&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;K as ArrowPrimitiveType&gt;::Native: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ArrayData","synthetic":true,"types":[]},{"text":"impl Sync for ArrayDataBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for PrimitiveIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for GenericStringIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for GenericBinaryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for NullArray","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for MutableArrayData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Bitmap","synthetic":true,"types":[]},{"text":"impl !Sync for Deallocation","synthetic":true,"types":[]},{"text":"impl !Sync for Bytes","synthetic":true,"types":[]},{"text":"impl Sync for SortOptions","synthetic":true,"types":[]},{"text":"impl Sync for SortColumn","synthetic":true,"types":[]},{"text":"impl Sync for TakeOptions","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for WriterBuilder","synthetic":true,"types":[]},{"text":"impl Sync for DataType","synthetic":true,"types":[]},{"text":"impl Sync for DateUnit","synthetic":true,"types":[]},{"text":"impl Sync for TimeUnit","synthetic":true,"types":[]},{"text":"impl Sync for IntervalUnit","synthetic":true,"types":[]},{"text":"impl Sync for Field","synthetic":true,"types":[]},{"text":"impl Sync for BooleanType","synthetic":true,"types":[]},{"text":"impl Sync for Int8Type","synthetic":true,"types":[]},{"text":"impl Sync for Int16Type","synthetic":true,"types":[]},{"text":"impl Sync for Int32Type","synthetic":true,"types":[]},{"text":"impl Sync for Int64Type","synthetic":true,"types":[]},{"text":"impl Sync for UInt8Type","synthetic":true,"types":[]},{"text":"impl Sync for UInt16Type","synthetic":true,"types":[]},{"text":"impl Sync for UInt32Type","synthetic":true,"types":[]},{"text":"impl Sync for UInt64Type","synthetic":true,"types":[]},{"text":"impl Sync for Float32Type","synthetic":true,"types":[]},{"text":"impl Sync for Float64Type","synthetic":true,"types":[]},{"text":"impl Sync for TimestampSecondType","synthetic":true,"types":[]},{"text":"impl Sync for TimestampMillisecondType","synthetic":true,"types":[]},{"text":"impl Sync for TimestampMicrosecondType","synthetic":true,"types":[]},{"text":"impl Sync for TimestampNanosecondType","synthetic":true,"types":[]},{"text":"impl Sync for Date32Type","synthetic":true,"types":[]},{"text":"impl Sync for Date64Type","synthetic":true,"types":[]},{"text":"impl Sync for Time32SecondType","synthetic":true,"types":[]},{"text":"impl Sync for Time32MillisecondType","synthetic":true,"types":[]},{"text":"impl Sync for Time64MicrosecondType","synthetic":true,"types":[]},{"text":"impl Sync for Time64NanosecondType","synthetic":true,"types":[]},{"text":"impl Sync for IntervalYearMonthType","synthetic":true,"types":[]},{"text":"impl Sync for IntervalDayTimeType","synthetic":true,"types":[]},{"text":"impl Sync for DurationSecondType","synthetic":true,"types":[]},{"text":"impl Sync for DurationMillisecondType","synthetic":true,"types":[]},{"text":"impl Sync for DurationMicrosecondType","synthetic":true,"types":[]},{"text":"impl Sync for DurationNanosecondType","synthetic":true,"types":[]},{"text":"impl Sync for Schema","synthetic":true,"types":[]},{"text":"impl Sync for ArrowError","synthetic":true,"types":[]},{"text":"impl !Sync for FFI_ArrowSchema","synthetic":true,"types":[]},{"text":"impl !Sync for FFI_ArrowArray","synthetic":true,"types":[]},{"text":"impl !Sync for ArrowArray","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FileReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for StreamReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IpcWriteOptions","synthetic":true,"types":[]},{"text":"impl Sync for IpcDataGenerator","synthetic":true,"types":[]},{"text":"impl Sync for DictionaryTracker","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for FileWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for StreamWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EncodedData","synthetic":true,"types":[]},{"text":"impl Sync for Block","synthetic":true,"types":[]},{"text":"impl Sync for FooterOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Footer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FooterArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for FooterBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompressionType","synthetic":true,"types":[]},{"text":"impl Sync for BodyCompressionMethod","synthetic":true,"types":[]},{"text":"impl Sync for MessageHeader","synthetic":true,"types":[]},{"text":"impl Sync for MessageHeaderUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Sync for FieldNode","synthetic":true,"types":[]},{"text":"impl Sync for BodyCompressionOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BodyCompression&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BodyCompressionArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for BodyCompressionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RecordBatchOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RecordBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RecordBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for RecordBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DictionaryBatchOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DictionaryBatch&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DictionaryBatchArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for DictionaryBatchBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MessageOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Message&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MessageArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for MessageBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MetadataVersion","synthetic":true,"types":[]},{"text":"impl Sync for Feature","synthetic":true,"types":[]},{"text":"impl Sync for UnionMode","synthetic":true,"types":[]},{"text":"impl Sync for Precision","synthetic":true,"types":[]},{"text":"impl Sync for DateUnit","synthetic":true,"types":[]},{"text":"impl Sync for TimeUnit","synthetic":true,"types":[]},{"text":"impl Sync for IntervalUnit","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for TypeUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Sync for DictionaryKind","synthetic":true,"types":[]},{"text":"impl Sync for Endianness","synthetic":true,"types":[]},{"text":"impl Sync for Buffer","synthetic":true,"types":[]},{"text":"impl Sync for NullOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Null&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for NullArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for NullBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Struct_Offset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Struct_&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Struct_Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for Struct_Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ListOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for List&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for ListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LargeListOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LargeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LargeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for LargeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FixedSizeListOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FixedSizeList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FixedSizeListArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for FixedSizeListBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MapOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Map&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MapArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for MapBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for UnionOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Union&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnionArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for UnionBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Int&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for IntBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FloatingPointOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FloatingPoint&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FloatingPointArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for FloatingPointBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Offset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for Utf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BinaryOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Binary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for BinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LargeUtf8Offset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LargeUtf8&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LargeUtf8Args","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for LargeUtf8Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LargeBinaryOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LargeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for LargeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for LargeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FixedSizeBinaryOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FixedSizeBinary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FixedSizeBinaryArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for FixedSizeBinaryBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BoolOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Bool&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BoolArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for BoolBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DecimalOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Decimal&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DecimalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for DecimalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DateOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Date&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DateArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for DateBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TimeOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Time&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TimeArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for TimeBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TimestampOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Timestamp&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TimestampArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for TimestampBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntervalOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Interval&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntervalArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for IntervalBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DurationOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Duration&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DurationArgs","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for DurationBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for KeyValueOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for KeyValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for KeyValueArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for KeyValueBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DictionaryEncodingOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DictionaryEncoding&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DictionaryEncodingArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for DictionaryEncodingBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FieldOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FieldArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for FieldBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SchemaOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Schema&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SchemaArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for SchemaBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SparseMatrixCompressedAxis","synthetic":true,"types":[]},{"text":"impl Sync for SparseTensorIndex","synthetic":true,"types":[]},{"text":"impl Sync for SparseTensorIndexUnionTableOffset","synthetic":true,"types":[]},{"text":"impl Sync for SparseTensorIndexCOOOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SparseTensorIndexCOO&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SparseTensorIndexCOOArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for SparseTensorIndexCOOBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SparseMatrixIndexCSXOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SparseMatrixIndexCSX&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SparseMatrixIndexCSXArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for SparseMatrixIndexCSXBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SparseTensorIndexCSFOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SparseTensorIndexCSF&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SparseTensorIndexCSFArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for SparseTensorIndexCSFBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SparseTensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SparseTensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SparseTensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for SparseTensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TensorDimOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TensorDim&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TensorDimArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for TensorDimBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TensorOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Tensor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TensorArgs&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sync for TensorBuilder&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for ValueIter&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RecordBatch","synthetic":true,"types":[]},{"text":"impl Sync for RecordBatchOptions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Tensor&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BitChunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BitChunkIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ArrowJson","synthetic":true,"types":[]},{"text":"impl Sync for ArrowJsonSchema","synthetic":true,"types":[]},{"text":"impl Sync for ArrowJsonField","synthetic":true,"types":[]},{"text":"impl Sync for ArrowJsonFieldDictionary","synthetic":true,"types":[]},{"text":"impl Sync for DictionaryIndexType","synthetic":true,"types":[]},{"text":"impl Sync for ArrowJsonBatch","synthetic":true,"types":[]},{"text":"impl Sync for ArrowJsonDictionaryBatch","synthetic":true,"types":[]},{"text":"impl Sync for ArrowJsonColumn","synthetic":true,"types":[]},{"text":"impl Sync for StringWriter","synthetic":true,"types":[]},{"text":"impl Sync for Buffer","synthetic":false,"types":[]},{"text":"impl Sync for MutableBuffer","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Sync for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for DecoderReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DecodeError","synthetic":true,"types":[]},{"text":"impl Sync for CharacterSet","synthetic":true,"types":[]},{"text":"impl Sync for Config","synthetic":true,"types":[]}];
implementors["brotli"] = [{"text":"impl&lt;'a&gt; Sync for InputReference&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for InputReferenceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for InputPair&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BrotliDistanceParams","synthetic":true,"types":[]},{"text":"impl Sync for Command","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Sync for BlockSplit&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PrefixCodeRange","synthetic":true,"types":[]},{"text":"impl Sync for SimpleSortHuffmanTree","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Sync for MetaBlockSplit&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;HistogramCommand&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;HistogramDistance&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;HistogramLiteral&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BlockTypeCodeCalculator","synthetic":true,"types":[]},{"text":"impl Sync for BlockSplitCode","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Sync for BlockEncoder&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RecoderState","synthetic":true,"types":[]},{"text":"impl Sync for HuffmanTree","synthetic":true,"types":[]},{"text":"impl Sync for SortHuffmanTree","synthetic":true,"types":[]},{"text":"impl Sync for BrotliDictionary","synthetic":true,"types":[]},{"text":"impl&lt;AllocU8, AllocU16, AllocI32, AllocU32, AllocU64, AllocCommand, AllocFloatX, AllocV8, AllocS16, AllocPDF, AllocStaticCommand, AllocHistogramLiteral, AllocHistogramCommand, AllocHistogramDistance, AllocHistogramPair, AllocContextType, AllocHuffmanTree, AllocZopfliNode&gt; Sync for CombiningAllocator&lt;AllocU8, AllocU16, AllocI32, AllocU32, AllocU64, AllocCommand, AllocFloatX, AllocV8, AllocS16, AllocPDF, AllocStaticCommand, AllocHistogramLiteral, AllocHistogramCommand, AllocHistogramDistance, AllocHistogramPair, AllocContextType, AllocHuffmanTree, AllocZopfliNode&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocCommand: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocContextType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocFloatX: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramCommand: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramDistance: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramLiteral: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHistogramPair: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHuffmanTree: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocI32: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocPDF: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocS16: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocStaticCommand: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU16: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU64: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocV8: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocZopfliNode: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DictWord","synthetic":true,"types":[]},{"text":"impl Sync for HistogramPair","synthetic":true,"types":[]},{"text":"impl Sync for HistogramLiteral","synthetic":true,"types":[]},{"text":"impl Sync for HistogramCommand","synthetic":true,"types":[]},{"text":"impl Sync for HistogramDistance","synthetic":true,"types":[]},{"text":"impl Sync for Array264i","synthetic":true,"types":[]},{"text":"impl Sync for Array528i","synthetic":true,"types":[]},{"text":"impl Sync for Array712i","synthetic":true,"types":[]},{"text":"impl Sync for EmptyIVec","synthetic":true,"types":[]},{"text":"impl Sync for ContextType","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Sync for BlockSplitIterator&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocF&gt; Sync for ZopfliCostModel&lt;AllocF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocF as Allocator&lt;f32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PosData","synthetic":true,"types":[]},{"text":"impl Sync for StartPosQueue","synthetic":true,"types":[]},{"text":"impl Sync for Union1","synthetic":true,"types":[]},{"text":"impl Sync for ZopfliNode","synthetic":true,"types":[]},{"text":"impl Sync for H10DefaultParams","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Sync for H10Buckets&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32, Buckets, Params&gt; Sync for H10&lt;AllocU32, Buckets, Params&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buckets: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Params: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BackwardMatch","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BackwardMatchMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BrotliEncoderMode","synthetic":true,"types":[]},{"text":"impl Sync for BrotliHasherParams","synthetic":true,"types":[]},{"text":"impl Sync for BrotliEncoderParams","synthetic":true,"types":[]},{"text":"impl Sync for H9Opts","synthetic":true,"types":[]},{"text":"impl Sync for HowPrepared","synthetic":true,"types":[]},{"text":"impl Sync for Struct1","synthetic":true,"types":[]},{"text":"impl Sync for HasherSearchResult","synthetic":true,"types":[]},{"text":"impl&lt;Buckets&gt; Sync for BasicHasher&lt;Buckets&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buckets: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Sync for H2Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Sync for H3Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Sync for H4Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Sync for H54Sub&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Specialization, Alloc&gt; Sync for AdvHasher&lt;Specialization, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Specialization: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for HQ5Sub","synthetic":true,"types":[]},{"text":"impl Sync for HQ7Sub","synthetic":true,"types":[]},{"text":"impl Sync for H9Sub","synthetic":true,"types":[]},{"text":"impl Sync for H5Sub","synthetic":true,"types":[]},{"text":"impl Sync for H6Sub","synthetic":true,"types":[]},{"text":"impl Sync for BankH40","synthetic":true,"types":[]},{"text":"impl Sync for BankH41","synthetic":true,"types":[]},{"text":"impl Sync for BankH42","synthetic":true,"types":[]},{"text":"impl Sync for SlotH40","synthetic":true,"types":[]},{"text":"impl Sync for SlotH41","synthetic":true,"types":[]},{"text":"impl Sync for SlotH42","synthetic":true,"types":[]},{"text":"impl Sync for H40","synthetic":true,"types":[]},{"text":"impl Sync for H41","synthetic":true,"types":[]},{"text":"impl Sync for H42","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Sync for UnionHasher&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BlockSplitter","synthetic":true,"types":[]},{"text":"impl Sync for ContextBlockSplitter","synthetic":true,"types":[]},{"text":"impl Sync for CodeBlockState","synthetic":true,"types":[]},{"text":"impl Sync for BrotliEncoderParameter","synthetic":true,"types":[]},{"text":"impl&lt;AllocU8&gt; Sync for RingBuffer&lt;AllocU8&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BrotliEncoderStreamState","synthetic":true,"types":[]},{"text":"impl Sync for IsFirst","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Sync for BrotliEncoderStateStruct&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BrotliEncoderOperation","synthetic":true,"types":[]},{"text":"impl&lt;R, BufferType, Alloc&gt; Sync for CompressorReaderCustomAlloc&lt;R, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for CompressorReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, R, BufferType, Alloc&gt; Sync for CompressorReaderCustomIo&lt;ErrType, R, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, BufferType, Alloc&gt; Sync for CompressorWriterCustomAlloc&lt;W, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for CompressorWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, W, BufferType, Alloc&gt; Sync for CompressorWriterCustomIo&lt;ErrType, W, BufferType, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;i32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Command&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Sync for EntropyBucketPopulation&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BucketPopIndex","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Sync for EntropyTally&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;AllocU32&gt; Sync for EntropyPyramid&lt;AllocU32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BlockSwitch","synthetic":true,"types":[]},{"text":"impl Sync for LiteralBlockSwitch","synthetic":true,"types":[]},{"text":"impl Sync for LiteralPredictionModeNibble","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Sync for PredictionModeContextMap&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CopyCommand","synthetic":true,"types":[]},{"text":"impl Sync for DictCommand","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Sync for FeatureFlagSliceType&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Sync for LiteralCommand&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SliceType&gt; Sync for Command&lt;SliceType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SliceType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SliceOffset","synthetic":true,"types":[]},{"text":"impl Sync for WhichPrior","synthetic":true,"types":[]},{"text":"impl Sync for Stride1Prior","synthetic":true,"types":[]},{"text":"impl Sync for Stride2Prior","synthetic":true,"types":[]},{"text":"impl Sync for Stride3Prior","synthetic":true,"types":[]},{"text":"impl Sync for Stride4Prior","synthetic":true,"types":[]},{"text":"impl Sync for CMPrior","synthetic":true,"types":[]},{"text":"impl Sync for FastCMPrior","synthetic":true,"types":[]},{"text":"impl Sync for SlowCMPrior","synthetic":true,"types":[]},{"text":"impl Sync for AdvPrior","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CDF&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Sync for PriorEval&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;Compat16x16&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;CompatF8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Sync for StrideEval&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;f32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SpeedAndMax","synthetic":true,"types":[]},{"text":"impl&lt;'a, Alloc&gt; Sync for ContextMapEntropy&lt;'a, Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u16&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PDF","synthetic":true,"types":[]},{"text":"impl !Sync for BrotliEncoderThreadError","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; Sync for CompressedFileChunk&lt;Alloc&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Alloc&gt; !Sync for CompressionThreadResult&lt;Alloc&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ReturnVal, ExtraInput, Alloc, Join&gt; Sync for InternalSendAlloc&lt;ReturnVal, ExtraInput, Alloc, Join&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraInput: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Join: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ReturnVal: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, Join&gt; Sync for SendAlloc&lt;ReturnValue, ExtraInput, Alloc, Join&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Alloc: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ExtraInput: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Join: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ReturnValue: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for InternalOwned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for SingleThreadedJoinable&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Sync for SingleThreadedOwnedRetriever&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SingleThreadedSpawner","synthetic":true,"types":[]},{"text":"impl&lt;A, B, C, D&gt; Sync for WorkerPool&lt;A, B, C, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for MultiThreadedJoinable&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Sync for MultiThreadedOwnedRetriever&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MultiThreadedSpawner","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FixedQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, U&gt; Sync for GuardedQueue&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, U&gt; Sync for WorkerPool&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":true,"types":[]},{"text":"impl&lt;ReturnValue, ExtraInput, Alloc, U&gt; Sync for WorkerJoinable&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BroCatliResult","synthetic":true,"types":[]},{"text":"impl Sync for BroCatli","synthetic":true,"types":[]},{"text":"impl !Sync for BrotliSubclassableAllocator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendableMemoryBlock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BrotliEncoderOperation","synthetic":true,"types":[]},{"text":"impl Sync for BrotliEncoderMode","synthetic":true,"types":[]},{"text":"impl !Sync for BrotliEncoderState","synthetic":true,"types":[]},{"text":"impl !Sync for BroccoliState","synthetic":true,"types":[]},{"text":"impl !Sync for BrotliEncoderWorkPool","synthetic":true,"types":[]}];
implementors["brotli_decompressor"] = [{"text":"impl Sync for HuffmanCode","synthetic":true,"types":[]},{"text":"impl&lt;Alloc32, AllocHC&gt; Sync for HuffmanTreeGroup&lt;Alloc32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Alloc32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BrotliDecoderErrorCode","synthetic":true,"types":[]},{"text":"impl&lt;AllocU8, AllocU32, AllocHC&gt; Sync for BrotliState&lt;AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Transform","synthetic":true,"types":[]},{"text":"impl Sync for BrotliResult","synthetic":true,"types":[]},{"text":"impl&lt;InputType&gt; Sync for IntoIoReader&lt;InputType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InputType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;InputType&gt; Sync for IntoIoWriter&lt;InputType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InputType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, OutputType&gt; Sync for IoWriterWrapper&lt;'a, OutputType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OutputType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, OutputType&gt; Sync for IoReaderWrapper&lt;'a, OutputType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OutputType: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, BufferType, AllocU8, AllocU32, AllocHC&gt; Sync for DecompressorCustomAlloc&lt;R, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Decompressor&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, R, BufferType, AllocU8, AllocU32, AllocHC&gt; Sync for DecompressorCustomIo&lt;ErrType, R, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, BufferType, AllocU8, AllocU32, AllocHC&gt; Sync for DecompressorWriterCustomAlloc&lt;W, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for DecompressorWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;ErrType, W, BufferType, AllocU8, AllocU32, AllocHC&gt; Sync for DecompressorWriterCustomIo&lt;ErrType, W, BufferType, AllocU8, AllocU32, AllocHC&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocHC: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU32: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;AllocU8: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;BufferType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ErrType: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocHC as Allocator&lt;HuffmanCode&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU32 as Allocator&lt;u32&gt;&gt;::AllocatedMemory: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;AllocU8 as Allocator&lt;u8&gt;&gt;::AllocatedMemory: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for c_void","synthetic":true,"types":[]},{"text":"impl Sync for BrotliDecoderParameter","synthetic":true,"types":[]},{"text":"impl Sync for BrotliDecoderResult","synthetic":true,"types":[]},{"text":"impl !Sync for CAllocator","synthetic":true,"types":[]},{"text":"impl&lt;Ty&gt; Sync for MemoryBlock&lt;Ty&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ty: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !Sync for SubclassableAllocator","synthetic":true,"types":[]},{"text":"impl !Sync for BrotliDecoderState","synthetic":true,"types":[]},{"text":"impl Sync for BrotliDecoderReturnInfo","synthetic":true,"types":[]}];
implementors["bstr"] = [{"text":"impl Sync for BStr","synthetic":true,"types":[]},{"text":"impl Sync for BString","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Finder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FinderReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Find&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FindReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Bytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Fields&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, F&gt; Sync for FieldsWith&lt;'a, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Split&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SplitReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SplitN&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SplitNReverse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Lines&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LinesWithTerminator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DrainBytes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for ByteLines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Sync for ByteRecords&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Sentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SentenceIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Words&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WordIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WordsWithBreaks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for WordsWithBreakIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Chars&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CharIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8Chunks&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8Chunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Error","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Sync for BigEndian","synthetic":true,"types":[]},{"text":"impl Sync for LittleEndian","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Sync for FixedOffset","synthetic":true,"types":[]},{"text":"impl Sync for Local","synthetic":true,"types":[]},{"text":"impl Sync for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NaiveDate","synthetic":true,"types":[]},{"text":"impl Sync for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Sync for IsoWeek","synthetic":true,"types":[]},{"text":"impl Sync for NaiveTime","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Sync for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for SecondsFormat","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Sync for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Pad","synthetic":true,"types":[]},{"text":"impl Sync for Numeric","synthetic":true,"types":[]},{"text":"impl Sync for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Sync for Fixed","synthetic":true,"types":[]},{"text":"impl Sync for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RoundingError","synthetic":true,"types":[]},{"text":"impl Sync for Weekday","synthetic":true,"types":[]},{"text":"impl Sync for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Sync for Month","synthetic":true,"types":[]},{"text":"impl Sync for ParseMonthError","synthetic":true,"types":[]}];
implementors["comfy_table"] = [{"text":"impl Sync for Cell","synthetic":true,"types":[]},{"text":"impl Sync for Column","synthetic":true,"types":[]},{"text":"impl Sync for Row","synthetic":true,"types":[]},{"text":"impl Sync for ContentArrangement","synthetic":true,"types":[]},{"text":"impl Sync for TableComponent","synthetic":true,"types":[]},{"text":"impl Sync for CellAlignment","synthetic":true,"types":[]},{"text":"impl Sync for ColumnConstraint","synthetic":true,"types":[]},{"text":"impl Sync for Table","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Sync for Hasher","synthetic":true,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for TryIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for RecvError","synthetic":true,"types":[]},{"text":"impl Sync for TryRecvError","synthetic":true,"types":[]},{"text":"impl Sync for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TrySelectError","synthetic":true,"types":[]},{"text":"impl Sync for SelectTimeoutError","synthetic":true,"types":[]},{"text":"impl Sync for TryReadyError","synthetic":true,"types":[]},{"text":"impl Sync for ReadyTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for SelectedOperation&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Select&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; !Sync for Worker&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Steal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Stealer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;'g, T, P&gt; !Sync for CompareAndSetError&lt;'g, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Sync for Owned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'g, T&gt; !Sync for Shared&lt;'g, T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for LocalHandle","synthetic":true,"types":[]},{"text":"impl !Sync for Guard","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Pointable + Send + Sync&gt; Sync for Atomic&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Collector","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Sync for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl !Sync for Backoff","synthetic":true,"types":[]},{"text":"impl !Sync for Parker","synthetic":true,"types":[]},{"text":"impl Sync for WaitGroup","synthetic":true,"types":[]},{"text":"impl&lt;'scope, 'env&gt; Sync for ScopedThreadBuilder&lt;'scope, 'env&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for AtomicCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync&gt; Sync for CachePadded&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Unparker","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send + Sync&gt; Sync for ShardedLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockReadGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Sync&gt; Sync for ShardedLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Sync for Scope&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for ScopedJoinHandle&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["crossterm"] = [{"text":"impl Sync for MoveTo","synthetic":true,"types":[]},{"text":"impl Sync for MoveToNextLine","synthetic":true,"types":[]},{"text":"impl Sync for MoveToPreviousLine","synthetic":true,"types":[]},{"text":"impl Sync for MoveToColumn","synthetic":true,"types":[]},{"text":"impl Sync for MoveUp","synthetic":true,"types":[]},{"text":"impl Sync for MoveRight","synthetic":true,"types":[]},{"text":"impl Sync for MoveDown","synthetic":true,"types":[]},{"text":"impl Sync for MoveLeft","synthetic":true,"types":[]},{"text":"impl Sync for SavePosition","synthetic":true,"types":[]},{"text":"impl Sync for RestorePosition","synthetic":true,"types":[]},{"text":"impl Sync for Hide","synthetic":true,"types":[]},{"text":"impl Sync for Show","synthetic":true,"types":[]},{"text":"impl Sync for EnableBlinking","synthetic":true,"types":[]},{"text":"impl Sync for DisableBlinking","synthetic":true,"types":[]},{"text":"impl Sync for EnableMouseCapture","synthetic":true,"types":[]},{"text":"impl Sync for DisableMouseCapture","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for MouseEvent","synthetic":true,"types":[]},{"text":"impl Sync for MouseEventKind","synthetic":true,"types":[]},{"text":"impl Sync for MouseButton","synthetic":true,"types":[]},{"text":"impl Sync for KeyModifiers","synthetic":true,"types":[]},{"text":"impl Sync for KeyEvent","synthetic":true,"types":[]},{"text":"impl Sync for KeyCode","synthetic":true,"types":[]},{"text":"impl Sync for Attributes","synthetic":true,"types":[]},{"text":"impl Sync for ContentStyle","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for StyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Attribute","synthetic":true,"types":[]},{"text":"impl Sync for Color","synthetic":true,"types":[]},{"text":"impl Sync for Colored","synthetic":true,"types":[]},{"text":"impl Sync for Colors","synthetic":true,"types":[]},{"text":"impl Sync for SetForegroundColor","synthetic":true,"types":[]},{"text":"impl Sync for SetBackgroundColor","synthetic":true,"types":[]},{"text":"impl Sync for SetColors","synthetic":true,"types":[]},{"text":"impl Sync for SetAttribute","synthetic":true,"types":[]},{"text":"impl Sync for SetAttributes","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for PrintStyledContent&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ResetColor","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Print&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for DisableLineWrap","synthetic":true,"types":[]},{"text":"impl Sync for EnableLineWrap","synthetic":true,"types":[]},{"text":"impl Sync for EnterAlternateScreen","synthetic":true,"types":[]},{"text":"impl Sync for LeaveAlternateScreen","synthetic":true,"types":[]},{"text":"impl Sync for ClearType","synthetic":true,"types":[]},{"text":"impl Sync for ScrollUp","synthetic":true,"types":[]},{"text":"impl Sync for ScrollDown","synthetic":true,"types":[]},{"text":"impl Sync for Clear","synthetic":true,"types":[]},{"text":"impl Sync for SetSize","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetTitle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]}];
implementors["csv"] = [{"text":"impl Sync for ByteRecord","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for ByteRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DeserializeError","synthetic":true,"types":[]},{"text":"impl Sync for DeserializeErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for FromUtf8Error","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Error","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Sync for DeserializeRecordsIntoIter&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R, D&gt; Sync for DeserializeRecordsIter&lt;'r, R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for StringRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; Sync for StringRecordsIter&lt;'r, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ByteRecordsIntoIter&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'r, R&gt; Sync for ByteRecordsIter&lt;'r, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StringRecord","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for StringRecordIter&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Sync for WriterBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for QuoteStyle","synthetic":true,"types":[]},{"text":"impl Sync for Terminator","synthetic":true,"types":[]},{"text":"impl Sync for Trim","synthetic":true,"types":[]}];
implementors["csv_core"] = [{"text":"impl Sync for Reader","synthetic":true,"types":[]},{"text":"impl Sync for ReaderBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ReadFieldResult","synthetic":true,"types":[]},{"text":"impl Sync for ReadFieldNoCopyResult","synthetic":true,"types":[]},{"text":"impl Sync for ReadRecordResult","synthetic":true,"types":[]},{"text":"impl Sync for ReadRecordNoCopyResult","synthetic":true,"types":[]},{"text":"impl Sync for WriterBuilder","synthetic":true,"types":[]},{"text":"impl Sync for WriteResult","synthetic":true,"types":[]},{"text":"impl Sync for Writer","synthetic":true,"types":[]},{"text":"impl Sync for Terminator","synthetic":true,"types":[]},{"text":"impl Sync for QuoteStyle","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Sync for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["fast_float"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["flatbuffers"] = [{"text":"impl&lt;'fbb&gt; Sync for FlatBufferBuilder&lt;'fbb&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FollowStart&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TableFinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl Sync for TableUnfinishedWIPOffset","synthetic":true,"types":[]},{"text":"impl Sync for UnionWIPOffset","synthetic":true,"types":[]},{"text":"impl Sync for VTableWIPOffset","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for WIPOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ForwardsUOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ForwardsVOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BackwardsSOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SkipSizePrefix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SkipRootOffset&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FileIdentifier","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SkipFileIdentifier&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Table&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Vector&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for VectorIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ErrorTraceDetail","synthetic":true,"types":[]},{"text":"impl Sync for InvalidFlatbuffer","synthetic":true,"types":[]},{"text":"impl Sync for VerifierOptions","synthetic":true,"types":[]},{"text":"impl&lt;'opts, 'buf&gt; Sync for Verifier&lt;'opts, 'buf&gt;","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Sync for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for GzHeader","synthetic":true,"types":[]},{"text":"impl Sync for GzBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Compress","synthetic":true,"types":[]},{"text":"impl Sync for Decompress","synthetic":true,"types":[]},{"text":"impl Sync for FlushCompress","synthetic":true,"types":[]},{"text":"impl Sync for FlushDecompress","synthetic":true,"types":[]},{"text":"impl Sync for DecompressError","synthetic":true,"types":[]},{"text":"impl Sync for CompressError","synthetic":true,"types":[]},{"text":"impl Sync for Status","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Compression","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; !Sync for Bucket&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RawIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for RawIterHash&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RawParIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RawIntoParIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for RawParDrain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for ParIter&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for ParKeys&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for ParValues&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for ParIterMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for ParValuesMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for IntoParIter&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for ParDrain&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for IntoParIter&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for ParDrain&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for ParIter&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for ParDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for ParSymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for ParIntersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for ParUnion&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Sync for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Sync for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Sync for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Sync for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Sync for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TryReserveError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RawTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for RawIntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sync for RawDrain&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for RawOccupiedEntryMut&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Sync for FromHexError","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Sync for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Sync for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Sync for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Sync for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Sync, V:&nbsp;Sync&gt; Sync for OccupiedEntry&lt;'_, K, V&gt;","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, Pred&gt; Sync for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Sync for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MultiProduct&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Combinations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for CombinationsWithReplacement&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Sync for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for IntoChunks&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Chunk&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Sync for Chunks&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, I, F&gt; !Sync for GroupBy&lt;K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Sync for Group&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, I, F&gt; !Sync for Groups&lt;'a, K, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for KMergeBy&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Sync for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MultiPeek&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Sync for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Permutations&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Sync for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PutBackN&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for RcIter&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Sync for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; !Sync for Tee&lt;I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Sync for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Unique&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, V, F&gt; Sync for UniqueBy&lt;I, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Sync for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Sync for Buffer","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Sync for ErrorCode","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Sync for statvfs","synthetic":true,"types":[]},{"text":"impl Sync for max_align_t","synthetic":true,"types":[]},{"text":"impl Sync for sigaction","synthetic":true,"types":[]},{"text":"impl Sync for statfs","synthetic":true,"types":[]},{"text":"impl Sync for flock","synthetic":true,"types":[]},{"text":"impl Sync for flock64","synthetic":true,"types":[]},{"text":"impl Sync for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Sync for stack_t","synthetic":true,"types":[]},{"text":"impl Sync for stat","synthetic":true,"types":[]},{"text":"impl Sync for stat64","synthetic":true,"types":[]},{"text":"impl Sync for statfs64","synthetic":true,"types":[]},{"text":"impl Sync for statvfs64","synthetic":true,"types":[]},{"text":"impl Sync for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Sync for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Sync for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for user","synthetic":true,"types":[]},{"text":"impl !Sync for mcontext_t","synthetic":true,"types":[]},{"text":"impl Sync for ipc_perm","synthetic":true,"types":[]},{"text":"impl Sync for shmid_ds","synthetic":true,"types":[]},{"text":"impl Sync for termios2","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Sync for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Sync for ucontext_t","synthetic":true,"types":[]},{"text":"impl Sync for sigset_t","synthetic":true,"types":[]},{"text":"impl Sync for sysinfo","synthetic":true,"types":[]},{"text":"impl Sync for msqid_ds","synthetic":true,"types":[]},{"text":"impl Sync for sem_t","synthetic":true,"types":[]},{"text":"impl Sync for statx","synthetic":true,"types":[]},{"text":"impl Sync for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Sync for aiocb","synthetic":true,"types":[]},{"text":"impl Sync for __exit_status","synthetic":true,"types":[]},{"text":"impl Sync for __timeval","synthetic":true,"types":[]},{"text":"impl !Sync for glob64_t","synthetic":true,"types":[]},{"text":"impl !Sync for msghdr","synthetic":true,"types":[]},{"text":"impl Sync for cmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for termios","synthetic":true,"types":[]},{"text":"impl Sync for mallinfo","synthetic":true,"types":[]},{"text":"impl Sync for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Sync for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Sync for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Sync for nlattr","synthetic":true,"types":[]},{"text":"impl !Sync for rtentry","synthetic":true,"types":[]},{"text":"impl Sync for timex","synthetic":true,"types":[]},{"text":"impl Sync for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Sync for regex_t","synthetic":true,"types":[]},{"text":"impl Sync for utmpx","synthetic":true,"types":[]},{"text":"impl Sync for fpos64_t","synthetic":true,"types":[]},{"text":"impl Sync for rlimit64","synthetic":true,"types":[]},{"text":"impl !Sync for glob_t","synthetic":true,"types":[]},{"text":"impl !Sync for passwd","synthetic":true,"types":[]},{"text":"impl !Sync for spwd","synthetic":true,"types":[]},{"text":"impl Sync for dqblk","synthetic":true,"types":[]},{"text":"impl Sync for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Sync for itimerspec","synthetic":true,"types":[]},{"text":"impl Sync for fsid_t","synthetic":true,"types":[]},{"text":"impl Sync for packet_mreq","synthetic":true,"types":[]},{"text":"impl Sync for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Sync for if_nameindex","synthetic":true,"types":[]},{"text":"impl Sync for msginfo","synthetic":true,"types":[]},{"text":"impl Sync for sembuf","synthetic":true,"types":[]},{"text":"impl Sync for input_event","synthetic":true,"types":[]},{"text":"impl Sync for input_id","synthetic":true,"types":[]},{"text":"impl Sync for input_absinfo","synthetic":true,"types":[]},{"text":"impl Sync for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Sync for input_mask","synthetic":true,"types":[]},{"text":"impl Sync for ff_replay","synthetic":true,"types":[]},{"text":"impl Sync for ff_trigger","synthetic":true,"types":[]},{"text":"impl Sync for ff_envelope","synthetic":true,"types":[]},{"text":"impl Sync for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Sync for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Sync for ff_effect","synthetic":true,"types":[]},{"text":"impl !Sync for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Sync for ucred","synthetic":true,"types":[]},{"text":"impl !Sync for mntent","synthetic":true,"types":[]},{"text":"impl !Sync for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Sync for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Sync for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Sync for arpd_request","synthetic":true,"types":[]},{"text":"impl Sync for inotify_event","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_response","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Sync for regmatch_t","synthetic":true,"types":[]},{"text":"impl Sync for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Sync for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Sync for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Sync for can_filter","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Sync for dirent","synthetic":true,"types":[]},{"text":"impl Sync for dirent64","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Sync for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Sync for mq_attr","synthetic":true,"types":[]},{"text":"impl Sync for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Sync for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Sync for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Sync for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Sync for can_frame","synthetic":true,"types":[]},{"text":"impl Sync for canfd_frame","synthetic":true,"types":[]},{"text":"impl Sync for timezone","synthetic":true,"types":[]},{"text":"impl Sync for in_addr","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq","synthetic":true,"types":[]},{"text":"impl Sync for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Sync for addrinfo","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Sync for fd_set","synthetic":true,"types":[]},{"text":"impl !Sync for tm","synthetic":true,"types":[]},{"text":"impl Sync for sched_param","synthetic":true,"types":[]},{"text":"impl !Sync for Dl_info","synthetic":true,"types":[]},{"text":"impl !Sync for lconv","synthetic":true,"types":[]},{"text":"impl Sync for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Sync for ifaddrs","synthetic":true,"types":[]},{"text":"impl Sync for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Sync for arpreq","synthetic":true,"types":[]},{"text":"impl Sync for arpreq_old","synthetic":true,"types":[]},{"text":"impl Sync for arphdr","synthetic":true,"types":[]},{"text":"impl !Sync for mmsghdr","synthetic":true,"types":[]},{"text":"impl Sync for epoll_event","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Sync for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Sync for utsname","synthetic":true,"types":[]},{"text":"impl !Sync for sigevent","synthetic":true,"types":[]},{"text":"impl Sync for in6_addr","synthetic":true,"types":[]},{"text":"impl Sync for DIR","synthetic":true,"types":[]},{"text":"impl !Sync for group","synthetic":true,"types":[]},{"text":"impl Sync for utimbuf","synthetic":true,"types":[]},{"text":"impl Sync for timeval","synthetic":true,"types":[]},{"text":"impl Sync for timespec","synthetic":true,"types":[]},{"text":"impl Sync for rlimit","synthetic":true,"types":[]},{"text":"impl Sync for rusage","synthetic":true,"types":[]},{"text":"impl Sync for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Sync for hostent","synthetic":true,"types":[]},{"text":"impl !Sync for iovec","synthetic":true,"types":[]},{"text":"impl Sync for pollfd","synthetic":true,"types":[]},{"text":"impl Sync for winsize","synthetic":true,"types":[]},{"text":"impl Sync for linger","synthetic":true,"types":[]},{"text":"impl !Sync for sigval","synthetic":true,"types":[]},{"text":"impl Sync for itimerval","synthetic":true,"types":[]},{"text":"impl Sync for tms","synthetic":true,"types":[]},{"text":"impl !Sync for servent","synthetic":true,"types":[]},{"text":"impl !Sync for protoent","synthetic":true,"types":[]},{"text":"impl Sync for FILE","synthetic":true,"types":[]},{"text":"impl Sync for fpos_t","synthetic":true,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Sync for RwLockReadGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, T:&nbsp;?Sized&gt; Sync for RwLockWriteGuard&lt;'a, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as RawRwLock&gt;::GuardMarker: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for GuardSend","synthetic":true,"types":[]},{"text":"impl Sync for GuardNoSend","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, T:&nbsp;?Sized + Send&gt; Sync for Mutex&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync&gt; Sync for RawReentrantMutex&lt;R, G&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawMutex + Sync, G:&nbsp;GetThreadId + Sync, T:&nbsp;?Sized + Send&gt; Sync for ReentrantMutex&lt;R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + Sync + 'a, G:&nbsp;GetThreadId + Sync + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;RawRwLock + Sync, T:&nbsp;?Sized + Send + Sync&gt; Sync for RwLock&lt;R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + Sync + 'a&gt; Sync for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl Sync for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Sync for ParseLevelError","synthetic":true,"types":[]}];
implementors["lz4"] = [{"text":"impl Sync for LZ4Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !Sync for Decoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for EncoderBuilder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; !Sync for Encoder&lt;W&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompressionMode","synthetic":true,"types":[]}];
implementors["lz4_sys"] = [{"text":"impl !Sync for LZ4FCompressionContext","synthetic":true,"types":[]},{"text":"impl !Sync for LZ4FDecompressionContext","synthetic":true,"types":[]},{"text":"impl Sync for BlockSize","synthetic":true,"types":[]},{"text":"impl Sync for BlockMode","synthetic":true,"types":[]},{"text":"impl Sync for ContentChecksum","synthetic":true,"types":[]},{"text":"impl Sync for LZ4FFrameInfo","synthetic":true,"types":[]},{"text":"impl Sync for LZ4FPreferences","synthetic":true,"types":[]},{"text":"impl Sync for LZ4FCompressOptions","synthetic":true,"types":[]},{"text":"impl Sync for LZ4FDecompressOptions","synthetic":true,"types":[]},{"text":"impl Sync for LZ4StreamEncode","synthetic":true,"types":[]},{"text":"impl Sync for LZ4StreamDecode","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Sync for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["memmap"] = [{"text":"impl Sync for MmapOptions","synthetic":true,"types":[]},{"text":"impl Sync for Mmap","synthetic":true,"types":[]},{"text":"impl Sync for MmapMut","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Sync for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Sync for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Sync for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Sync for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Sync for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Sync for MinReset","synthetic":true,"types":[]},{"text":"impl Sync for ZeroReset","synthetic":true,"types":[]},{"text":"impl Sync for FullReset","synthetic":true,"types":[]},{"text":"impl Sync for InflateState","synthetic":true,"types":[]},{"text":"impl Sync for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Sync for MZFlush","synthetic":true,"types":[]},{"text":"impl Sync for MZStatus","synthetic":true,"types":[]},{"text":"impl Sync for MZError","synthetic":true,"types":[]},{"text":"impl Sync for DataFormat","synthetic":true,"types":[]},{"text":"impl Sync for StreamResult","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Sync for Interest","synthetic":true,"types":[]},{"text":"impl Sync for Poll","synthetic":true,"types":[]},{"text":"impl Sync for Registry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Sender","synthetic":true,"types":[]},{"text":"impl Sync for Receiver","synthetic":true,"types":[]},{"text":"impl Sync for Token","synthetic":true,"types":[]},{"text":"impl Sync for Waker","synthetic":true,"types":[]},{"text":"impl Sync for Event","synthetic":true,"types":[]},{"text":"impl Sync for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;'a, D&gt; Sync for Axes&lt;'a, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for Indices&lt;D&gt;","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for IndicesIter&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for ExactChunks&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for ExactChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for ExactChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for ExactChunksMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for Lanes&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for LanesMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for Windows&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ShapeError","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Slice","synthetic":true,"types":[]},{"text":"impl Sync for SliceOrIndex","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized, D&gt; Sync for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Parts, D&gt; Sync for Zip&lt;Parts, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Parts: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for AxisDescription","synthetic":true,"types":[]},{"text":"impl Sync for Axis","synthetic":true,"types":[]},{"text":"impl&lt;I:&nbsp;?Sized&gt; Sync for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IxDynImpl","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for OwnedArcRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RawViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for ViewRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; Sync for CowRepr&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for Shape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for StrideShape&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, D&gt; Sync for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync + Data,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A&gt; Sync for OwnedRepr&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for Iter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for IndexedIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for LanesIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for AxisIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for AxisChunksIter&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for IterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for IndexedIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for LanesIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for AxisIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, D&gt; Sync for AxisChunksIterMut&lt;'a, A, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Sync for Sign","synthetic":true,"types":[]},{"text":"impl Sync for BigInt","synthetic":true,"types":[]},{"text":"impl Sync for BigUint","synthetic":true,"types":[]},{"text":"impl Sync for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TryFromBigIntError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Sync for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Sync for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Sync for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for RangeStepFrom&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Sync for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Sync for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for ParseFloatError","synthetic":true,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T&gt; Sync for OrderedFloat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for NotNan&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FloatIsNan","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for ParseNotNanError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["packed_simd_2"] = [{"text":"impl Sync for m8","synthetic":true,"types":[]},{"text":"impl Sync for m16","synthetic":true,"types":[]},{"text":"impl Sync for m32","synthetic":true,"types":[]},{"text":"impl Sync for m64","synthetic":true,"types":[]},{"text":"impl Sync for m128","synthetic":true,"types":[]},{"text":"impl Sync for msize","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for Simd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as SimdArray&gt;::Tuple: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for LexicographicallyOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking_lot"] = [{"text":"impl Sync for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl Sync for Condvar","synthetic":true,"types":[]},{"text":"impl Sync for OnceState","synthetic":true,"types":[]},{"text":"impl Sync for Once","synthetic":true,"types":[]},{"text":"impl Sync for RawFairMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawMutex","synthetic":true,"types":[]},{"text":"impl Sync for RawRwLock","synthetic":true,"types":[]},{"text":"impl Sync for RawThreadId","synthetic":true,"types":[]}];
implementors["parking_lot_core"] = [{"text":"impl Sync for ParkResult","synthetic":true,"types":[]},{"text":"impl Sync for UnparkResult","synthetic":true,"types":[]},{"text":"impl Sync for RequeueOp","synthetic":true,"types":[]},{"text":"impl Sync for FilterOp","synthetic":true,"types":[]},{"text":"impl Sync for UnparkToken","synthetic":true,"types":[]},{"text":"impl Sync for ParkToken","synthetic":true,"types":[]},{"text":"impl Sync for SpinWait","synthetic":true,"types":[]}];
implementors["parquet"] = [{"text":"impl Sync for ParquetError","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for LogicalType","synthetic":true,"types":[]},{"text":"impl Sync for Repetition","synthetic":true,"types":[]},{"text":"impl Sync for Encoding","synthetic":true,"types":[]},{"text":"impl Sync for Compression","synthetic":true,"types":[]},{"text":"impl Sync for PageType","synthetic":true,"types":[]},{"text":"impl Sync for SortOrder","synthetic":true,"types":[]},{"text":"impl Sync for ColumnOrder","synthetic":true,"types":[]},{"text":"impl Sync for Int96","synthetic":true,"types":[]},{"text":"impl Sync for ByteArray","synthetic":true,"types":[]},{"text":"impl Sync for FixedLenByteArray","synthetic":true,"types":[]},{"text":"impl Sync for Decimal","synthetic":true,"types":[]},{"text":"impl Sync for BoolType","synthetic":true,"types":[]},{"text":"impl Sync for Int32Type","synthetic":true,"types":[]},{"text":"impl Sync for Int64Type","synthetic":true,"types":[]},{"text":"impl Sync for Int96Type","synthetic":true,"types":[]},{"text":"impl Sync for FloatType","synthetic":true,"types":[]},{"text":"impl Sync for DoubleType","synthetic":true,"types":[]},{"text":"impl Sync for ByteArrayType","synthetic":true,"types":[]},{"text":"impl Sync for FixedLenByteArrayType","synthetic":true,"types":[]},{"text":"impl Sync for PlainDecoderDetails","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PlainDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DictDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RleValueDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DeltaBitPackDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DeltaLengthByteArrayDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DeltaByteArrayDecoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PlainEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DictEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RleValueEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DeltaBitPackEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DeltaLengthByteArrayEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for DeltaByteArrayEncoder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for MemTracker","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Buffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for BufferPtr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !Sync for FileSource&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SliceableCursor","synthetic":true,"types":[]},{"text":"impl Sync for InMemoryWriteableCursor","synthetic":true,"types":[]},{"text":"impl !Sync for ParquetFileArrowReader","synthetic":true,"types":[]},{"text":"impl !Sync for ParquetRecordBatchReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for ArrowWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Page","synthetic":true,"types":[]},{"text":"impl Sync for CompressedPage","synthetic":true,"types":[]},{"text":"impl Sync for PageWriteSpec","synthetic":true,"types":[]},{"text":"impl !Sync for ColumnReader","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for ColumnReaderImpl&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ColumnWriter","synthetic":true,"types":[]},{"text":"impl Sync for Level","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for ColumnWriterImpl&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SnappyCodec","synthetic":true,"types":[]},{"text":"impl Sync for GZipCodec","synthetic":true,"types":[]},{"text":"impl Sync for BrotliCodec","synthetic":true,"types":[]},{"text":"impl Sync for LZ4Codec","synthetic":true,"types":[]},{"text":"impl Sync for ZSTDCodec","synthetic":true,"types":[]},{"text":"impl Sync for ParquetMetaData","synthetic":true,"types":[]},{"text":"impl Sync for FileMetaData","synthetic":true,"types":[]},{"text":"impl Sync for RowGroupMetaData","synthetic":true,"types":[]},{"text":"impl Sync for RowGroupMetaDataBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ColumnChunkMetaData","synthetic":true,"types":[]},{"text":"impl Sync for ColumnChunkMetaDataBuilder","synthetic":true,"types":[]},{"text":"impl Sync for WriterVersion","synthetic":true,"types":[]},{"text":"impl Sync for WriterProperties","synthetic":true,"types":[]},{"text":"impl Sync for WriterPropertiesBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for FilePageIterator","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for SerializedFileReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for SerializedRowGroupReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for SerializedPageReader&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Statistics","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TypedStatistics&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as DataType&gt;::T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for SerializedFileWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for SerializedRowGroupWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for SerializedPageWriter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Row","synthetic":true,"types":[]},{"text":"impl Sync for List","synthetic":true,"types":[]},{"text":"impl Sync for Map","synthetic":true,"types":[]},{"text":"impl Sync for Field","synthetic":true,"types":[]},{"text":"impl Sync for TreeBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Reader","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for RowIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for ReaderIter","synthetic":true,"types":[]},{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PrimitiveTypeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for GroupTypeBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for BasicTypeInfo","synthetic":true,"types":[]},{"text":"impl Sync for ColumnPath","synthetic":true,"types":[]},{"text":"impl Sync for ColumnDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for SchemaDescriptor","synthetic":true,"types":[]}];
implementors["parquet_format"] = [{"text":"impl Sync for Type","synthetic":true,"types":[]},{"text":"impl Sync for ConvertedType","synthetic":true,"types":[]},{"text":"impl Sync for FieldRepetitionType","synthetic":true,"types":[]},{"text":"impl Sync for Encoding","synthetic":true,"types":[]},{"text":"impl Sync for CompressionCodec","synthetic":true,"types":[]},{"text":"impl Sync for PageType","synthetic":true,"types":[]},{"text":"impl Sync for BoundaryOrder","synthetic":true,"types":[]},{"text":"impl Sync for Statistics","synthetic":true,"types":[]},{"text":"impl Sync for StringType","synthetic":true,"types":[]},{"text":"impl Sync for UUIDType","synthetic":true,"types":[]},{"text":"impl Sync for MapType","synthetic":true,"types":[]},{"text":"impl Sync for ListType","synthetic":true,"types":[]},{"text":"impl Sync for EnumType","synthetic":true,"types":[]},{"text":"impl Sync for DateType","synthetic":true,"types":[]},{"text":"impl Sync for NullType","synthetic":true,"types":[]},{"text":"impl Sync for DecimalType","synthetic":true,"types":[]},{"text":"impl Sync for MilliSeconds","synthetic":true,"types":[]},{"text":"impl Sync for MicroSeconds","synthetic":true,"types":[]},{"text":"impl Sync for NanoSeconds","synthetic":true,"types":[]},{"text":"impl Sync for TimeUnit","synthetic":true,"types":[]},{"text":"impl Sync for TimestampType","synthetic":true,"types":[]},{"text":"impl Sync for TimeType","synthetic":true,"types":[]},{"text":"impl Sync for IntType","synthetic":true,"types":[]},{"text":"impl Sync for JsonType","synthetic":true,"types":[]},{"text":"impl Sync for BsonType","synthetic":true,"types":[]},{"text":"impl Sync for LogicalType","synthetic":true,"types":[]},{"text":"impl Sync for SchemaElement","synthetic":true,"types":[]},{"text":"impl Sync for DataPageHeader","synthetic":true,"types":[]},{"text":"impl Sync for IndexPageHeader","synthetic":true,"types":[]},{"text":"impl Sync for DictionaryPageHeader","synthetic":true,"types":[]},{"text":"impl Sync for DataPageHeaderV2","synthetic":true,"types":[]},{"text":"impl Sync for PageHeader","synthetic":true,"types":[]},{"text":"impl Sync for KeyValue","synthetic":true,"types":[]},{"text":"impl Sync for SortingColumn","synthetic":true,"types":[]},{"text":"impl Sync for PageEncodingStats","synthetic":true,"types":[]},{"text":"impl Sync for ColumnMetaData","synthetic":true,"types":[]},{"text":"impl Sync for ColumnChunk","synthetic":true,"types":[]},{"text":"impl Sync for RowGroup","synthetic":true,"types":[]},{"text":"impl Sync for TypeDefinedOrder","synthetic":true,"types":[]},{"text":"impl Sync for ColumnOrder","synthetic":true,"types":[]},{"text":"impl Sync for PageLocation","synthetic":true,"types":[]},{"text":"impl Sync for OffsetIndex","synthetic":true,"types":[]},{"text":"impl Sync for ColumnIndex","synthetic":true,"types":[]},{"text":"impl Sync for FileMetaData","synthetic":true,"types":[]}];
implementors["polars_arrow"] = [{"text":"impl Sync for BooleanBufferBuilder","synthetic":true,"types":[]},{"text":"impl Sync for BooleanArrayBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PrimitiveArrayBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for LargeStringBuilder","synthetic":true,"types":[]},{"text":"impl Sync for PolarsError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for AlignedVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["polars_core"] = [{"text":"impl&lt;T&gt; Sync for NoNull&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Node","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Arena&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for DynamicZip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumTakeRandomChunked&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumTakeRandomCont&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for InitFold","synthetic":true,"types":[]},{"text":"impl Sync for FillNoneStrategy","synthetic":true,"types":[]},{"text":"impl Sync for BooleanChunkedBuilder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for PrimitiveChunkedBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CategoricalChunkedBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Utf8ChunkedBuilder","synthetic":true,"types":[]},{"text":"impl Sync for Utf8ChunkedBuilderCow","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ListPrimitiveChunkedBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ListUtf8ChunkedBuilder","synthetic":true,"types":[]},{"text":"impl Sync for ListBooleanChunkedBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanParIterManyChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanNoNullParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListParIterManyChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListNoNullParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumParIterSingleChunkReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumParIterSingleChunkNullCheckReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumParIterManyChunkReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumParIterManyChunkNullCheckReturnOption&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumParIterSingleChunkReturnUnwrapped&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumParIterManyChunkReturnUnwrapped&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumParIterDispatcher&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumNoNullParIterDispatcher&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8ParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8ParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8ParIterManyChunkReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8ParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8ParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8ParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8ParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8NoNullParIterDispatcher&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for SomeIterator&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumIterSingleChunk&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumIterSingleChunkNullCheck&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumIterManyChunk&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for NumIterManyChunkNullCheck&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as ArrowPrimitiveType&gt;::Native: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8IterSingleChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8IterSingleChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8IterManyChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Utf8IterManyChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanIterSingleChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanIterSingleChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanIterManyChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for BooleanIterManyChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListIterSingleChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListIterSingleChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListIterManyChunk&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ListIterManyChunkNullCheck&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ObjectChunkedBuilder&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ObjectArray&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ChunkedArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for NoNull&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Type","synthetic":true,"types":[]},{"text":"impl Sync for ListType","synthetic":true,"types":[]},{"text":"impl Sync for CategoricalType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for ObjectType&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for AnyValue&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DataType","synthetic":true,"types":[]},{"text":"impl Sync for Field","synthetic":true,"types":[]},{"text":"impl Sync for Schema","synthetic":true,"types":[]},{"text":"impl Sync for PolarsError","synthetic":true,"types":[]},{"text":"impl&lt;'df, 'selection_str&gt; Sync for GroupBy&lt;'df, 'selection_str&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GroupByMethod","synthetic":true,"types":[]},{"text":"impl&lt;'df, 'selection_str&gt; Sync for Pivot&lt;'df, 'selection_str&gt;","synthetic":true,"types":[]},{"text":"impl Sync for PivotAgg","synthetic":true,"types":[]},{"text":"impl Sync for JoinType","synthetic":true,"types":[]},{"text":"impl Sync for SampleRule","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Row&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for DataFrame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for RecordBatchIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Series","synthetic":true,"types":[]}];
implementors["polars_io"] = [{"text":"impl&lt;'a, W&gt; Sync for CsvWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CsvEncoding","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Sync for CsvReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for SequentialReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for IPCReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Sync for IPCWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for JsonReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ParquetReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ScanAggregation","synthetic":true,"types":[]}];
implementors["polars_lazy"] = [{"text":"impl Sync for AggExpr","synthetic":true,"types":[]},{"text":"impl Sync for Expr","synthetic":true,"types":[]},{"text":"impl Sync for Operator","synthetic":true,"types":[]},{"text":"impl Sync for When","synthetic":true,"types":[]},{"text":"impl Sync for WhenThen","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LazyCsvReader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for JoinOptions","synthetic":true,"types":[]},{"text":"impl Sync for LazyFrame","synthetic":true,"types":[]},{"text":"impl Sync for OptState","synthetic":true,"types":[]},{"text":"impl Sync for LazyGroupBy","synthetic":true,"types":[]},{"text":"impl Sync for PredicatePushDown","synthetic":true,"types":[]},{"text":"impl Sync for ProjectionPushDown","synthetic":true,"types":[]},{"text":"impl Sync for TypeCoercionRule","synthetic":true,"types":[]},{"text":"impl Sync for StackOptimizer","synthetic":true,"types":[]},{"text":"impl Sync for AAggExpr","synthetic":true,"types":[]},{"text":"impl Sync for AExpr","synthetic":true,"types":[]},{"text":"impl Sync for ALogicalPlan","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ALogicalPlanBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ScalarValue","synthetic":true,"types":[]},{"text":"impl Sync for LogicalPlan","synthetic":true,"types":[]},{"text":"impl Sync for LogicalPlanBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for CacheExec","synthetic":true,"types":[]},{"text":"impl Sync for ParquetExec","synthetic":true,"types":[]},{"text":"impl Sync for CsvExec","synthetic":true,"types":[]},{"text":"impl !Sync for FilterExec","synthetic":true,"types":[]},{"text":"impl Sync for DataFrameExec","synthetic":true,"types":[]},{"text":"impl !Sync for StandardExec","synthetic":true,"types":[]},{"text":"impl !Sync for GroupByExec","synthetic":true,"types":[]},{"text":"impl !Sync for JoinExec","synthetic":true,"types":[]},{"text":"impl !Sync for StackExec","synthetic":true,"types":[]},{"text":"impl !Sync for SliceExec","synthetic":true,"types":[]},{"text":"impl !Sync for MeltExec","synthetic":true,"types":[]},{"text":"impl Sync for LiteralExpr","synthetic":true,"types":[]},{"text":"impl Sync for BinaryExpr","synthetic":true,"types":[]},{"text":"impl Sync for ColumnExpr","synthetic":true,"types":[]},{"text":"impl Sync for SortExpr","synthetic":true,"types":[]},{"text":"impl Sync for NotExpr","synthetic":true,"types":[]},{"text":"impl Sync for AliasExpr","synthetic":true,"types":[]},{"text":"impl Sync for IsNullExpr","synthetic":true,"types":[]},{"text":"impl Sync for IsNotNullExpr","synthetic":true,"types":[]},{"text":"impl Sync for AggQuantileExpr","synthetic":true,"types":[]},{"text":"impl Sync for CastExpr","synthetic":true,"types":[]},{"text":"impl Sync for TernaryExpr","synthetic":true,"types":[]},{"text":"impl Sync for ApplyExpr","synthetic":true,"types":[]},{"text":"impl Sync for WindowExpr","synthetic":true,"types":[]},{"text":"impl Sync for SliceExpr","synthetic":true,"types":[]},{"text":"impl Sync for DefaultPlanner","synthetic":true,"types":[]},{"text":"impl Sync for ExprVal","synthetic":true,"types":[]},{"text":"impl Sync for PhysicalIOHelper","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Sync for YesS3","synthetic":true,"types":[]},{"text":"impl Sync for NoS3","synthetic":true,"types":[]},{"text":"impl Sync for YesS4","synthetic":true,"types":[]},{"text":"impl Sync for NoS4","synthetic":true,"types":[]},{"text":"impl Sync for YesA1","synthetic":true,"types":[]},{"text":"impl Sync for NoA1","synthetic":true,"types":[]},{"text":"impl Sync for YesA2","synthetic":true,"types":[]},{"text":"impl Sync for NoA2","synthetic":true,"types":[]},{"text":"impl Sync for YesNI","synthetic":true,"types":[]},{"text":"impl Sync for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Sync for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Sync for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for vec128_storage","synthetic":true,"types":[]},{"text":"impl Sync for vec256_storage","synthetic":true,"types":[]},{"text":"impl Sync for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl !Sync for TokenStream","synthetic":true,"types":[]},{"text":"impl !Sync for LexError","synthetic":true,"types":[]},{"text":"impl !Sync for Span","synthetic":true,"types":[]},{"text":"impl !Sync for TokenTree","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for Delimiter","synthetic":true,"types":[]},{"text":"impl !Sync for Punct","synthetic":true,"types":[]},{"text":"impl Sync for Spacing","synthetic":true,"types":[]},{"text":"impl !Sync for Ident","synthetic":true,"types":[]},{"text":"impl !Sync for Literal","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Sync for Bernoulli","synthetic":true,"types":[]},{"text":"impl Sync for BernoulliError","synthetic":true,"types":[]},{"text":"impl Sync for Binomial","synthetic":true,"types":[]},{"text":"impl Sync for Cauchy","synthetic":true,"types":[]},{"text":"impl Sync for Dirichlet","synthetic":true,"types":[]},{"text":"impl Sync for Exp1","synthetic":true,"types":[]},{"text":"impl Sync for Exp","synthetic":true,"types":[]},{"text":"impl Sync for Gamma","synthetic":true,"types":[]},{"text":"impl Sync for ChiSquared","synthetic":true,"types":[]},{"text":"impl Sync for FisherF","synthetic":true,"types":[]},{"text":"impl Sync for StudentT","synthetic":true,"types":[]},{"text":"impl Sync for Beta","synthetic":true,"types":[]},{"text":"impl Sync for StandardNormal","synthetic":true,"types":[]},{"text":"impl Sync for Normal","synthetic":true,"types":[]},{"text":"impl Sync for LogNormal","synthetic":true,"types":[]},{"text":"impl Sync for Pareto","synthetic":true,"types":[]},{"text":"impl Sync for Poisson","synthetic":true,"types":[]},{"text":"impl Sync for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for UniformDuration","synthetic":true,"types":[]},{"text":"impl Sync for UnitCircle","synthetic":true,"types":[]},{"text":"impl Sync for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Sync for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Sync for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for WeightedError","synthetic":true,"types":[]},{"text":"impl Sync for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Sync for Open01","synthetic":true,"types":[]},{"text":"impl Sync for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Sync for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Sync for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for EntropyRng","synthetic":true,"types":[]},{"text":"impl Sync for StepRng","synthetic":true,"types":[]},{"text":"impl Sync for StdRng","synthetic":true,"types":[]},{"text":"impl !Sync for ThreadRng","synthetic":true,"types":[]},{"text":"impl Sync for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Sync for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Sync for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Sync for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Sync for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Sync for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for OsRng","synthetic":true,"types":[]}];
implementors["rand_distr"] = [{"text":"impl&lt;W&gt; Sync for WeightedAliasIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Binomial","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Cauchy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Dirichlet&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Exp1","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Exp&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Gamma&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for ChiSquared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for ChiSquaredError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for FisherF&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for FisherFError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for StudentT&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Beta&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for BetaError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for InverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StandardNormal","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Normal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for LogNormal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for NormalInverseGaussian&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Pareto&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Pert&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for PertError","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Poisson&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Triangular&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TriangularError","synthetic":true,"types":[]},{"text":"impl Sync for UnitBall","synthetic":true,"types":[]},{"text":"impl Sync for UnitCircle","synthetic":true,"types":[]},{"text":"impl Sync for UnitDisc","synthetic":true,"types":[]},{"text":"impl Sync for UnitSphere","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Sync for Weibull&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Sync for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Chain&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Chunks&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Cloned&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Copied&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Enumerate&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for Filter&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for FilterMap&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for FlatMap&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for FlatMapIter&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Flatten&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for FlattenIter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, ID, F&gt; Sync for Fold&lt;I, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for FoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Inspect&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Sync for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as ParallelIterator&gt;::Item: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MinLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for MaxLen&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Map&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T, F&gt; Sync for MapWith&lt;I, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, INIT, F&gt; Sync for MapInit&lt;I, INIT, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;INIT: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for MultiZip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for PanicFuse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Iter&gt; Sync for IterBridge&lt;Iter&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Iter: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Sync for Positions&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RepeatN&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Rev&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Skip&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D, S&gt; Sync for Split&lt;D, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for Take&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, ID, F&gt; Sync for TryFold&lt;I, U, ID, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;ID: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, U, F&gt; Sync for TryFoldWith&lt;I, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;U as Try&gt;::Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Sync for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Sync for ZipEq&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Sync for StepBy&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Iter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Iter&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Chunks&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksExact&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Windows&lt;'data, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for IterMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for ChunksExactMut&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for Split&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T, P&gt; Sync for SplitMut&lt;'data, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Chars&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for CharIndices&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Bytes&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for EncodeUtf16&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Split&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for SplitTerminator&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for Lines&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch&gt; Sync for SplitWhitespace&lt;'ch&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for Matches&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ch, P&gt; Sync for MatchIndices&lt;'ch, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Drain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'data, T&gt; Sync for Drain&lt;'data, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rayon_core"] = [{"text":"impl !Sync for ThreadBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Scope&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ScopeFifo&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPool","synthetic":true,"types":[]},{"text":"impl Sync for ThreadPoolBuildError","synthetic":true,"types":[]},{"text":"impl&lt;S&nbsp;=&nbsp;DefaultSpawn&gt; !Sync for ThreadPoolBuilder&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for Configuration","synthetic":true,"types":[]},{"text":"impl !Sync for FnContext","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Sync for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Sync for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RegexSet","synthetic":true,"types":[]},{"text":"impl Sync for SetMatches","synthetic":true,"types":[]},{"text":"impl Sync for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Sync for RegexSet","synthetic":true,"types":[]},{"text":"impl Sync for SetMatches","synthetic":true,"types":[]},{"text":"impl Sync for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Sync for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl Sync for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Sync for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Sync for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Sync for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Sync for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_automata"] = [{"text":"impl&lt;T, S&gt; Sync for DenseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for Premultiplied&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for PremultipliedByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D&gt; Sync for Regex&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for SparseDFA&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for Standard&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Sync for ByteClass&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Sync for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Parser","synthetic":true,"types":[]},{"text":"impl Sync for Printer","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Span","synthetic":true,"types":[]},{"text":"impl Sync for Position","synthetic":true,"types":[]},{"text":"impl Sync for WithComments","synthetic":true,"types":[]},{"text":"impl Sync for Comment","synthetic":true,"types":[]},{"text":"impl Sync for Ast","synthetic":true,"types":[]},{"text":"impl Sync for Alternation","synthetic":true,"types":[]},{"text":"impl Sync for Concat","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for LiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for ClassPerl","synthetic":true,"types":[]},{"text":"impl Sync for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassAscii","synthetic":true,"types":[]},{"text":"impl Sync for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Sync for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Sync for ClassSet","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Sync for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Sync for Assertion","synthetic":true,"types":[]},{"text":"impl Sync for AssertionKind","synthetic":true,"types":[]},{"text":"impl Sync for Repetition","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for GroupKind","synthetic":true,"types":[]},{"text":"impl Sync for CaptureName","synthetic":true,"types":[]},{"text":"impl Sync for SetFlags","synthetic":true,"types":[]},{"text":"impl Sync for Flags","synthetic":true,"types":[]},{"text":"impl Sync for FlagsItem","synthetic":true,"types":[]},{"text":"impl Sync for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Sync for Flag","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Literals","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for Printer","synthetic":true,"types":[]},{"text":"impl Sync for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Translator","synthetic":true,"types":[]},{"text":"impl Sync for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for ErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for Hir","synthetic":true,"types":[]},{"text":"impl Sync for HirKind","synthetic":true,"types":[]},{"text":"impl Sync for Literal","synthetic":true,"types":[]},{"text":"impl Sync for Class","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Sync for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Sync for Anchor","synthetic":true,"types":[]},{"text":"impl Sync for WordBoundary","synthetic":true,"types":[]},{"text":"impl Sync for Group","synthetic":true,"types":[]},{"text":"impl Sync for GroupKind","synthetic":true,"types":[]},{"text":"impl Sync for Repetition","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Sync for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Sync for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Sync for Parser","synthetic":true,"types":[]},{"text":"impl Sync for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Range","synthetic":true,"types":[]},{"text":"impl Sync for Utf8Sequences","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Sync for Buffer","synthetic":true,"types":[]}];
implementors["scopeguard"] = [{"text":"impl Sync for Always","synthetic":true,"types":[]},{"text":"impl&lt;T, F, S&gt; Sync for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Sync for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Sync for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Sync for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Sync for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Sync for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Sync for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Sync for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Sync for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Sync for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Sync for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for CharEscape","synthetic":true,"types":[]},{"text":"impl Sync for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Serializer","synthetic":true,"types":[]},{"text":"impl Sync for Number","synthetic":true,"types":[]},{"text":"impl Sync for Value","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl Sync for Signals","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Pending&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Forever&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Sync for SigId","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl Sync for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Sync for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync + Array&gt; Sync for Drain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["snap"] = [{"text":"impl Sync for Encoder","synthetic":true,"types":[]},{"text":"impl Sync for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FrameDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Sync for FrameEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Sync for FrameEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["strum"] = [{"text":"impl Sync for ParseError","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Sync for Underscore","synthetic":true,"types":[]},{"text":"impl !Sync for Abstract","synthetic":true,"types":[]},{"text":"impl !Sync for As","synthetic":true,"types":[]},{"text":"impl !Sync for Async","synthetic":true,"types":[]},{"text":"impl !Sync for Auto","synthetic":true,"types":[]},{"text":"impl !Sync for Await","synthetic":true,"types":[]},{"text":"impl !Sync for Become","synthetic":true,"types":[]},{"text":"impl !Sync for Box","synthetic":true,"types":[]},{"text":"impl !Sync for Break","synthetic":true,"types":[]},{"text":"impl !Sync for Const","synthetic":true,"types":[]},{"text":"impl !Sync for Continue","synthetic":true,"types":[]},{"text":"impl !Sync for Crate","synthetic":true,"types":[]},{"text":"impl !Sync for Default","synthetic":true,"types":[]},{"text":"impl !Sync for Do","synthetic":true,"types":[]},{"text":"impl !Sync for Dyn","synthetic":true,"types":[]},{"text":"impl !Sync for Else","synthetic":true,"types":[]},{"text":"impl !Sync for Enum","synthetic":true,"types":[]},{"text":"impl !Sync for Extern","synthetic":true,"types":[]},{"text":"impl !Sync for Final","synthetic":true,"types":[]},{"text":"impl !Sync for Fn","synthetic":true,"types":[]},{"text":"impl !Sync for For","synthetic":true,"types":[]},{"text":"impl !Sync for If","synthetic":true,"types":[]},{"text":"impl !Sync for Impl","synthetic":true,"types":[]},{"text":"impl !Sync for In","synthetic":true,"types":[]},{"text":"impl !Sync for Let","synthetic":true,"types":[]},{"text":"impl !Sync for Loop","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for Match","synthetic":true,"types":[]},{"text":"impl !Sync for Mod","synthetic":true,"types":[]},{"text":"impl !Sync for Move","synthetic":true,"types":[]},{"text":"impl !Sync for Mut","synthetic":true,"types":[]},{"text":"impl !Sync for Override","synthetic":true,"types":[]},{"text":"impl !Sync for Priv","synthetic":true,"types":[]},{"text":"impl !Sync for Pub","synthetic":true,"types":[]},{"text":"impl !Sync for Ref","synthetic":true,"types":[]},{"text":"impl !Sync for Return","synthetic":true,"types":[]},{"text":"impl !Sync for SelfType","synthetic":true,"types":[]},{"text":"impl !Sync for SelfValue","synthetic":true,"types":[]},{"text":"impl !Sync for Static","synthetic":true,"types":[]},{"text":"impl !Sync for Struct","synthetic":true,"types":[]},{"text":"impl !Sync for Super","synthetic":true,"types":[]},{"text":"impl !Sync for Trait","synthetic":true,"types":[]},{"text":"impl !Sync for Try","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for Typeof","synthetic":true,"types":[]},{"text":"impl !Sync for Union","synthetic":true,"types":[]},{"text":"impl !Sync for Unsafe","synthetic":true,"types":[]},{"text":"impl !Sync for Unsized","synthetic":true,"types":[]},{"text":"impl !Sync for Use","synthetic":true,"types":[]},{"text":"impl !Sync for Virtual","synthetic":true,"types":[]},{"text":"impl !Sync for Where","synthetic":true,"types":[]},{"text":"impl !Sync for While","synthetic":true,"types":[]},{"text":"impl !Sync for Yield","synthetic":true,"types":[]},{"text":"impl !Sync for Add","synthetic":true,"types":[]},{"text":"impl !Sync for AddEq","synthetic":true,"types":[]},{"text":"impl !Sync for And","synthetic":true,"types":[]},{"text":"impl !Sync for AndAnd","synthetic":true,"types":[]},{"text":"impl !Sync for AndEq","synthetic":true,"types":[]},{"text":"impl !Sync for At","synthetic":true,"types":[]},{"text":"impl !Sync for Bang","synthetic":true,"types":[]},{"text":"impl !Sync for Caret","synthetic":true,"types":[]},{"text":"impl !Sync for CaretEq","synthetic":true,"types":[]},{"text":"impl !Sync for Colon","synthetic":true,"types":[]},{"text":"impl !Sync for Colon2","synthetic":true,"types":[]},{"text":"impl !Sync for Comma","synthetic":true,"types":[]},{"text":"impl !Sync for Div","synthetic":true,"types":[]},{"text":"impl !Sync for DivEq","synthetic":true,"types":[]},{"text":"impl !Sync for Dollar","synthetic":true,"types":[]},{"text":"impl !Sync for Dot","synthetic":true,"types":[]},{"text":"impl !Sync for Dot2","synthetic":true,"types":[]},{"text":"impl !Sync for Dot3","synthetic":true,"types":[]},{"text":"impl !Sync for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Sync for Eq","synthetic":true,"types":[]},{"text":"impl !Sync for EqEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ge","synthetic":true,"types":[]},{"text":"impl !Sync for Gt","synthetic":true,"types":[]},{"text":"impl !Sync for Le","synthetic":true,"types":[]},{"text":"impl !Sync for Lt","synthetic":true,"types":[]},{"text":"impl !Sync for MulEq","synthetic":true,"types":[]},{"text":"impl !Sync for Ne","synthetic":true,"types":[]},{"text":"impl !Sync for Or","synthetic":true,"types":[]},{"text":"impl !Sync for OrEq","synthetic":true,"types":[]},{"text":"impl !Sync for OrOr","synthetic":true,"types":[]},{"text":"impl !Sync for Pound","synthetic":true,"types":[]},{"text":"impl !Sync for Question","synthetic":true,"types":[]},{"text":"impl !Sync for RArrow","synthetic":true,"types":[]},{"text":"impl !Sync for LArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Rem","synthetic":true,"types":[]},{"text":"impl !Sync for RemEq","synthetic":true,"types":[]},{"text":"impl !Sync for FatArrow","synthetic":true,"types":[]},{"text":"impl !Sync for Semi","synthetic":true,"types":[]},{"text":"impl !Sync for Shl","synthetic":true,"types":[]},{"text":"impl !Sync for ShlEq","synthetic":true,"types":[]},{"text":"impl !Sync for Shr","synthetic":true,"types":[]},{"text":"impl !Sync for ShrEq","synthetic":true,"types":[]},{"text":"impl !Sync for Star","synthetic":true,"types":[]},{"text":"impl !Sync for Sub","synthetic":true,"types":[]},{"text":"impl !Sync for SubEq","synthetic":true,"types":[]},{"text":"impl !Sync for Tilde","synthetic":true,"types":[]},{"text":"impl !Sync for Brace","synthetic":true,"types":[]},{"text":"impl !Sync for Bracket","synthetic":true,"types":[]},{"text":"impl !Sync for Paren","synthetic":true,"types":[]},{"text":"impl !Sync for Group","synthetic":true,"types":[]},{"text":"impl !Sync for Attribute","synthetic":true,"types":[]},{"text":"impl !Sync for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for Meta","synthetic":true,"types":[]},{"text":"impl !Sync for MetaList","synthetic":true,"types":[]},{"text":"impl !Sync for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Sync for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Sync for Variant","synthetic":true,"types":[]},{"text":"impl !Sync for Fields","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Sync for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Sync for Field","synthetic":true,"types":[]},{"text":"impl !Sync for Visibility","synthetic":true,"types":[]},{"text":"impl !Sync for VisPublic","synthetic":true,"types":[]},{"text":"impl !Sync for VisCrate","synthetic":true,"types":[]},{"text":"impl !Sync for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Sync for Expr","synthetic":true,"types":[]},{"text":"impl !Sync for ExprArray","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Sync for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBox","synthetic":true,"types":[]},{"text":"impl !Sync for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprCast","synthetic":true,"types":[]},{"text":"impl !Sync for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Sync for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Sync for ExprField","synthetic":true,"types":[]},{"text":"impl !Sync for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIf","synthetic":true,"types":[]},{"text":"impl !Sync for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLet","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLit","synthetic":true,"types":[]},{"text":"impl !Sync for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Sync for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Sync for ExprParen","synthetic":true,"types":[]},{"text":"impl !Sync for ExprPath","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRange","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReference","synthetic":true,"types":[]},{"text":"impl !Sync for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Sync for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Sync for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTry","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Sync for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Sync for ExprType","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Sync for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Sync for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Sync for ExprYield","synthetic":true,"types":[]},{"text":"impl !Sync for Member","synthetic":true,"types":[]},{"text":"impl !Sync for Index","synthetic":true,"types":[]},{"text":"impl !Sync for Generics","synthetic":true,"types":[]},{"text":"impl !Sync for GenericParam","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParam","synthetic":true,"types":[]},{"text":"impl !Sync for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Sync for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Sync for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBound","synthetic":true,"types":[]},{"text":"impl !Sync for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Sync for WhereClause","synthetic":true,"types":[]},{"text":"impl !Sync for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateType","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Sync for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Sync for Lifetime","synthetic":true,"types":[]},{"text":"impl !Sync for Lit","synthetic":true,"types":[]},{"text":"impl !Sync for LitStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Sync for LitByte","synthetic":true,"types":[]},{"text":"impl !Sync for LitChar","synthetic":true,"types":[]},{"text":"impl !Sync for LitInt","synthetic":true,"types":[]},{"text":"impl !Sync for LitFloat","synthetic":true,"types":[]},{"text":"impl !Sync for LitBool","synthetic":true,"types":[]},{"text":"impl Sync for StrStyle","synthetic":true,"types":[]},{"text":"impl !Sync for Macro","synthetic":true,"types":[]},{"text":"impl !Sync for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Sync for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Sync for Data","synthetic":true,"types":[]},{"text":"impl !Sync for DataStruct","synthetic":true,"types":[]},{"text":"impl !Sync for DataEnum","synthetic":true,"types":[]},{"text":"impl !Sync for DataUnion","synthetic":true,"types":[]},{"text":"impl !Sync for BinOp","synthetic":true,"types":[]},{"text":"impl !Sync for UnOp","synthetic":true,"types":[]},{"text":"impl !Sync for Type","synthetic":true,"types":[]},{"text":"impl !Sync for TypeArray","synthetic":true,"types":[]},{"text":"impl !Sync for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Sync for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Sync for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Sync for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Sync for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Sync for TypeNever","synthetic":true,"types":[]},{"text":"impl !Sync for TypeParen","synthetic":true,"types":[]},{"text":"impl !Sync for TypePath","synthetic":true,"types":[]},{"text":"impl !Sync for TypePtr","synthetic":true,"types":[]},{"text":"impl !Sync for TypeReference","synthetic":true,"types":[]},{"text":"impl !Sync for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Sync for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Sync for Abi","synthetic":true,"types":[]},{"text":"impl !Sync for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Sync for Variadic","synthetic":true,"types":[]},{"text":"impl !Sync for ReturnType","synthetic":true,"types":[]},{"text":"impl !Sync for Path","synthetic":true,"types":[]},{"text":"impl !Sync for PathSegment","synthetic":true,"types":[]},{"text":"impl !Sync for PathArguments","synthetic":true,"types":[]},{"text":"impl !Sync for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Sync for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for Binding","synthetic":true,"types":[]},{"text":"impl !Sync for Constraint","synthetic":true,"types":[]},{"text":"impl !Sync for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Sync for QSelf","synthetic":true,"types":[]},{"text":"impl !Sync for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Sync for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Sync for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Sync for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Nothing","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; Sync for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Sync for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Sync for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Sync for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["threadpool"] = [{"text":"impl Sync for Builder","synthetic":true,"types":[]},{"text":"impl !Sync for ThreadPool","synthetic":true,"types":[]}];
implementors["thrift"] = [{"text":"impl&lt;T&gt; Sync for TBinaryInputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TBinaryInputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TBinaryOutputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TBinaryOutputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TCompactInputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TCompactInputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for TCompactOutputProtocol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TCompactOutputProtocolFactory","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; Sync for TMultiplexedOutputProtocol&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for TStoredInputProtocol&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for TMessageIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for TStructIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for TFieldIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for TListIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for TSetIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for TMapIdentifier","synthetic":true,"types":[]},{"text":"impl Sync for TMessageType","synthetic":true,"types":[]},{"text":"impl Sync for TType","synthetic":true,"types":[]},{"text":"impl Sync for TMultiplexedProcessor","synthetic":true,"types":[]},{"text":"impl&lt;PRC, RTF, IPF, WTF, OPF&gt; !Sync for TServer&lt;PRC, RTF, IPF, WTF, OPF&gt;","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for TBufferedReadTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TBufferedReadTransportFactory","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for TBufferedWriteTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TBufferedWriteTransportFactory","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for TFramedReadTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TFramedReadTransportFactory","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for TFramedWriteTransport&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for TFramedWriteTransportFactory","synthetic":true,"types":[]},{"text":"impl Sync for TBufferChannel","synthetic":true,"types":[]},{"text":"impl Sync for TTcpChannel","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for ReadHalf&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Sync for WriteHalf&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for Error","synthetic":true,"types":[]},{"text":"impl Sync for TransportError","synthetic":true,"types":[]},{"text":"impl Sync for TransportErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for ProtocolError","synthetic":true,"types":[]},{"text":"impl Sync for ProtocolErrorKind","synthetic":true,"types":[]},{"text":"impl Sync for ApplicationError","synthetic":true,"types":[]},{"text":"impl Sync for ApplicationErrorKind","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Sync for Duration","synthetic":true,"types":[]},{"text":"impl Sync for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Sync for Timespec","synthetic":true,"types":[]},{"text":"impl Sync for PreciseTime","synthetic":true,"types":[]},{"text":"impl Sync for SteadyTime","synthetic":true,"types":[]},{"text":"impl Sync for Tm","synthetic":true,"types":[]},{"text":"impl Sync for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["unicode_segmentation"] = [{"text":"impl&lt;'a&gt; Sync for GraphemeIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Graphemes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for GraphemeCursor","synthetic":true,"types":[]},{"text":"impl Sync for GraphemeIncomplete","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnicodeWords&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UWordBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UWordBoundIndices&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnicodeSentences&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for USentenceBounds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for USentenceBoundIndices&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["zstd"] = [{"text":"impl !Sync for Compressor","synthetic":true,"types":[]},{"text":"impl !Sync for Decompressor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for EncoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DecoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !Sync for Decoder&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !Sync for Encoder&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !Sync for Encoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !Sync for Decoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !Sync for AutoFinishEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Sync for Reader&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, D&gt; Sync for Writer&lt;W, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for NoOp","synthetic":true,"types":[]},{"text":"impl Sync for Status","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Decoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for Encoder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl&lt;'a&gt; !Sync for CCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Sync for DCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for InBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for OutBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FrameFormat","synthetic":true,"types":[]},{"text":"impl Sync for CParameter","synthetic":true,"types":[]},{"text":"impl Sync for DParameter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for CDict&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sync for DDict&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Sync for ZSTD_CCtx_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_DCtx_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_strategy","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_cParameter","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_bounds","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_ResetDirective","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_dParameter","synthetic":true,"types":[]},{"text":"impl !Sync for ZSTD_inBuffer_s","synthetic":true,"types":[]},{"text":"impl !Sync for ZSTD_outBuffer_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_EndDirective","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_CDict_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_DDict_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_CCtx_params_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_Sequence","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_compressionParameters","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_frameParameters","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_parameters","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_dictContentType_e","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_dictLoadMethod_e","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_format_e","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_forceIgnoreChecksum_e","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_dictAttachPref_e","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_literalCompressionMode_e","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_sequenceFormat_e","synthetic":true,"types":[]},{"text":"impl !Sync for ZSTD_customMem","synthetic":true,"types":[]},{"text":"impl Sync for POOL_ctx_s","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_frameProgression","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_frameType_e","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_frameHeader","synthetic":true,"types":[]},{"text":"impl Sync for ZSTD_nextInputType_e","synthetic":true,"types":[]},{"text":"impl Sync for ZDICT_params_t","synthetic":true,"types":[]},{"text":"impl Sync for ZDICT_cover_params_t","synthetic":true,"types":[]},{"text":"impl Sync for ZDICT_fastCover_params_t","synthetic":true,"types":[]},{"text":"impl Sync for ZDICT_legacy_params_t","synthetic":true,"types":[]},{"text":"impl !Sync for __locale_struct","synthetic":true,"types":[]},{"text":"impl Sync for ZSTDMT_CCtx_s","synthetic":true,"types":[]},{"text":"impl Sync for __locale_data","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()