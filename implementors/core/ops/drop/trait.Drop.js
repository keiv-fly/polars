(function() {var implementors = {};
implementors["alloc_no_stdlib"] = [{"text":"impl&lt;'a, T:&nbsp;'a&gt; Drop for CallocBackingStore&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl Drop for Error","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Drop for ArrayVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for IntoIter&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array&gt; Drop for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: 'a,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arrow"] = [{"text":"impl Drop for StructBuilder","synthetic":false,"types":[]},{"text":"impl Drop for MutableBuffer","synthetic":false,"types":[]},{"text":"impl Drop for Bytes","synthetic":false,"types":[]},{"text":"impl Drop for FFI_ArrowSchema","synthetic":false,"types":[]},{"text":"impl Drop for FFI_ArrowArray","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Write&gt; Drop for FileWriter&lt;W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Write&gt; Drop for StreamWriter&lt;W&gt;","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a, W:&nbsp;Write&gt; Drop for EncoderWriter&lt;'a, W&gt;","synthetic":false,"types":[]}];
implementors["brotli"] = [{"text":"impl&lt;ErrType, W:&nbsp;CustomWrite&lt;ErrType&gt;, BufferType:&nbsp;SliceWrapperMut&lt;u8&gt;, Alloc:&nbsp;BrotliAlloc&gt; Drop for CompressorWriterCustomIo&lt;ErrType, W, BufferType, Alloc&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, Alloc:&nbsp;Allocator&lt;u16&gt; + Allocator&lt;u32&gt; + Allocator&lt;floatX&gt;&gt; Drop for StrideEval&lt;'a, Alloc&gt;","synthetic":false,"types":[]},{"text":"impl&lt;ReturnValue:&nbsp;Send + 'static, ExtraInput:&nbsp;Send + 'static, Alloc:&nbsp;BrotliAlloc + Send + 'static, U:&nbsp;Send + 'static + Sync&gt; Drop for WorkerPool&lt;ReturnValue, ExtraInput, Alloc, U&gt;","synthetic":false,"types":[]}];
implementors["brotli_decompressor"] = [{"text":"impl&lt;'brotli_state, AllocU8:&nbsp;Allocator&lt;u8&gt;, AllocU32:&nbsp;Allocator&lt;u32&gt;, AllocHC:&nbsp;Allocator&lt;HuffmanCode&gt;&gt; Drop for BrotliState&lt;AllocU8, AllocU32, AllocHC&gt;","synthetic":false,"types":[]},{"text":"impl&lt;ErrType, W:&nbsp;CustomWrite&lt;ErrType&gt;, BufferType:&nbsp;SliceWrapperMut&lt;u8&gt;, AllocU8:&nbsp;Allocator&lt;u8&gt;, AllocU32:&nbsp;Allocator&lt;u32&gt;, AllocHC:&nbsp;Allocator&lt;HuffmanCode&gt;&gt; Drop for DecompressorWriterCustomIo&lt;ErrType, W, BufferType, AllocU8, AllocU32, AllocHC&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ty:&nbsp;Sized + Default&gt; Drop for MemoryBlock&lt;Ty&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Drop for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for SelectedOperation&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; Drop for Injector&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable&gt; Drop for Owned&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for LocalHandle","synthetic":false,"types":[]},{"text":"impl Drop for Guard","synthetic":false,"types":[]}];
implementors["crossbeam_queue"] = [{"text":"impl&lt;T&gt; Drop for ArrayQueue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for SegQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;?Sized&gt; Drop for ShardedLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl Drop for WaitGroup","synthetic":false,"types":[]}];
implementors["csv"] = [{"text":"impl&lt;W:&nbsp;Write&gt; Drop for Writer&lt;W&gt;","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl&lt;W:&nbsp;Write&gt; Drop for GzEncoder&lt;W&gt;","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Drop for RawTable&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for RawIntoIter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for RawDrain&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for RawParDrain&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Drop for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;K, &amp;mut V) -&gt; bool,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, F&gt; Drop for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;K) -&gt; bool,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;'a, K, I, F&gt; Drop for Group&lt;'a, K, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: 'a,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I&gt; Drop for Chunk&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: 'a,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;?Sized + 'a&gt; Drop for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;?Sized + 'a&gt; Drop for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;?Sized + 'a&gt; Drop for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;A&gt; Drop for OwnedRepr&lt;A&gt;","synthetic":false,"types":[]}];
implementors["parquet"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Drop for Buffer&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Drop for BufferPtr&lt;T&gt;","synthetic":false,"types":[]}];
implementors["polars_arrow"] = [{"text":"impl&lt;T&gt; Drop for AlignedVec&lt;T&gt;","synthetic":false,"types":[]}];
implementors["rayon"] = [{"text":"impl&lt;'a, T:&nbsp;Ord + Send&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for Drain&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'data, T:&nbsp;Send&gt; Drop for Drain&lt;'data, T&gt;","synthetic":false,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Drop for ThreadPool","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Drop for Ast","synthetic":false,"types":[]},{"text":"impl Drop for ClassSet","synthetic":false,"types":[]},{"text":"impl Drop for Hir","synthetic":false,"types":[]}];
implementors["scopeguard"] = [{"text":"impl&lt;T, F, S&gt; Drop for ScopeGuard&lt;T, F, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnOnce(T),<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Strategy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T:&nbsp;'a + Array&gt; Drop for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for SmallVec&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array&gt; Drop for IntoIter&lt;A&gt;","synthetic":false,"types":[]}];
implementors["snap"] = [{"text":"impl&lt;W:&nbsp;Write&gt; Drop for FrameEncoder&lt;W&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;'a&gt; Drop for ParseBuffer&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T:&nbsp;Send&gt; Drop for ThreadLocal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["zstd"] = [{"text":"impl&lt;W:&nbsp;Write&gt; Drop for AutoFinishEncoder&lt;'_, W&gt;","synthetic":false,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl&lt;'a&gt; Drop for CCtx&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Drop for DCtx&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for CDict&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Drop for DDict&lt;'a&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()