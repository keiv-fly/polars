(function() {var implementors = {};
implementors["ahash"] = [{"text":"impl&lt;T, S&gt; BitOr&lt;&amp;'_ AHashSet&lt;T, S&gt;&gt; for &amp;AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arrow"] = [{"text":"impl&lt;'a, 'b&gt; BitOr&lt;&amp;'b Bitmap&gt; for &amp;'a Bitmap","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; BitOr&lt;&amp;'b Buffer&gt; for &amp;'a Buffer","synthetic":false,"types":[]}];
implementors["crossterm"] = [{"text":"impl BitOr&lt;KeyModifiers&gt; for KeyModifiers","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Attribute&gt; for Attributes","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Attributes&gt; for Attributes","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T, S&gt; BitOr&lt;&amp;'_ HashSet&lt;T, S&gt;&gt; for &amp;HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S1, S2&gt; BitOr&lt;&amp;'_ IndexSet&lt;T, S2&gt;&gt; for &amp;IndexSet&lt;T, S1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: BuildHasher + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["mio"] = [{"text":"impl BitOr&lt;Interest&gt; for Interest","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;A, B, S, S2, D, E&gt; BitOr&lt;ArrayBase&lt;S2, E&gt;&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + BitOr&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, B, S, S2, D, E&gt; BitOr&lt;&amp;'a ArrayBase&lt;S2, E&gt;&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + BitOr&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, B, S, S2, D, E&gt; BitOr&lt;&amp;'a ArrayBase&lt;S2, E&gt;&gt; for &amp;'a ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + BitOr&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, S, D, B&gt; BitOr&lt;B&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + BitOr&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ScalarOperand,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, S, D, B&gt; BitOr&lt;B&gt; for &amp;'a ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + BitOr&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ScalarOperand,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i8&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u8&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i16&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i16&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u16&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u16&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i32&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i32&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u32&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u32&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i64&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i64&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u64&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u64&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for i128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i128&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i128&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for u128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u128&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u128&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; BitOr&lt;ArrayBase&lt;S, D&gt;&gt; for bool <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = bool&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; BitOr&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for bool <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = bool&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl BitOr&lt;BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; BitOr&lt;BigInt&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; BitOr&lt;&amp;'b BigInt&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; BitOr&lt;&amp;'a BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl BitOr&lt;BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; BitOr&lt;BigUint&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; BitOr&lt;&amp;'b BigUint&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; BitOr&lt;&amp;'a BigUint&gt; for BigUint","synthetic":false,"types":[]}];
implementors["packed_simd_2"] = [{"text":"impl BitOr&lt;Simd&lt;[i8; 2]&gt;&gt; for i8x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i8&gt; for i8x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 2]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 2]&gt;&gt; for u8x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u8&gt; for u8x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 2]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 2]&gt;&gt; for m8x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m8x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 2]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 4]&gt;&gt; for i8x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i8&gt; for i8x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 4]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 4]&gt;&gt; for u8x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u8&gt; for u8x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 4]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 4]&gt;&gt; for m8x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m8x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 4]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 2]&gt;&gt; for i16x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i16&gt; for i16x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 2]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 2]&gt;&gt; for u16x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u16&gt; for u16x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 2]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 2]&gt;&gt; for m16x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m16x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 2]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 8]&gt;&gt; for i8x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i8&gt; for i8x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 8]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 8]&gt;&gt; for u8x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u8&gt; for u8x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 8]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 8]&gt;&gt; for m8x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m8x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 8]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 4]&gt;&gt; for i16x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i16&gt; for i16x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 4]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 4]&gt;&gt; for u16x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u16&gt; for u16x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 4]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 4]&gt;&gt; for m16x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m16x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 4]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i32; 2]&gt;&gt; for i32x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i32&gt; for i32x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i32; 2]&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u32; 2]&gt;&gt; for u32x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u32&gt; for u32x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u32; 2]&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m32; 2]&gt;&gt; for m32x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m32x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m32; 2]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 16]&gt;&gt; for i8x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i8&gt; for i8x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 16]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 16]&gt;&gt; for u8x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u8&gt; for u8x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 16]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 16]&gt;&gt; for m8x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m8x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 16]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 8]&gt;&gt; for i16x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i16&gt; for i16x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 8]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 8]&gt;&gt; for u16x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u16&gt; for u16x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 8]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 8]&gt;&gt; for m16x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m16x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 8]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i32; 4]&gt;&gt; for i32x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i32&gt; for i32x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i32; 4]&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u32; 4]&gt;&gt; for u32x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u32&gt; for u32x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u32; 4]&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m32; 4]&gt;&gt; for m32x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m32x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m32; 4]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i64; 2]&gt;&gt; for i64x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i64&gt; for i64x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i64; 2]&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u64; 2]&gt;&gt; for u64x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u64&gt; for u64x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u64; 2]&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m64; 2]&gt;&gt; for m64x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m64x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m64; 2]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i128; 1]&gt;&gt; for i128x1","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i128&gt; for i128x1","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i128; 1]&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u128; 1]&gt;&gt; for u128x1","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u128&gt; for u128x1","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u128; 1]&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m128; 1]&gt;&gt; for m128x1","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m128x1","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m128; 1]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 32]&gt;&gt; for i8x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i8&gt; for i8x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 32]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 32]&gt;&gt; for u8x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u8&gt; for u8x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 32]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 32]&gt;&gt; for m8x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m8x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 32]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 16]&gt;&gt; for i16x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i16&gt; for i16x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 16]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 16]&gt;&gt; for u16x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u16&gt; for u16x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 16]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 16]&gt;&gt; for m16x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m16x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 16]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i32; 8]&gt;&gt; for i32x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i32&gt; for i32x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i32; 8]&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u32; 8]&gt;&gt; for u32x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u32&gt; for u32x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u32; 8]&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m32; 8]&gt;&gt; for m32x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m32x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m32; 8]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i64; 4]&gt;&gt; for i64x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i64&gt; for i64x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i64; 4]&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u64; 4]&gt;&gt; for u64x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u64&gt; for u64x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u64; 4]&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m64; 4]&gt;&gt; for m64x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m64x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m64; 4]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i128; 2]&gt;&gt; for i128x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i128&gt; for i128x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i128; 2]&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u128; 2]&gt;&gt; for u128x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u128&gt; for u128x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u128; 2]&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m128; 2]&gt;&gt; for m128x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m128x2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m128; 2]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 64]&gt;&gt; for i8x64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i8&gt; for i8x64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i8; 64]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 64]&gt;&gt; for u8x64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u8&gt; for u8x64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u8; 64]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 64]&gt;&gt; for m8x64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m8x64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m8; 64]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 32]&gt;&gt; for i16x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i16&gt; for i16x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i16; 32]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 32]&gt;&gt; for u16x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u16&gt; for u16x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u16; 32]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 32]&gt;&gt; for m16x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m16x32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m16; 32]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i32; 16]&gt;&gt; for i32x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i32&gt; for i32x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i32; 16]&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u32; 16]&gt;&gt; for u32x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u32&gt; for u32x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u32; 16]&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m32; 16]&gt;&gt; for m32x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m32x16","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m32; 16]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i64; 8]&gt;&gt; for i64x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i64&gt; for i64x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i64; 8]&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u64; 8]&gt;&gt; for u64x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u64&gt; for u64x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u64; 8]&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m64; 8]&gt;&gt; for m64x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m64x8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m64; 8]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i128; 4]&gt;&gt; for i128x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;i128&gt; for i128x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[i128; 4]&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u128; 4]&gt;&gt; for u128x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;u128&gt; for u128x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[u128; 4]&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m128; 4]&gt;&gt; for m128x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for m128x4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[m128; 4]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[isize; 2]&gt;&gt; for isizex2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;isize&gt; for isizex2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[isize; 2]&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[usize; 2]&gt;&gt; for usizex2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;usize&gt; for usizex2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[usize; 2]&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[msize; 2]&gt;&gt; for msizex2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for msizex2","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[msize; 2]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[isize; 4]&gt;&gt; for isizex4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;isize&gt; for isizex4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[isize; 4]&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[usize; 4]&gt;&gt; for usizex4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;usize&gt; for usizex4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[usize; 4]&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[msize; 4]&gt;&gt; for msizex4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for msizex4","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[msize; 4]&gt;&gt; for bool","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[isize; 8]&gt;&gt; for isizex8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;isize&gt; for isizex8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[isize; 8]&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[usize; 8]&gt;&gt; for usizex8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;usize&gt; for usizex8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[usize; 8]&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[msize; 8]&gt;&gt; for msizex8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;bool&gt; for msizex8","synthetic":false,"types":[]},{"text":"impl BitOr&lt;Simd&lt;[msize; 8]&gt;&gt; for bool","synthetic":false,"types":[]}];
implementors["polars_core"] = [{"text":"impl BitOr&lt;&amp;'_ ChunkedArray&lt;BooleanType&gt;&gt; for &amp;BooleanChunked","synthetic":false,"types":[]},{"text":"impl BitOr&lt;ChunkedArray&lt;BooleanType&gt;&gt; for BooleanChunked","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()