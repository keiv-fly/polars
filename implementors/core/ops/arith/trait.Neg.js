(function() {var implementors = {};
implementors["ndarray"] = [{"text":"impl&lt;A, S, D&gt; Neg for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Neg&lt;Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, S, D&gt; Neg for &amp;'a ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a A: 'a + Neg&lt;Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Neg for Sign","synthetic":false,"types":[]},{"text":"impl Neg for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Neg for &amp;'a BigInt","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone + Num + Neg&lt;Output = T&gt;&gt; Neg for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num + Neg&lt;Output = T&gt;&gt; Neg for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Neg for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer + Neg&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Neg for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer + Neg&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float&gt; Neg for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Neg for NotNan&lt;T&gt;","synthetic":false,"types":[]}];
implementors["packed_simd_2"] = [{"text":"impl Neg for i8x2","synthetic":false,"types":[]},{"text":"impl Neg for i8x4","synthetic":false,"types":[]},{"text":"impl Neg for i16x2","synthetic":false,"types":[]},{"text":"impl Neg for i8x8","synthetic":false,"types":[]},{"text":"impl Neg for i16x4","synthetic":false,"types":[]},{"text":"impl Neg for i32x2","synthetic":false,"types":[]},{"text":"impl Neg for f32x2","synthetic":false,"types":[]},{"text":"impl Neg for i8x16","synthetic":false,"types":[]},{"text":"impl Neg for i16x8","synthetic":false,"types":[]},{"text":"impl Neg for i32x4","synthetic":false,"types":[]},{"text":"impl Neg for f32x4","synthetic":false,"types":[]},{"text":"impl Neg for i64x2","synthetic":false,"types":[]},{"text":"impl Neg for f64x2","synthetic":false,"types":[]},{"text":"impl Neg for i128x1","synthetic":false,"types":[]},{"text":"impl Neg for i8x32","synthetic":false,"types":[]},{"text":"impl Neg for i16x16","synthetic":false,"types":[]},{"text":"impl Neg for i32x8","synthetic":false,"types":[]},{"text":"impl Neg for f32x8","synthetic":false,"types":[]},{"text":"impl Neg for i64x4","synthetic":false,"types":[]},{"text":"impl Neg for f64x4","synthetic":false,"types":[]},{"text":"impl Neg for i128x2","synthetic":false,"types":[]},{"text":"impl Neg for i8x64","synthetic":false,"types":[]},{"text":"impl Neg for i16x32","synthetic":false,"types":[]},{"text":"impl Neg for i32x16","synthetic":false,"types":[]},{"text":"impl Neg for f32x16","synthetic":false,"types":[]},{"text":"impl Neg for i64x8","synthetic":false,"types":[]},{"text":"impl Neg for f64x8","synthetic":false,"types":[]},{"text":"impl Neg for i128x4","synthetic":false,"types":[]},{"text":"impl Neg for isizex2","synthetic":false,"types":[]},{"text":"impl Neg for isizex4","synthetic":false,"types":[]},{"text":"impl Neg for isizex8","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Neg for Duration","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()