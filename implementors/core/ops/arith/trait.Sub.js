(function() {var implementors = {};
implementors["ahash"] = [{"text":"impl&lt;T, S&gt; Sub&lt;&amp;'_ AHashSet&lt;T, S&gt;&gt; for &amp;AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Sub&lt;FixedOffset&gt; for NaiveTime","synthetic":false,"types":[]},{"text":"impl Sub&lt;FixedOffset&gt; for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Sub&lt;FixedOffset&gt; for DateTime&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl Sub&lt;Duration&gt; for NaiveDate","synthetic":false,"types":[]},{"text":"impl Sub&lt;NaiveDate&gt; for NaiveDate","synthetic":false,"types":[]},{"text":"impl Sub&lt;Duration&gt; for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Sub&lt;NaiveDateTime&gt; for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Sub&lt;Duration&gt; for NaiveTime","synthetic":false,"types":[]},{"text":"impl Sub&lt;NaiveTime&gt; for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Sub&lt;Duration&gt; for Date&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Sub&lt;Date&lt;Tz&gt;&gt; for Date&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Sub&lt;Duration&gt; for DateTime&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Sub&lt;DateTime&lt;Tz&gt;&gt; for DateTime&lt;Tz&gt;","synthetic":false,"types":[]}];
implementors["crossterm"] = [{"text":"impl Sub&lt;KeyModifiers&gt; for KeyModifiers","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T, S&gt; Sub&lt;&amp;'_ HashSet&lt;T, S&gt;&gt; for &amp;HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;T, S1, S2&gt; Sub&lt;&amp;'_ IndexSet&lt;T, S2&gt;&gt; for &amp;IndexSet&lt;T, S1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: BuildHasher + Default,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: BuildHasher,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;I&gt; Sub&lt;Dim&lt;I&gt;&gt; for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dim&lt;I&gt;: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Sub&lt;usize&gt; for Dim&lt;[Ix; 1]&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A, B, S, S2, D, E&gt; Sub&lt;ArrayBase&lt;S2, E&gt;&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Sub&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, B, S, S2, D, E&gt; Sub&lt;&amp;'a ArrayBase&lt;S2, E&gt;&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Sub&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, B, S, S2, D, E&gt; Sub&lt;&amp;'a ArrayBase&lt;S2, E&gt;&gt; for &amp;'a ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Sub&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, S, D, B&gt; Sub&lt;B&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Sub&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ScalarOperand,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, S, D, B&gt; Sub&lt;B&gt; for &amp;'a ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Sub&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ScalarOperand,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i8&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u8&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i16&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i16&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u16&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u16&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i32&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i32&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u32&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u32&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i64&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i64&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u64&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u64&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for i128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i128&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i128&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for u128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u128&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u128&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for f32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = f32&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for f32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = f32&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for f64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = f64&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for f64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = f64&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for Complex&lt;f32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = Complex&lt;f32&gt;&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for Complex&lt;f32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = Complex&lt;f32&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Sub&lt;ArrayBase&lt;S, D&gt;&gt; for Complex&lt;f64&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = Complex&lt;f64&gt;&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Sub&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for Complex&lt;f64&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = Complex&lt;f64&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b BigInt&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for u8","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b u8","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for u16","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b u16","synthetic":false,"types":[]},{"text":"impl Sub&lt;u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;usize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for usize","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b usize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b usize","synthetic":false,"types":[]},{"text":"impl Sub&lt;usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a i8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for i8","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i8&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b i8","synthetic":false,"types":[]},{"text":"impl Sub&lt;i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for i8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a i16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for i16","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i16&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b i16","synthetic":false,"types":[]},{"text":"impl Sub&lt;i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for i16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a isize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;isize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for isize","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b isize&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b isize","synthetic":false,"types":[]},{"text":"impl Sub&lt;isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for isize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for u32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a u128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for u128","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b u128","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for u32","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for u64","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for u128","synthetic":false,"types":[]},{"text":"impl Sub&lt;u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a i32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i32&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b i32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a i64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for i64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i64&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b i64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigInt&gt; for &amp;'a i128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;i128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigInt&gt; for i128","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b i128&gt; for &amp;'a BigInt","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigInt&gt; for &amp;'b i128","synthetic":false,"types":[]},{"text":"impl Sub&lt;i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for i32","synthetic":false,"types":[]},{"text":"impl Sub&lt;i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for i64","synthetic":false,"types":[]},{"text":"impl Sub&lt;i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigInt&gt; for i128","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b BigUint&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigUint&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigUint&gt; for &amp;'a u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u8&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigUint&gt; for u8","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u8&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigUint&gt; for &amp;'b u8","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigUint&gt; for u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigUint&gt; for &amp;'a u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u16&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigUint&gt; for u16","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u16&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigUint&gt; for &amp;'b u16","synthetic":false,"types":[]},{"text":"impl Sub&lt;u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigUint&gt; for u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a usize&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigUint&gt; for &amp;'a usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;usize&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigUint&gt; for usize","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b usize&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigUint&gt; for &amp;'b usize","synthetic":false,"types":[]},{"text":"impl Sub&lt;usize&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigUint&gt; for usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigUint&gt; for &amp;'a u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u32&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigUint&gt; for u32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u32&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigUint&gt; for &amp;'b u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigUint&gt; for &amp;'a u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u64&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigUint&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u64&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigUint&gt; for &amp;'b u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a u128&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;BigUint&gt; for &amp;'a u128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;u128&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a BigUint&gt; for u128","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'b u128&gt; for &amp;'a BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a BigUint&gt; for &amp;'b u128","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigUint&gt; for u32","synthetic":false,"types":[]},{"text":"impl Sub&lt;u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigUint&gt; for u64","synthetic":false,"types":[]},{"text":"impl Sub&lt;u128&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl Sub&lt;BigUint&gt; for u128","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Sub&lt;&amp;'b Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Sub&lt;Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Sub&lt;&amp;'a Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Sub&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Sub&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Sub&lt;&amp;'a T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Sub&lt;T&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Sub&lt;&amp;'a T&gt; for &amp;'b Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;usize&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;usize&gt;&gt; for &amp;'a usize","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;usize&gt;&gt; for &amp;'b usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;u8&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;u8&gt;&gt; for &amp;'a u8","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;u8&gt;&gt; for &amp;'b u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;u16&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;u16&gt;&gt; for &amp;'a u16","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;u16&gt;&gt; for &amp;'b u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;u32&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;u32&gt;&gt; for &amp;'a u32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;u32&gt;&gt; for &amp;'b u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;u64&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;u64&gt;&gt; for &amp;'a u64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;u64&gt;&gt; for &amp;'b u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;u128&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;u128&gt;&gt; for &amp;'a u128","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;u128&gt;&gt; for &amp;'b u128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;isize&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;isize&gt;&gt; for &amp;'a isize","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;isize&gt;&gt; for &amp;'b isize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;i8&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;i8&gt;&gt; for &amp;'a i8","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;i8&gt;&gt; for &amp;'b i8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;i16&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;i16&gt;&gt; for &amp;'a i16","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;i16&gt;&gt; for &amp;'b i16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;i32&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;i32&gt;&gt; for &amp;'a i32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;i32&gt;&gt; for &amp;'b i32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;i64&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;i64&gt;&gt; for &amp;'a i64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;i64&gt;&gt; for &amp;'b i64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;i128&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;i128&gt;&gt; for &amp;'a i128","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;i128&gt;&gt; for &amp;'b i128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;f32&gt;&gt; for &amp;'a f32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;f32&gt;&gt; for &amp;'b f32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;&amp;'a Complex&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Sub&lt;Complex&lt;f64&gt;&gt; for &amp;'a f64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Sub&lt;&amp;'a Complex&lt;f64&gt;&gt; for &amp;'b f64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;usize&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;u8&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;u16&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;u32&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;u64&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;u128&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;isize&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;i8&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;i16&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;i32&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;i64&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;i128&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Complex&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Sub&lt;&amp;'b Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Sub&lt;&amp;'b T&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;T&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Sub&lt;&amp;'a T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Sub&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer&gt; Sub&lt;T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;OrderedFloat&lt;T&gt;&gt; for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;NotNan&lt;T&gt;&gt; for NotNan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float&gt; Sub&lt;T&gt; for NotNan&lt;T&gt;","synthetic":false,"types":[]}];
implementors["packed_simd_2"] = [{"text":"impl Sub&lt;Simd&lt;[i8; 2]&gt;&gt; for i8x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;i8&gt; for i8x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 2]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 2]&gt;&gt; for u8x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for u8x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 2]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 4]&gt;&gt; for i8x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;i8&gt; for i8x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 4]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 4]&gt;&gt; for u8x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for u8x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 4]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 2]&gt;&gt; for i16x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;i16&gt; for i16x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 2]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 2]&gt;&gt; for u16x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;u16&gt; for u16x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 2]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 8]&gt;&gt; for i8x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;i8&gt; for i8x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 8]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 8]&gt;&gt; for u8x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for u8x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 8]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 4]&gt;&gt; for i16x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;i16&gt; for i16x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 4]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 4]&gt;&gt; for u16x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;u16&gt; for u16x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 4]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i32; 2]&gt;&gt; for i32x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;i32&gt; for i32x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i32; 2]&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u32; 2]&gt;&gt; for u32x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for u32x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u32; 2]&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f32; 2]&gt;&gt; for f32x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;f32&gt; for f32x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f32; 2]&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 16]&gt;&gt; for i8x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;i8&gt; for i8x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 16]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 16]&gt;&gt; for u8x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for u8x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 16]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 8]&gt;&gt; for i16x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;i16&gt; for i16x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 8]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 8]&gt;&gt; for u16x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;u16&gt; for u16x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 8]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i32; 4]&gt;&gt; for i32x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;i32&gt; for i32x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i32; 4]&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u32; 4]&gt;&gt; for u32x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for u32x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u32; 4]&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f32; 4]&gt;&gt; for f32x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;f32&gt; for f32x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f32; 4]&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i64; 2]&gt;&gt; for i64x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;i64&gt; for i64x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i64; 2]&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u64; 2]&gt;&gt; for u64x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;u64&gt; for u64x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u64; 2]&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f64; 2]&gt;&gt; for f64x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;f64&gt; for f64x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f64; 2]&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i128; 1]&gt;&gt; for i128x1","synthetic":false,"types":[]},{"text":"impl Sub&lt;i128&gt; for i128x1","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i128; 1]&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u128; 1]&gt;&gt; for u128x1","synthetic":false,"types":[]},{"text":"impl Sub&lt;u128&gt; for u128x1","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u128; 1]&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 32]&gt;&gt; for i8x32","synthetic":false,"types":[]},{"text":"impl Sub&lt;i8&gt; for i8x32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 32]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 32]&gt;&gt; for u8x32","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for u8x32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 32]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 16]&gt;&gt; for i16x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;i16&gt; for i16x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 16]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 16]&gt;&gt; for u16x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;u16&gt; for u16x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 16]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i32; 8]&gt;&gt; for i32x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;i32&gt; for i32x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i32; 8]&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u32; 8]&gt;&gt; for u32x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for u32x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u32; 8]&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f32; 8]&gt;&gt; for f32x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;f32&gt; for f32x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f32; 8]&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i64; 4]&gt;&gt; for i64x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;i64&gt; for i64x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i64; 4]&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u64; 4]&gt;&gt; for u64x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;u64&gt; for u64x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u64; 4]&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f64; 4]&gt;&gt; for f64x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;f64&gt; for f64x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f64; 4]&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i128; 2]&gt;&gt; for i128x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;i128&gt; for i128x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i128; 2]&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u128; 2]&gt;&gt; for u128x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;u128&gt; for u128x2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u128; 2]&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 64]&gt;&gt; for i8x64","synthetic":false,"types":[]},{"text":"impl Sub&lt;i8&gt; for i8x64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i8; 64]&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 64]&gt;&gt; for u8x64","synthetic":false,"types":[]},{"text":"impl Sub&lt;u8&gt; for u8x64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u8; 64]&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 32]&gt;&gt; for i16x32","synthetic":false,"types":[]},{"text":"impl Sub&lt;i16&gt; for i16x32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i16; 32]&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 32]&gt;&gt; for u16x32","synthetic":false,"types":[]},{"text":"impl Sub&lt;u16&gt; for u16x32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u16; 32]&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i32; 16]&gt;&gt; for i32x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;i32&gt; for i32x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i32; 16]&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u32; 16]&gt;&gt; for u32x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;u32&gt; for u32x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u32; 16]&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f32; 16]&gt;&gt; for f32x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;f32&gt; for f32x16","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f32; 16]&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i64; 8]&gt;&gt; for i64x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;i64&gt; for i64x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i64; 8]&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u64; 8]&gt;&gt; for u64x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;u64&gt; for u64x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u64; 8]&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f64; 8]&gt;&gt; for f64x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;f64&gt; for f64x8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[f64; 8]&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i128; 4]&gt;&gt; for i128x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;i128&gt; for i128x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[i128; 4]&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u128; 4]&gt;&gt; for u128x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;u128&gt; for u128x4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[u128; 4]&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[isize; 2]&gt;&gt; for isizex2","synthetic":false,"types":[]},{"text":"impl Sub&lt;isize&gt; for isizex2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[isize; 2]&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[usize; 2]&gt;&gt; for usizex2","synthetic":false,"types":[]},{"text":"impl Sub&lt;usize&gt; for usizex2","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[usize; 2]&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[isize; 4]&gt;&gt; for isizex4","synthetic":false,"types":[]},{"text":"impl Sub&lt;isize&gt; for isizex4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[isize; 4]&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[usize; 4]&gt;&gt; for usizex4","synthetic":false,"types":[]},{"text":"impl Sub&lt;usize&gt; for usizex4","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[usize; 4]&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[isize; 8]&gt;&gt; for isizex8","synthetic":false,"types":[]},{"text":"impl Sub&lt;isize&gt; for isizex8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[isize; 8]&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[usize; 8]&gt;&gt; for usizex8","synthetic":false,"types":[]},{"text":"impl Sub&lt;usize&gt; for usizex8","synthetic":false,"types":[]},{"text":"impl Sub&lt;Simd&lt;[usize; 8]&gt;&gt; for usize","synthetic":false,"types":[]}];
implementors["polars_core"] = [{"text":"impl&lt;T&gt; Sub&lt;&amp;'_ ChunkedArray&lt;T&gt;&gt; for &amp;ChunkedArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Native: Add&lt;Output = T::Native&gt; + Sub&lt;Output = T::Native&gt; + Mul&lt;Output = T::Native&gt; + Div&lt;Output = T::Native&gt; + Zero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sub&lt;ChunkedArray&lt;T&gt;&gt; for ChunkedArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Native: Add&lt;Output = T::Native&gt; + Sub&lt;Output = T::Native&gt; + Mul&lt;Output = T::Native&gt; + Div&lt;Output = T::Native&gt; + Zero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N&gt; Sub&lt;N&gt; for &amp;ChunkedArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Native: NumCast,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Num + ToPrimitive,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Native: Sub&lt;Output = T::Native&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Sub&lt;&amp;'_ Series&gt; for &amp;DataFrame","synthetic":false,"types":[]},{"text":"impl Sub&lt;&amp;'_ Series&gt; for DataFrame","synthetic":false,"types":[]},{"text":"impl Sub&lt;&amp;'_ Series&gt; for &amp;Series","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sub&lt;T&gt; for &amp;Series <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Num + NumCast,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Sub&lt;T&gt; for Series <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Num + NumCast,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["polars_lazy"] = [{"text":"impl Sub&lt;Expr&gt; for Expr","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl Sub&lt;Duration&gt; for Duration","synthetic":false,"types":[]},{"text":"impl Sub&lt;Duration&gt; for Timespec","synthetic":false,"types":[]},{"text":"impl Sub&lt;Timespec&gt; for Timespec","synthetic":false,"types":[]},{"text":"impl Sub&lt;SteadyTime&gt; for SteadyTime","synthetic":false,"types":[]},{"text":"impl Sub&lt;Duration&gt; for SteadyTime","synthetic":false,"types":[]},{"text":"impl Sub&lt;Duration&gt; for Tm","synthetic":false,"types":[]},{"text":"impl Sub&lt;Tm&gt; for Tm","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()