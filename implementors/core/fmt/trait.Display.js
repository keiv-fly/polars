(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Display for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Array&lt;Item = u8&gt; + Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for CapacityError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["arrow"] = [{"text":"impl Display for DataType","synthetic":false,"types":[]},{"text":"impl Display for Field","synthetic":false,"types":[]},{"text":"impl Display for Schema","synthetic":false,"types":[]},{"text":"impl Display for ArrowError","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Display for Base64Display&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Display for DecodeError","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl Display for FromUtf8Error","synthetic":false,"types":[]},{"text":"impl Display for BString","synthetic":false,"types":[]},{"text":"impl Display for BStr","synthetic":false,"types":[]},{"text":"impl Display for Utf8Error","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Display for FixedOffset","synthetic":false,"types":[]},{"text":"impl Display for Utc","synthetic":false,"types":[]},{"text":"impl Display for NaiveDate","synthetic":false,"types":[]},{"text":"impl Display for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Display for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Display for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Display for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Display,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Display for ParseError","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Iterator&lt;Item = B&gt; + Clone, B:&nbsp;Borrow&lt;Item&lt;'a&gt;&gt;&gt; Display for DelayedFormat&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl Display for RoundingError","synthetic":false,"types":[]},{"text":"impl Display for Weekday","synthetic":false,"types":[]}];
implementors["comfy_table"] = [{"text":"impl Display for Table","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T&gt; Display for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for RecvError","synthetic":false,"types":[]},{"text":"impl Display for TryRecvError","synthetic":false,"types":[]},{"text":"impl Display for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Display for TrySelectError","synthetic":false,"types":[]},{"text":"impl Display for SelectTimeoutError","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;?Sized + Display&gt; Display for ShardedLockReadGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Display&gt; Display for ShardedLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["crossterm"] = [{"text":"impl Display for MoveTo","synthetic":false,"types":[]},{"text":"impl Display for MoveToColumn","synthetic":false,"types":[]},{"text":"impl Display for MoveToNextLine","synthetic":false,"types":[]},{"text":"impl Display for MoveToPreviousLine","synthetic":false,"types":[]},{"text":"impl Display for MoveUp","synthetic":false,"types":[]},{"text":"impl Display for MoveDown","synthetic":false,"types":[]},{"text":"impl Display for MoveLeft","synthetic":false,"types":[]},{"text":"impl Display for MoveRight","synthetic":false,"types":[]},{"text":"impl Display for SavePosition","synthetic":false,"types":[]},{"text":"impl Display for RestorePosition","synthetic":false,"types":[]},{"text":"impl Display for Hide","synthetic":false,"types":[]},{"text":"impl Display for Show","synthetic":false,"types":[]},{"text":"impl Display for EnableBlinking","synthetic":false,"types":[]},{"text":"impl Display for DisableBlinking","synthetic":false,"types":[]},{"text":"impl Display for Colored","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Display&gt; Display for StyledContent&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl Display for Attribute","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Display&gt; Display for Print&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for SetForegroundColor","synthetic":false,"types":[]},{"text":"impl Display for SetBackgroundColor","synthetic":false,"types":[]},{"text":"impl Display for SetColors","synthetic":false,"types":[]},{"text":"impl Display for SetAttribute","synthetic":false,"types":[]},{"text":"impl Display for PrintStyledContent&lt;String&gt;","synthetic":false,"types":[]},{"text":"impl Display for PrintStyledContent&lt;&amp;'static str&gt;","synthetic":false,"types":[]},{"text":"impl Display for ResetColor","synthetic":false,"types":[]},{"text":"impl Display for ScrollUp","synthetic":false,"types":[]},{"text":"impl Display for ScrollDown","synthetic":false,"types":[]},{"text":"impl Display for SetSize","synthetic":false,"types":[]},{"text":"impl Display for Clear","synthetic":false,"types":[]},{"text":"impl Display for ErrorKind","synthetic":false,"types":[]}];
implementors["csv"] = [{"text":"impl Display for DeserializeError","synthetic":false,"types":[]},{"text":"impl Display for DeserializeErrorKind","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for FromUtf8Error","synthetic":false,"types":[]},{"text":"impl Display for Utf8Error","synthetic":false,"types":[]},{"text":"impl&lt;W&gt; Display for IntoInnerError&lt;W&gt;","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Display for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Display,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Display,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["fast_float"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["flatbuffers"] = [{"text":"impl Display for InvalidFlatbuffer","synthetic":false,"types":[]}];
implementors["flate2"] = [{"text":"impl Display for DecompressError","synthetic":false,"types":[]},{"text":"impl Display for CompressError","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Display for FromHexError","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;'a, I, F&gt; Display for FormatWith&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(I::Item, &amp;mut dyn FnMut(&amp;dyn Display) -&gt; Result) -&gt; Result,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I&gt; Display for Format&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Display,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["lock_api"] = [{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MappedMutexGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for ReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawMutex + 'a, G:&nbsp;GetThreadId + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MappedReentrantMutexGuard&lt;'a, R, G, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for RwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for RwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLockUpgrade + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for RwLockUpgradableReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MappedRwLockReadGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, R:&nbsp;RawRwLock + 'a, T:&nbsp;Display + ?Sized + 'a&gt; Display for MappedRwLockWriteGuard&lt;'a, R, T&gt;","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Display for Level","synthetic":false,"types":[]},{"text":"impl Display for LevelFilter","synthetic":false,"types":[]},{"text":"impl Display for SetLoggerError","synthetic":false,"types":[]},{"text":"impl Display for ParseLevelError","synthetic":false,"types":[]}];
implementors["lz4"] = [{"text":"impl Display for LZ4Error","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;'a, A:&nbsp;Display, S, D:&nbsp;Dimension&gt; Display for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Display for ShapeError","synthetic":false,"types":[]},{"text":"impl Display for SliceOrIndex","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Display for BigInt","synthetic":false,"types":[]},{"text":"impl Display for BigUint","synthetic":false,"types":[]},{"text":"impl Display for ParseBigIntError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Display for TryFromBigIntError&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Display for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Display + Num + PartialOrd + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Display&gt; Display for ParseComplexError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Display + Clone + Integer&gt; Display for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for ParseRatioError","synthetic":false,"types":[]}];
implementors["num_traits"] = [{"text":"impl Display for ParseFloatError","synthetic":false,"types":[]}];
implementors["ordered_float"] = [{"text":"impl&lt;T:&nbsp;Float + Display&gt; Display for OrderedFloat&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + Display&gt; Display for NotNan&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for FloatIsNan","synthetic":false,"types":[]},{"text":"impl&lt;E:&nbsp;Debug&gt; Display for ParseNotNanError&lt;E&gt;","synthetic":false,"types":[]}];
implementors["parquet"] = [{"text":"impl Display for ParquetError","synthetic":false,"types":[]},{"text":"impl Display for Type","synthetic":false,"types":[]},{"text":"impl Display for LogicalType","synthetic":false,"types":[]},{"text":"impl Display for Repetition","synthetic":false,"types":[]},{"text":"impl Display for Encoding","synthetic":false,"types":[]},{"text":"impl Display for Compression","synthetic":false,"types":[]},{"text":"impl Display for PageType","synthetic":false,"types":[]},{"text":"impl Display for SortOrder","synthetic":false,"types":[]},{"text":"impl Display for ColumnOrder","synthetic":false,"types":[]},{"text":"impl Display for Int96","synthetic":false,"types":[]},{"text":"impl Display for ByteArray","synthetic":false,"types":[]},{"text":"impl Display for FixedLenByteArray","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Display for BufferPtr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for Statistics","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;DataType&gt; Display for TypedStatistics&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Display for Row","synthetic":false,"types":[]},{"text":"impl Display for Field","synthetic":false,"types":[]},{"text":"impl Display for Reader","synthetic":false,"types":[]},{"text":"impl Display for ColumnPath","synthetic":false,"types":[]}];
implementors["polars_arrow"] = [{"text":"impl Display for PolarsError","synthetic":false,"types":[]}];
implementors["polars_core"] = [{"text":"impl Display for DataType","synthetic":false,"types":[]},{"text":"impl Display for PolarsError","synthetic":false,"types":[]},{"text":"impl Display for Series","synthetic":false,"types":[]},{"text":"impl Display for DataFrame","synthetic":false,"types":[]},{"text":"impl Display for AnyValue&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Display for TokenStream","synthetic":false,"types":[]},{"text":"impl Display for LexError","synthetic":false,"types":[]},{"text":"impl Display for TokenTree","synthetic":false,"types":[]},{"text":"impl Display for Group","synthetic":false,"types":[]},{"text":"impl Display for Punct","synthetic":false,"types":[]},{"text":"impl Display for Ident","synthetic":false,"types":[]},{"text":"impl Display for Literal","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Display for BernoulliError","synthetic":false,"types":[]},{"text":"impl Display for WeightedError","synthetic":false,"types":[]},{"text":"impl Display for ReadError","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["rand_distr"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for ChiSquaredError","synthetic":false,"types":[]},{"text":"impl Display for FisherFError","synthetic":false,"types":[]},{"text":"impl Display for BetaError","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for PertError","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for TriangularError","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["rayon_core"] = [{"text":"impl Display for ThreadPoolBuildError","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Regex","synthetic":false,"types":[]},{"text":"impl Display for Regex","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for ErrorKind","synthetic":false,"types":[]},{"text":"impl Display for Ast","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for ErrorKind","synthetic":false,"types":[]},{"text":"impl Display for Hir","synthetic":false,"types":[]},{"text":"impl Display for CaseFoldError","synthetic":false,"types":[]},{"text":"impl Display for UnicodeWordError","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for Unexpected&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for dyn Expected + 'a","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for Value","synthetic":false,"types":[]},{"text":"impl Display for Number","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl Display for CollectionAllocErr","synthetic":false,"types":[]}];
implementors["snap"] = [{"text":"impl&lt;W&gt; Display for IntoInnerError&lt;W&gt;","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["strum"] = [{"text":"impl Display for ParseError","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Display for Lifetime","synthetic":false,"types":[]},{"text":"impl Display for LitInt","synthetic":false,"types":[]},{"text":"impl Display for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Display for ParseBuffer&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]}];
implementors["thrift"] = [{"text":"impl Display for TMessageType","synthetic":false,"types":[]},{"text":"impl Display for TType","synthetic":false,"types":[]},{"text":"impl Display for Error","synthetic":false,"types":[]},{"text":"impl Display for TransportError","synthetic":false,"types":[]},{"text":"impl Display for ProtocolError","synthetic":false,"types":[]},{"text":"impl Display for ApplicationError","synthetic":false,"types":[]}];
implementors["time"] = [{"text":"impl&lt;'a&gt; Display for TmFmt&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Display for Duration","synthetic":false,"types":[]},{"text":"impl Display for OutOfRangeError","synthetic":false,"types":[]},{"text":"impl Display for SteadyTime","synthetic":false,"types":[]},{"text":"impl Display for ParseError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()