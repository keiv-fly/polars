(function() {var implementors = {};
implementors["ahash"] = [{"text":"impl&lt;K, V, S&gt; FromIterator&lt;(K, V)&gt; for AHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; FromIterator&lt;T&gt; for AHashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; FromIterator&lt;&lt;A as Array&gt;::Item&gt; for ArrayVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["arrow"] = [{"text":"impl&lt;Ptr, OffsetSize:&nbsp;BinaryOffsetSizeTrait&gt; FromIterator&lt;Option&lt;Ptr&gt;&gt; for GenericBinaryArray&lt;OffsetSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ptr: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ptr:&nbsp;Borrow&lt;Option&lt;bool&gt;&gt;&gt; FromIterator&lt;Ptr&gt; for BooleanArray","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;ArrowPrimitiveType + ArrowDictionaryKeyType&gt; FromIterator&lt;Option&lt;&amp;'a str&gt;&gt; for DictionaryArray&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;ArrowPrimitiveType + ArrowDictionaryKeyType&gt; FromIterator&lt;&amp;'a str&gt; for DictionaryArray&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ArrowPrimitiveType, Ptr:&nbsp;Borrow&lt;Option&lt;&lt;T as ArrowPrimitiveType&gt;::Native&gt;&gt;&gt; FromIterator&lt;Ptr&gt; for PrimitiveArray&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, Ptr, OffsetSize:&nbsp;StringOffsetSizeTrait&gt; FromIterator&lt;Option&lt;Ptr&gt;&gt; for GenericStringArray&lt;OffsetSize&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ptr: AsRef&lt;str&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["bstr"] = [{"text":"impl FromIterator&lt;char&gt; for BString","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;u8&gt; for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a str&gt; for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a [u8]&gt; for BString","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a BStr&gt; for BString","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;BString&gt; for BString","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T&gt; FromIterator&lt;Steal&lt;T&gt;&gt; for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossterm"] = [{"text":"impl FromIterator&lt;KeyModifiers&gt; for KeyModifiers","synthetic":false,"types":[]}];
implementors["csv"] = [{"text":"impl&lt;T:&nbsp;AsRef&lt;[u8]&gt;&gt; FromIterator&lt;T&gt; for ByteRecord","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;AsRef&lt;str&gt;&gt; FromIterator&lt;T&gt; for StringRecord","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; FromIterator&lt;(K, V)&gt; for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; FromIterator&lt;T&gt; for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;K, V, S&gt; FromIterator&lt;(K, V)&gt; for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Hash + Eq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, S&gt; FromIterator&lt;T&gt; for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Hash + Eq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: BuildHasher + Default,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;A, S&gt; FromIterator&lt;A&gt; for ArrayBase&lt;S, Ix1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["polars_arrow"] = [{"text":"impl&lt;T&gt; FromIterator&lt;T&gt; for AlignedVec&lt;T&gt;","synthetic":false,"types":[]}];
implementors["polars_core"] = [{"text":"impl&lt;T&gt; FromIterator&lt;(AlignedVec&lt;&lt;T as ArrowPrimitiveType&gt;::Native&gt;, Option&lt;Buffer&gt;)&gt; for ChunkedArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; FromIterator&lt;Option&lt;&lt;T as ArrowPrimitiveType&gt;::Native&gt;&gt; for ChunkedArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsPrimitiveType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;bool&gt;&gt; for ChunkedArray&lt;BooleanType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; FromIterator&lt;&lt;T as ArrowPrimitiveType&gt;::Native&gt; for NoNull&lt;ChunkedArray&lt;T&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsPrimitiveType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;bool&gt; for BooleanChunked","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;bool&gt; for NoNull&lt;BooleanChunked&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a str&gt; for Utf8Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;Cow&lt;'a, str&gt;&gt; for Utf8Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;Option&lt;Cow&lt;'a, str&gt;&gt;&gt; for Utf8Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a &amp;'a str&gt; for Utf8Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;Option&lt;&amp;'a str&gt;&gt; for Utf8Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a Option&lt;&amp;'a str&gt;&gt; for Utf8Chunked","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;String&gt; for Utf8Chunked","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;String&gt;&gt; for Utf8Chunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a Series&gt; for ListChunked","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Series&gt; for ListChunked","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;Arc&lt;dyn SeriesTrait + 'static&gt;&gt;&gt; for ListChunked","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;Series&gt;&gt; for ListChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;Option&lt;&amp;'a Series&gt;&gt; for ListChunked","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a Option&lt;Series&gt;&gt; for ListChunked","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Series&gt; for DataFrame","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;u8&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;u8&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a u8&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;u16&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;u16&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a u16&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;u32&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;u32&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a u32&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;u64&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;u64&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a u64&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;i8&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;i8&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a i8&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;i16&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;i16&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a i16&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;i32&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;i32&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a i32&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;i64&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;i64&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a i64&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;f32&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;f32&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a f32&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;f64&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;f64&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a f64&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;Option&lt;bool&gt;&gt; for Series","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;bool&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a bool&gt; for Series","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; FromIterator&lt;&amp;'a str&gt; for Series","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl FromIterator&lt;TokenTree&gt; for TokenStream","synthetic":false,"types":[]},{"text":"impl FromIterator&lt;TokenStream&gt; for TokenStream","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl FromIterator&lt;(String, Value)&gt; for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Into&lt;Value&gt;&gt; FromIterator&lt;T&gt; for Value","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Into&lt;String&gt;, V:&nbsp;Into&lt;Value&gt;&gt; FromIterator&lt;(K, V)&gt; for Value","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; FromIterator&lt;&lt;A as Array&gt;::Item&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl&lt;T, P&gt; FromIterator&lt;T&gt; for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; FromIterator&lt;Pair&lt;T, P&gt;&gt; for Punctuated&lt;T, P&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()